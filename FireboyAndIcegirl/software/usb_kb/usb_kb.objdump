
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012688 memsz 0x00012688 flags r-x
    LOAD off    0x000136a8 vaddr 0x100126a8 paddr 0x10014198 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00015c88 vaddr 0x10015c88 paddr 0x10015c88 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000119dc  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a9c  10011c0c  10011c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  100126a8  10014198  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  10015c88  10015c88  00015c88  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015198  2**0
                  CONTENTS
  7 .sdram        00000000  10015dec  10015dec  00015198  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015198  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  000151c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000237d2  00000000  00000000  000160d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009123  00000000  00000000  000398aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b90d  00000000  00000000  000429cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002384  00000000  00000000  0004e2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a4c  00000000  00000000  00050660  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  000540ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b918  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b958  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000705e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000705e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000705f5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000705f6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000705f7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000705fb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000705ff  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00070603  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007060e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00070619  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000d  00000000  00000000  00070624  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000046  00000000  00000000  00070631  2**0
                  CONTENTS, READONLY
 30 .jdi          00005758  00000000  00000000  00070677  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000726ff  00000000  00000000  00075dcf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10011c0c l    d  .rodata	00000000 .rodata
100126a8 l    d  .rwdata	00000000 .rwdata
10015c88 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015dec l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10015c88 l     O .bss	00000002 ctl_reg.3589
10015c8a l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100123ee l     O .rodata	00000010 zeroes.4404
1000497c l     F .text	000000bc __sbprintf
100123fe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004b8c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100066e4 l     F .text	00000008 __fp_unlock
100066f8 l     F .text	0000019c __sinit.part.1
10006894 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100126a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012aec l     O .rwdata	00000020 lc_ctype_charset
10012acc l     O .rwdata	00000020 lc_message_charset
10012b0c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012430 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009d68 l     F .text	000000fc __sprint_r.part.0
10012554 l     O .rodata	00000010 zeroes.4349
1000b3a4 l     F .text	000000bc __sbprintf
10012564 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f3ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f500 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f52c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f708 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f7f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f9d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10014188 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000fc74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000fdb0 l     F .text	00000034 alt_dev_reg
100130f4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1001008c l     F .text	0000020c altera_avalon_jtag_uart_irq
10010298 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010b74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010fd4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011134 l     F .text	0000003c alt_get_errno
10011170 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015cc0 g     O .bss	00000004 alt_instruction_exception_handler
100093ac g     F .text	00000074 _mprec_log10
10009498 g     F .text	0000008c __any_on
1000b958 g     F .text	00000054 _isatty_r
1001243c g     O .rodata	00000028 __mprec_tinytens
1000f90c g     F .text	0000007c alt_main
10002518 g     F .text	000000c0 _puts_r
10015cec g     O .bss	00000100 alt_irq
1000b9ac g     F .text	00000060 _lseek_r
10014198 g       *ABS*	00000000 __flash_rwdata_start
1000ddc4 g     F .text	00000088 .hidden __eqdf2
10015dec g       *ABS*	00000000 __alt_heap_start
100024dc g     F .text	0000003c printf
1000bbc4 g     F .text	0000009c _wcrtomb_r
10009c28 g     F .text	0000005c __sseek
10006a44 g     F .text	00000010 __sinit
1000ba6c g     F .text	00000140 __swbuf_r
10007518 g     F .text	0000007c _setlocale_r
1000689c g     F .text	00000078 __sfmoreglue
1000f9ac g     F .text	00000024 __malloc_unlock
100023ac g     F .text	00000080 UsbGetRetryCnt
100081e8 g     F .text	0000015c memmove
1000026c g     F .text	00000088 IO_init
10006a2c g     F .text	00000018 _cleanup
1000846c g     F .text	000000a8 _Balloc
1000de4c g     F .text	000000dc .hidden __gtdf2
1001155c g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b8fc g     F .text	0000005c _fstat_r
10015ca4 g     O .bss	00000004 errno
10009ba4 g     F .text	00000008 __seofread
10015cac g     O .bss	00000004 alt_argv
1001c154 g       *ABS*	00000000 _gp
1000fc44 g     F .text	00000030 usleep
10012f74 g     O .rwdata	00000180 alt_fd_list
10011580 g     F .text	00000090 alt_find_dev
100080a0 g     F .text	00000148 memcpy
100066ec g     F .text	0000000c _cleanup_r
1000f204 g     F .text	000000dc .hidden __floatsidf
100110b8 g     F .text	0000007c alt_io_redirect
1000df28 g     F .text	000000f4 .hidden __ltdf2
10011c0c g       *ABS*	00000000 __DTOR_END__
100025d8 g     F .text	00000014 puts
100117dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
10009a88 g     F .text	00000074 __fpclassifyd
10009308 g     F .text	000000a4 __ratio
1000b388 g     F .text	0000001c __vfiprintf_internal
10010490 g     F .text	0000021c altera_avalon_jtag_uart_read
100024ac g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000ca64 g     F .text	00000064 .hidden __udivsi3
1000f65c g     F .text	000000ac isatty
1001248c g     O .rodata	000000c8 __mprec_tens
10007594 g     F .text	0000000c __locale_charset
10015ca0 g     O .bss	00000004 __malloc_top_pad
10001a38 g     F .text	00000268 UsbGetConfigDesc2
10014160 g     O .rwdata	00000004 __mb_cur_max
100075c4 g     F .text	0000000c _localeconv_r
100088a0 g     F .text	0000003c __i2b
10006ec8 g     F .text	000004c8 __sfvwrite_r
10009afc g     F .text	00000054 _sbrk_r
1000ba0c g     F .text	00000060 _read_r
10014180 g     O .rwdata	00000004 alt_max_fd
1000b5f0 g     F .text	000000f0 _fclose_r
100066b4 g     F .text	00000030 fflush
10015c9c g     O .bss	00000004 __malloc_max_sbrked_mem
1000cb48 g     F .text	000008ac .hidden __adddf3
100090b0 g     F .text	0000010c __b2d
1000c3a8 g     F .text	000005c4 .hidden __umoddi3
1000f830 g     F .text	000000dc lseek
10014158 g     O .rwdata	00000004 _global_impure_ptr
10009524 g     F .text	00000564 _realloc_r
10015dec g       *ABS*	00000000 __bss_end
10010ee4 g     F .text	000000f0 alt_iic_isr_register
10011454 g     F .text	00000108 alt_tick
1000bdac g     F .text	000005fc .hidden __udivdi3
1000b858 g     F .text	00000024 _fputwc_r
10012464 g     O .rodata	00000028 __mprec_bigtens
10008684 g     F .text	00000104 __s2b
1000f2e0 g     F .text	000000a8 .hidden __floatunsidf
10008df0 g     F .text	00000060 __mcmp
10001488 g     F .text	00000100 UsbSetAddress
10006a64 g     F .text	00000018 __fp_lock_all
10010e98 g     F .text	0000004c alt_ic_irq_enabled
100113b8 g     F .text	0000009c alt_alarm_stop
10015cb4 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10012f4c g     O .rwdata	00000028 alt_dev_null
10010b54 g     F .text	00000020 alt_dcache_flush_all
10008788 g     F .text	00000068 __hi0bits
10000364 g     F .text	000000b4 IO_read
1000f184 g     F .text	00000080 .hidden __fixdfsi
10014198 g       *ABS*	00000000 __ram_rwdata_end
10014178 g     O .rwdata	00000008 alt_dev_list
1000fcb0 g     F .text	00000100 write
100126a8 g       *ABS*	00000000 __ram_rodata_end
1000f568 g     F .text	000000b8 fstat
1000df28 g     F .text	000000f4 .hidden __ledf2
1000242c g     F .text	00000080 UsbPrintMem
10008b68 g     F .text	00000140 __pow5mult
10009e7c g     F .text	0000150c ___vfiprintf_internal_r
10015c94 g     O .bss	00000004 __nlocale_changed
1000cac8 g     F .text	00000058 .hidden __umodsi3
10015dec g       *ABS*	00000000 end
1000ffcc g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10011c0c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f388 g     F .text	00000064 .hidden __clzsi2
100106ac g     F .text	00000224 altera_avalon_jtag_uart_write
10006a54 g     F .text	00000004 __sfp_lock_acquire
10007fbc g     F .text	000000e4 memchr
10002684 g     F .text	000022dc ___vfprintf_internal_r
10001da0 g     F .text	00000100 UsbClassRequest
10006bb8 g     F .text	00000310 _free_r
100075a0 g     F .text	00000010 __locale_mb_cur_max
10011a58 g     F .text	00000180 __call_exitprocs
10015c90 g     O .bss	00000004 __mlocale_changed
10014164 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10015cb8 g     O .bss	00000004 _alt_tick_rate
10008ca8 g     F .text	00000148 __lshift
10015cbc g     O .bss	00000004 _alt_nticks
1000fa0c g     F .text	00000104 read
1000fe1c g     F .text	0000004c alt_sys_init
10011940 g     F .text	00000118 __register_exitproc
100088dc g     F .text	0000028c __multiply
10010338 g     F .text	00000068 altera_avalon_jtag_uart_close
1000cb20 g     F .text	00000028 .hidden __mulsi3
100126a8 g       *ABS*	00000000 __ram_rwdata_start
10011c0c g       *ABS*	00000000 __ram_rodata_start
10015cc4 g     O .bss	00000028 __malloc_current_mallinfo
100091bc g     F .text	0000014c __d2b
10001588 g     F .text	00000148 UsbGetDeviceDesc1
1000fe68 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011718 g     F .text	000000c4 alt_get_fd
100109fc g     F .text	00000158 alt_busy_sleep
1000b4c0 g     F .text	00000054 _close_r
100118c4 g     F .text	0000007c memcmp
1000ff28 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015dec g       *ABS*	00000000 __alt_stack_base
1000ff78 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004a38 g     F .text	00000154 __swsetup_r
1000d3f4 g     F .text	000009d0 .hidden __divdf3
10006914 g     F .text	00000118 __sfp
10009420 g     F .text	00000078 __copybits
10012b44 g     O .rwdata	00000408 __malloc_av_
10006a60 g     F .text	00000004 __sinit_lock_release
1000e01c g     F .text	0000086c .hidden __muldf3
10009b50 g     F .text	00000054 __sread
10002328 g     F .text	00000084 UsbWaitTDListDone
10011610 g     F .text	00000108 alt_find_file
10010bb0 g     F .text	000000a4 alt_dev_llist_insert
1000f988 g     F .text	00000024 __malloc_lock
1000fb94 g     F .text	000000b0 sbrk
10006658 g     F .text	0000005c _fflush_r
1000b514 g     F .text	000000dc _calloc_r
10015c88 g       *ABS*	00000000 __bss_start
10008344 g     F .text	00000128 memset
10000418 g     F .text	00000f18 main
10015cb0 g     O .bss	00000004 alt_envp
10015c98 g     O .bss	00000004 __malloc_max_total_mem
1000fec8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001ca0 g     F .text	00000100 UsbSetConfig
1000bbac g     F .text	00000018 __swbuf
10009c84 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b6e0 g     F .text	00000014 fclose
10004db4 g     F .text	00001688 _dtoa_r
100077b0 g     F .text	0000080c _malloc_r
1000bd20 g     F .text	00000030 __ascii_wctomb
10014184 g     O .rwdata	00000004 alt_errno
10007390 g     F .text	000000c4 _fwalk
1000c96c g     F .text	00000084 .hidden __divsi3
10006a94 g     F .text	00000124 _malloc_trim_r
10001ea0 g     F .text	00000148 UsbGetHidDesc
10011c0c g       *ABS*	00000000 __CTOR_END__
10009c8c g     F .text	000000dc strcmp
10011c0c g       *ABS*	00000000 __flash_rodata_start
10011c0c g       *ABS*	00000000 __DTOR_LIST__
1000ddc4 g     F .text	00000088 .hidden __nedf2
10001388 g     F .text	0000004c UsbRead
1000fde4 g     F .text	00000038 alt_irq_init
1000fb10 g     F .text	00000084 alt_release_fd
10012574 g     O .rodata	00000100 .hidden __clz_tab
10015c8c g     O .bss	00000004 _PathLocale
10011878 g     F .text	00000014 atexit
1000b460 g     F .text	00000060 _write_r
100075d0 g     F .text	00000018 setlocale
1001415c g     O .rwdata	00000004 _impure_ptr
10015ca8 g     O .bss	00000004 alt_argc
1000643c g     F .text	0000021c __sflush_r
10010cb4 g     F .text	00000060 _do_dtors
100075bc g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000904c g     F .text	00000064 __ulp
10006a7c g     F .text	00000018 __fp_unlock_all
10014170 g     O .rwdata	00000008 alt_fs_list
10001fe8 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100075e8 g     F .text	0000000c localeconv
10010d34 g     F .text	00000050 alt_ic_isr_register
10014198 g       *ABS*	00000000 _edata
10014154 g     O .rwdata	00000001 lastReadAddr
10015dec g       *ABS*	00000000 _end
10001330 g     F .text	00000058 UsbWrite
1000b6f4 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100103a0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10010e0c g     F .text	0000008c alt_ic_irq_disable
10009bac g     F .text	0000007c __swrite
10014168 g     O .rwdata	00000004 __malloc_trim_threshold
100075b0 g     F .text	0000000c __locale_msgcharset
1001188c g     F .text	00000038 exit
10007454 g     F .text	000000c4 _fwalk_reent
10008e50 g     F .text	000001fc __mdiff
1000c9f0 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006a58 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100002f4 g     F .text	00000070 IO_write
10011bd8 g     F .text	00000034 _exit
100108d0 g     F .text	0000012c alt_alarm_start
100075f4 g     F .text	000001bc __smakebuf_r
100025ec g     F .text	00000098 strlen
1001125c g     F .text	0000015c open
1000de4c g     F .text	000000dc .hidden __gedf2
1001416c g     O .rwdata	00000004 __wctomb
10009e64 g     F .text	00000018 __sprint_r
10010d14 g     F .text	00000020 alt_icache_flush_all
1001418c g     O .rwdata	00000004 alt_priority_mask
10010d84 g     F .text	00000088 alt_ic_irq_enable
10004960 g     F .text	0000001c __vfprintf_internal
1000bd50 g     F .text	0000005c _wctomb_r
1000e888 g     F .text	000008fc .hidden __subdf3
100087f0 g     F .text	000000b0 __lo0bits
100018a8 g     F .text	00000190 UsbGetConfigDesc1
10014190 g     O .rwdata	00000008 alt_alarm_list
10010c54 g     F .text	00000060 _do_ctors
100013d4 g     F .text	000000b4 UsbSoftReset
1000bc60 g     F .text	000000c0 wcrtomb
1000f428 g     F .text	000000d8 close
100016d0 g     F .text	000001d8 UsbGetDeviceDesc2
1000f770 g     F .text	00000084 alt_load
1000b87c g     F .text	00000080 fputwc
10006a5c g     F .text	00000004 __sinit_lock_acquire
1000853c g     F .text	00000148 __multadd
10008514 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10973b04 	addi	r2,r2,23788
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10973b04 	addi	r2,r2,23788
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6db17 	ldw	r2,-25748(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6db17 	ldw	r2,-25748(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b05514 	ori	gp,gp,49492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10972214 	ori	r2,r2,23688

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d77b14 	ori	r3,r3,24044

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000f7700 	call	1000f770 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000f90c0 	call	1000f90c <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:

alt_u8 lastReadAddr = 0xfe;
//alt_u8 lastWriteAddr = 0xfe;

void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00800804 	movi	r2,32
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00800c04 	movi	r2,48
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801404 	movi	r2,80
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801004 	movi	r2,64
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00801c04 	movi	r2,112
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00801804 	movi	r2,96
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00800c04 	movi	r2,48
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00800804 	movi	r2,32
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00800804 	movi	r2,32
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00800c04 	movi	r2,48
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	0001883a 	nop
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f4:	defffd04 	addi	sp,sp,-12
100002f8:	df000215 	stw	fp,8(sp)
100002fc:	df000204 	addi	fp,sp,8
10000300:	2007883a 	mov	r3,r4
10000304:	2805883a 	mov	r2,r5
10000308:	e0fffe05 	stb	r3,-8(fp)
1000030c:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000310:	00801c04 	movi	r2,112
10000314:	e0fffe03 	ldbu	r3,-8(fp)
10000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000031c:	00801804 	movi	r2,96
10000320:	e0ffff0b 	ldhu	r3,-4(fp)
10000324:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000328:	00800c04 	movi	r2,48
1000032c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000330:	00801004 	movi	r2,64
10000334:	10000005 	stb	zero,0(r2)
//	usleep(1);
	*otg_hpi_w = 1;
10000338:	00801004 	movi	r2,64
1000033c:	00c00044 	movi	r3,1
10000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000344:	00800c04 	movi	r2,48
10000348:	00c00044 	movi	r3,1
1000034c:	10c00005 	stb	r3,0(r2)
}
10000350:	0001883a 	nop
10000354:	e037883a 	mov	sp,fp
10000358:	df000017 	ldw	fp,0(sp)
1000035c:	dec00104 	addi	sp,sp,4
10000360:	f800283a 	ret

10000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000364:	defffd04 	addi	sp,sp,-12
10000368:	df000215 	stw	fp,8(sp)
1000036c:	df000204 	addi	fp,sp,8
10000370:	2005883a 	mov	r2,r4
10000374:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	if(lastReadAddr+1 == Address) {
10000378:	d0a00003 	ldbu	r2,-32768(gp)
1000037c:	10803fcc 	andi	r2,r2,255
10000380:	10c00044 	addi	r3,r2,1
10000384:	e0bfff03 	ldbu	r2,-4(fp)
10000388:	18800c1e 	bne	r3,r2,100003bc <IO_read+0x58>
		*otg_hpi_cs = 0;
1000038c:	00800c04 	movi	r2,48
10000390:	10000005 	stb	zero,0(r2)
		temp = *otg_hpi_data;
10000394:	00801804 	movi	r2,96
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe0d 	sth	r2,-8(fp)
		*otg_hpi_cs = 1;
100003a0:	00800c04 	movi	r2,48
100003a4:	00c00044 	movi	r3,1
100003a8:	10c00005 	stb	r3,0(r2)
		lastReadAddr++;
100003ac:	d0a00003 	ldbu	r2,-32768(gp)
100003b0:	10800044 	addi	r2,r2,1
100003b4:	d0a00005 	stb	r2,-32768(gp)
100003b8:	00001206 	br	10000404 <IO_read+0xa0>
	} else {
		*otg_hpi_address = Address;
100003bc:	00801c04 	movi	r2,112
100003c0:	e0ffff03 	ldbu	r3,-4(fp)
100003c4:	10c00015 	stw	r3,0(r2)
		*otg_hpi_cs = 0;
100003c8:	00800c04 	movi	r2,48
100003cc:	10000005 	stb	zero,0(r2)
		*otg_hpi_r = 0;
100003d0:	00801404 	movi	r2,80
100003d4:	10000005 	stb	zero,0(r2)
	//	usleep(1);
		temp = *otg_hpi_data;
100003d8:	00801804 	movi	r2,96
100003dc:	10800017 	ldw	r2,0(r2)
100003e0:	e0bffe0d 	sth	r2,-8(fp)
		*otg_hpi_r = 1;
100003e4:	00801404 	movi	r2,80
100003e8:	00c00044 	movi	r3,1
100003ec:	10c00005 	stb	r3,0(r2)
		*otg_hpi_cs = 1;
100003f0:	00800c04 	movi	r2,48
100003f4:	00c00044 	movi	r3,1
100003f8:	10c00005 	stb	r3,0(r2)

		lastReadAddr = Address;
100003fc:	e0bfff03 	ldbu	r2,-4(fp)
10000400:	d0a00005 	stb	r2,-32768(gp)
	}

//	printf("%x\n",temp);
	return temp;
10000404:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000408:	e037883a 	mov	sp,fp
1000040c:	df000017 	ldw	fp,0(sp)
10000410:	dec00104 	addi	sp,sp,4
10000414:	f800283a 	ret

10000418 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000418:	defff604 	addi	sp,sp,-40
1000041c:	dfc00915 	stw	ra,36(sp)
10000420:	df000815 	stw	fp,32(sp)
10000424:	df000804 	addi	fp,sp,32
	IO_init();
10000428:	000026c0 	call	1000026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
1000042c:	e03ffb0d 	sth	zero,-20(fp)
	int keycode = 0;
10000430:	e03ffc15 	stw	zero,-16(fp)
	alt_u8 toggle = 0;
10000434:	e03ff885 	stb	zero,-30(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000438:	01040074 	movhi	r4,4097
1000043c:	21070304 	addi	r4,r4,7180
10000440:	00025d80 	call	100025d8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000444:	00013d40 	call	100013d4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000448:	000b883a 	mov	r5,zero
1000044c:	01005104 	movi	r4,324
10000450:	00013300 	call	10001330 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000454:	017fffd4 	movui	r5,65535
10000458:	01302414 	movui	r4,49296
1000045c:	00013300 	call	10001330 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000460:	01409604 	movi	r5,600
10000464:	01006d04 	movi	r4,436
10000468:	00013300 	call	10001330 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
1000046c:	00811004 	movi	r2,1088
10000470:	e0bff80d 	sth	r2,-32(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000474:	e0bff80b 	ldhu	r2,-32(fp)
10000478:	100b883a 	mov	r5,r2
1000047c:	01005084 	movi	r4,322
10000480:	00013300 	call	10001330 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000484:	00808404 	movi	r2,528
10000488:	e0bffd0d 	sth	r2,-12(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
1000048c:	e0bffd0b 	ldhu	r2,-12(fp)
10000490:	100b883a 	mov	r5,r2
10000494:	01302314 	movui	r4,49292
10000498:	00013300 	call	10001330 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
1000049c:	000b883a 	mov	r5,zero
100004a0:	01007104 	movi	r4,452
100004a4:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004a8:	000b883a 	mov	r5,zero
100004ac:	01007184 	movi	r4,454
100004b0:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100004b4:	000b883a 	mov	r5,zero
100004b8:	01007204 	movi	r4,456
100004bc:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100004c0:	000b883a 	mov	r5,zero
100004c4:	01007284 	movi	r4,458
100004c8:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100004cc:	000b883a 	mov	r5,zero
100004d0:	01007304 	movi	r4,460
100004d4:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100004d8:	000b883a 	mov	r5,zero
100004dc:	01007384 	movi	r4,462
100004e0:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100004e4:	000b883a 	mov	r5,zero
100004e8:	01007404 	movi	r4,464
100004ec:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100004f0:	000b883a 	mov	r5,zero
100004f4:	01007484 	movi	r4,466
100004f8:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100004fc:	000b883a 	mov	r5,zero
10000500:	01007504 	movi	r4,468
10000504:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000508:	000b883a 	mov	r5,zero
1000050c:	01007584 	movi	r4,470
10000510:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000514:	000b883a 	mov	r5,zero
10000518:	01007604 	movi	r4,472
1000051c:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000520:	000b883a 	mov	r5,zero
10000524:	01007684 	movi	r4,474
10000528:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
1000052c:	000b883a 	mov	r5,zero
10000530:	01007704 	movi	r4,476
10000534:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000538:	000b883a 	mov	r5,zero
1000053c:	01007784 	movi	r4,478
10000540:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000544:	01401c84 	movi	r5,114
10000548:	01007084 	movi	r4,450
1000054c:	00013300 	call	10001330 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000550:	01738054 	movui	r5,52737
10000554:	01000044 	movi	r4,1
10000558:	00002f40 	call	100002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
1000055c:	0001883a 	nop
10000560:	010000c4 	movi	r4,3
10000564:	00003640 	call	10000364 <IO_read>
10000568:	10bfffcc 	andi	r2,r2,65535
1000056c:	103ffc26 	beq	r2,zero,10000560 <__alt_data_end+0xf8000560>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000570:	00000806 	br	10000594 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000574:	01000044 	movi	r4,1
10000578:	00003640 	call	10000364 <IO_read>
1000057c:	10bfffcc 	andi	r2,r2,65535
10000580:	100b883a 	mov	r5,r2
10000584:	01040074 	movhi	r4,4097
10000588:	21070904 	addi	r4,r4,7204
1000058c:	00024dc0 	call	100024dc <printf>
		goto USB_HOT_PLUG;
10000590:	003fac06 	br	10000444 <__alt_data_end+0xf8000444>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000594:	01000044 	movi	r4,1
10000598:	00003640 	call	10000364 <IO_read>
1000059c:	10bfffcc 	andi	r2,r2,65535
100005a0:	1083fb58 	cmpnei	r2,r2,4077
100005a4:	103ff31e 	bne	r2,zero,10000574 <__alt_data_end+0xf8000574>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100005a8:	01040074 	movhi	r4,4097
100005ac:	21071204 	addi	r4,r4,7240
100005b0:	00024dc0 	call	100024dc <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100005b4:	01401d04 	movi	r5,116
100005b8:	01007084 	movi	r4,450
100005bc:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100005c0:	01400f04 	movi	r5,60
100005c4:	01007104 	movi	r4,452
100005c8:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100005cc:	000b883a 	mov	r5,zero
100005d0:	01007184 	movi	r4,454
100005d4:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100005d8:	000b883a 	mov	r5,zero
100005dc:	01007204 	movi	r4,456
100005e0:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100005e4:	000b883a 	mov	r5,zero
100005e8:	01007284 	movi	r4,458
100005ec:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100005f0:	000b883a 	mov	r5,zero
100005f4:	01007304 	movi	r4,460
100005f8:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100005fc:	000b883a 	mov	r5,zero
10000600:	01007384 	movi	r4,462
10000604:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000608:	000b883a 	mov	r5,zero
1000060c:	01007404 	movi	r4,464
10000610:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000614:	000b883a 	mov	r5,zero
10000618:	01007484 	movi	r4,466
1000061c:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000620:	000b883a 	mov	r5,zero
10000624:	01007504 	movi	r4,468
10000628:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
1000062c:	000b883a 	mov	r5,zero
10000630:	01007584 	movi	r4,470
10000634:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000638:	000b883a 	mov	r5,zero
1000063c:	01007604 	movi	r4,472
10000640:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000644:	000b883a 	mov	r5,zero
10000648:	01007684 	movi	r4,474
1000064c:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000650:	000b883a 	mov	r5,zero
10000654:	01007704 	movi	r4,476
10000658:	00013300 	call	10001330 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000065c:	000b883a 	mov	r5,zero
10000660:	01007784 	movi	r4,478
10000664:	00013300 	call	10001330 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000668:	01738054 	movui	r5,52737
1000066c:	01000044 	movi	r4,1
10000670:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000674:	0001883a 	nop
10000678:	01000044 	movi	r4,1
1000067c:	00003640 	call	10000364 <IO_read>
10000680:	10bfffcc 	andi	r2,r2,65535
10000684:	1083fb58 	cmpnei	r2,r2,4077
10000688:	10000826 	beq	r2,zero,100006ac <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000068c:	01000044 	movi	r4,1
10000690:	00003640 	call	10000364 <IO_read>
10000694:	10bfffcc 	andi	r2,r2,65535
10000698:	100b883a 	mov	r5,r2
1000069c:	01040074 	movhi	r4,4097
100006a0:	21070904 	addi	r4,r4,7204
100006a4:	00024dc0 	call	100024dc <printf>
		goto USB_HOT_PLUG;
100006a8:	003f6606 	br	10000444 <__alt_data_end+0xf8000444>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100006ac:	00b02284 	movi	r2,-16246
100006b0:	d0a6cd0d 	sth	r2,-25804(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100006b4:	008c0004 	movi	r2,12288
100006b8:	d0a6cd8d 	sth	r2,-25802(gp)
	fs_device = A_DP_STAT;
100006bc:	00880004 	movi	r2,8192
100006c0:	e0bffb0d 	sth	r2,-20(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100006c4:	d0a6cd0b 	ldhu	r2,-25804(gp)
100006c8:	10bfffcc 	andi	r2,r2,65535
100006cc:	1009883a 	mov	r4,r2
100006d0:	00013880 	call	10001388 <UsbRead>
100006d4:	e0bff80d 	sth	r2,-32(fp)

	if (!(usb_ctl_val & no_device))
100006d8:	d0a6cd8b 	ldhu	r2,-25802(gp)
100006dc:	e0fff80b 	ldhu	r3,-32(fp)
100006e0:	1884703a 	and	r2,r3,r2
100006e4:	10bfffcc 	andi	r2,r2,65535
100006e8:	1000351e 	bne	r2,zero,100007c0 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006ec:	e03ff8c5 	stb	zero,-29(fp)
100006f0:	00000f06 	br	10000730 <main+0x318>
		{
			usleep(5*1000);
100006f4:	0104e204 	movi	r4,5000
100006f8:	000fc440 	call	1000fc44 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100006fc:	d0a6cd0b 	ldhu	r2,-25804(gp)
10000700:	10bfffcc 	andi	r2,r2,65535
10000704:	1009883a 	mov	r4,r2
10000708:	00013880 	call	10001388 <UsbRead>
1000070c:	e0bff80d 	sth	r2,-32(fp)
			if(usb_ctl_val & no_device) break;
10000710:	d0a6cd8b 	ldhu	r2,-25802(gp)
10000714:	e0fff80b 	ldhu	r3,-32(fp)
10000718:	1884703a 	and	r2,r3,r2
1000071c:	10bfffcc 	andi	r2,r2,65535
10000720:	1000071e 	bne	r2,zero,10000740 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000724:	e0bff8c3 	ldbu	r2,-29(fp)
10000728:	10800044 	addi	r2,r2,1
1000072c:	e0bff8c5 	stb	r2,-29(fp)
10000730:	e0bff8c3 	ldbu	r2,-29(fp)
10000734:	10800170 	cmpltui	r2,r2,5
10000738:	103fee1e 	bne	r2,zero,100006f4 <__alt_data_end+0xf80006f4>
1000073c:	00000106 	br	10000744 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10000740:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10000744:	d0a6cd8b 	ldhu	r2,-25802(gp)
10000748:	e0fff80b 	ldhu	r3,-32(fp)
1000074c:	1884703a 	and	r2,r3,r2
10000750:	10bfffcc 	andi	r2,r2,65535
10000754:	1000261e 	bne	r2,zero,100007f0 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000758:	01040074 	movhi	r4,4097
1000075c:	21071604 	addi	r4,r4,7256
10000760:	00025d80 	call	100025d8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000764:	01040074 	movhi	r4,4097
10000768:	21072004 	addi	r4,r4,7296
1000076c:	00025d80 	call	100025d8 <puts>
			while (!(usb_ctl_val & no_device))
10000770:	00000d06 	br	100007a8 <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000774:	d0a6cd0b 	ldhu	r2,-25804(gp)
10000778:	10bfffcc 	andi	r2,r2,65535
1000077c:	1009883a 	mov	r4,r2
10000780:	00013880 	call	10001388 <UsbRead>
10000784:	e0bff80d 	sth	r2,-32(fp)
				if(usb_ctl_val & no_device)
10000788:	d0a6cd8b 	ldhu	r2,-25802(gp)
1000078c:	e0fff80b 	ldhu	r3,-32(fp)
10000790:	1884703a 	and	r2,r3,r2
10000794:	10bfffcc 	andi	r2,r2,65535
10000798:	10000126 	beq	r2,zero,100007a0 <main+0x388>
					goto USB_HOT_PLUG;
1000079c:	003f2906 	br	10000444 <__alt_data_end+0xf8000444>

				usleep(2000);
100007a0:	0101f404 	movi	r4,2000
100007a4:	000fc440 	call	1000fc44 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100007a8:	d0a6cd8b 	ldhu	r2,-25802(gp)
100007ac:	e0fff80b 	ldhu	r3,-32(fp)
100007b0:	1884703a 	and	r2,r3,r2
100007b4:	10bfffcc 	andi	r2,r2,65535
100007b8:	103fee26 	beq	r2,zero,10000774 <__alt_data_end+0xf8000774>
100007bc:	00000c06 	br	100007f0 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100007c0:	e0fff80b 	ldhu	r3,-32(fp)
100007c4:	e0bffb0b 	ldhu	r2,-20(fp)
100007c8:	1884703a 	and	r2,r3,r2
100007cc:	10bfffcc 	andi	r2,r2,65535
100007d0:	10000426 	beq	r2,zero,100007e4 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
100007d4:	01040074 	movhi	r4,4097
100007d8:	21072c04 	addi	r4,r4,7344
100007dc:	00025d80 	call	100025d8 <puts>
100007e0:	00000306 	br	100007f0 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100007e4:	01040074 	movhi	r4,4097
100007e8:	21073304 	addi	r4,r4,7372
100007ec:	00025d80 	call	100025d8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100007f0:	00014880 	call	10001488 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007f4:	00000306 	br	10000804 <main+0x3ec>
	{
		UsbSetAddress();
100007f8:	00014880 	call	10001488 <UsbSetAddress>
		usleep(10*1000);
100007fc:	0109c404 	movi	r4,10000
10000800:	000fc440 	call	1000fc44 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000804:	010000c4 	movi	r4,3
10000808:	00003640 	call	10000364 <IO_read>
1000080c:	10bfffcc 	andi	r2,r2,65535
10000810:	1080040c 	andi	r2,r2,16
10000814:	103ff826 	beq	r2,zero,100007f8 <__alt_data_end+0xf80007f8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000818:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
1000081c:	01414184 	movi	r5,1286
10000820:	01000084 	movi	r4,2
10000824:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000828:	0009883a 	mov	r4,zero
1000082c:	00003640 	call	10000364 <IO_read>
10000830:	10bfffcc 	andi	r2,r2,65535
10000834:	100b883a 	mov	r5,r2
10000838:	01040074 	movhi	r4,4097
1000083c:	21073a04 	addi	r4,r4,7400
10000840:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000844:	01414204 	movi	r5,1288
10000848:	01000084 	movi	r4,2
1000084c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000850:	0009883a 	mov	r4,zero
10000854:	00003640 	call	10000364 <IO_read>
10000858:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
1000085c:	e0bff80b 	ldhu	r2,-32(fp)
10000860:	100b883a 	mov	r5,r2
10000864:	01040074 	movhi	r4,4097
10000868:	21074504 	addi	r4,r4,7444
1000086c:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000870:	e0bff80b 	ldhu	r2,-32(fp)
10000874:	108000e0 	cmpeqi	r2,r2,3
10000878:	1000031e 	bne	r2,zero,10000888 <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000087c:	00023ac0 	call	100023ac <UsbGetRetryCnt>
10000880:	e0bff80d 	sth	r2,-32(fp)

		goto USB_HOT_PLUG;
10000884:	003eef06 	br	10000444 <__alt_data_end+0xf8000444>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000888:	01040074 	movhi	r4,4097
1000088c:	21075104 	addi	r4,r4,7492
10000890:	00025d80 	call	100025d8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000894:	00015880 	call	10001588 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000898:	00000306 	br	100008a8 <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
1000089c:	00015880 	call	10001588 <UsbGetDeviceDesc1>
		usleep(10*1000);
100008a0:	0109c404 	movi	r4,10000
100008a4:	000fc440 	call	1000fc44 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008a8:	010000c4 	movi	r4,3
100008ac:	00003640 	call	10000364 <IO_read>
100008b0:	10bfffcc 	andi	r2,r2,65535
100008b4:	1080040c 	andi	r2,r2,16
100008b8:	103ff826 	beq	r2,zero,1000089c <__alt_data_end+0xf800089c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100008bc:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100008c0:	01414184 	movi	r5,1286
100008c4:	01000084 	movi	r4,2
100008c8:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100008cc:	0009883a 	mov	r4,zero
100008d0:	00003640 	call	10000364 <IO_read>
100008d4:	10bfffcc 	andi	r2,r2,65535
100008d8:	100b883a 	mov	r5,r2
100008dc:	01040074 	movhi	r4,4097
100008e0:	21076004 	addi	r4,r4,7552
100008e4:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508);
100008e8:	01414204 	movi	r5,1288
100008ec:	01000084 	movi	r4,2
100008f0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008f4:	0009883a 	mov	r4,zero
100008f8:	00003640 	call	10000364 <IO_read>
100008fc:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000900:	e0bff80b 	ldhu	r2,-32(fp)
10000904:	100b883a 	mov	r5,r2
10000908:	01040074 	movhi	r4,4097
1000090c:	21076b04 	addi	r4,r4,7596
10000910:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03)
10000914:	e0bff80b 	ldhu	r2,-32(fp)
10000918:	108000e0 	cmpeqi	r2,r2,3
1000091c:	1000061e 	bne	r2,zero,10000938 <main+0x520>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000920:	00023ac0 	call	100023ac <UsbGetRetryCnt>
10000924:	e0bff80d 	sth	r2,-32(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000928:	01040074 	movhi	r4,4097
1000092c:	21077704 	addi	r4,r4,7644
10000930:	00025d80 	call	100025d8 <puts>
		goto USB_HOT_PLUG;
10000934:	003ec306 	br	10000444 <__alt_data_end+0xf8000444>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000938:	01040074 	movhi	r4,4097
1000093c:	21078004 	addi	r4,r4,7680
10000940:	00025d80 	call	100025d8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10000944:	00016d00 	call	100016d0 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000948:	00000306 	br	10000958 <main+0x540>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
1000094c:	00016d00 	call	100016d0 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000950:	0109c404 	movi	r4,10000
10000954:	000fc440 	call	1000fc44 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000958:	010000c4 	movi	r4,3
1000095c:	00003640 	call	10000364 <IO_read>
10000960:	10bfffcc 	andi	r2,r2,65535
10000964:	1080040c 	andi	r2,r2,16
10000968:	103ff826 	beq	r2,zero,1000094c <__alt_data_end+0xf800094c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000096c:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000970:	01414184 	movi	r5,1286
10000974:	01000084 	movi	r4,2
10000978:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000097c:	0009883a 	mov	r4,zero
10000980:	00003640 	call	10000364 <IO_read>
10000984:	10bfffcc 	andi	r2,r2,65535
10000988:	100b883a 	mov	r5,r2
1000098c:	01040074 	movhi	r4,4097
10000990:	21076004 	addi	r4,r4,7552
10000994:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000998:	01414204 	movi	r5,1288
1000099c:	01000084 	movi	r4,2
100009a0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009a4:	0009883a 	mov	r4,zero
100009a8:	00003640 	call	10000364 <IO_read>
100009ac:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100009b0:	e0bff80b 	ldhu	r2,-32(fp)
100009b4:	100b883a 	mov	r5,r2
100009b8:	01040074 	movhi	r4,4097
100009bc:	21076b04 	addi	r4,r4,7596
100009c0:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03)
100009c4:	e0bff80b 	ldhu	r2,-32(fp)
100009c8:	108000e0 	cmpeqi	r2,r2,3
100009cc:	1000061e 	bne	r2,zero,100009e8 <main+0x5d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
100009d0:	00023ac0 	call	100023ac <UsbGetRetryCnt>
100009d4:	e0bff80d 	sth	r2,-32(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
100009d8:	01040074 	movhi	r4,4097
100009dc:	21077704 	addi	r4,r4,7644
100009e0:	00025d80 	call	100025d8 <puts>
		goto USB_HOT_PLUG;
100009e4:	003e9706 	br	10000444 <__alt_data_end+0xf8000444>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100009e8:	01040074 	movhi	r4,4097
100009ec:	21079404 	addi	r4,r4,7760
100009f0:	00025d80 	call	100025d8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100009f4:	00018a80 	call	100018a8 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009f8:	00000306 	br	10000a08 <main+0x5f0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100009fc:	00018a80 	call	100018a8 <UsbGetConfigDesc1>
		usleep(10*1000);
10000a00:	0109c404 	movi	r4,10000
10000a04:	000fc440 	call	1000fc44 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a08:	010000c4 	movi	r4,3
10000a0c:	00003640 	call	10000364 <IO_read>
10000a10:	10bfffcc 	andi	r2,r2,65535
10000a14:	1080040c 	andi	r2,r2,16
10000a18:	103ff826 	beq	r2,zero,100009fc <__alt_data_end+0xf80009fc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a1c:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a20:	01414184 	movi	r5,1286
10000a24:	01000084 	movi	r4,2
10000a28:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a2c:	0009883a 	mov	r4,zero
10000a30:	00003640 	call	10000364 <IO_read>
10000a34:	10bfffcc 	andi	r2,r2,65535
10000a38:	100b883a 	mov	r5,r2
10000a3c:	01040074 	movhi	r4,4097
10000a40:	2107a604 	addi	r4,r4,7832
10000a44:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000a48:	01414204 	movi	r5,1288
10000a4c:	01000084 	movi	r4,2
10000a50:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a54:	0009883a 	mov	r4,zero
10000a58:	00003640 	call	10000364 <IO_read>
10000a5c:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000a60:	e0bff80b 	ldhu	r2,-32(fp)
10000a64:	100b883a 	mov	r5,r2
10000a68:	01040074 	movhi	r4,4097
10000a6c:	2107b104 	addi	r4,r4,7876
10000a70:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03)
10000a74:	e0bff80b 	ldhu	r2,-32(fp)
10000a78:	108000e0 	cmpeqi	r2,r2,3
10000a7c:	1000061e 	bne	r2,zero,10000a98 <main+0x680>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a80:	00023ac0 	call	100023ac <UsbGetRetryCnt>
10000a84:	e0bff80d 	sth	r2,-32(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000a88:	01040074 	movhi	r4,4097
10000a8c:	21077704 	addi	r4,r4,7644
10000a90:	00025d80 	call	100025d8 <puts>
		goto USB_HOT_PLUG;
10000a94:	003e6b06 	br	10000444 <__alt_data_end+0xf8000444>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000a98:	01040074 	movhi	r4,4097
10000a9c:	2107bd04 	addi	r4,r4,7924
10000aa0:	00025d80 	call	100025d8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000aa4:	0001a380 	call	10001a38 <UsbGetConfigDesc2>

	usleep(100*1000);
10000aa8:	010000b4 	movhi	r4,2
10000aac:	2121a804 	addi	r4,r4,-31072
10000ab0:	000fc440 	call	1000fc44 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ab4:	00000306 	br	10000ac4 <main+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000ab8:	0001a380 	call	10001a38 <UsbGetConfigDesc2>
		usleep(10*1000);
10000abc:	0109c404 	movi	r4,10000
10000ac0:	000fc440 	call	1000fc44 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ac4:	010000c4 	movi	r4,3
10000ac8:	00003640 	call	10000364 <IO_read>
10000acc:	10bfffcc 	andi	r2,r2,65535
10000ad0:	1080040c 	andi	r2,r2,16
10000ad4:	103ff826 	beq	r2,zero,10000ab8 <__alt_data_end+0xf8000ab8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ad8:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000adc:	01414184 	movi	r5,1286
10000ae0:	01000084 	movi	r4,2
10000ae4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ae8:	0009883a 	mov	r4,zero
10000aec:	00003640 	call	10000364 <IO_read>
10000af0:	10bfffcc 	andi	r2,r2,65535
10000af4:	100b883a 	mov	r5,r2
10000af8:	01040074 	movhi	r4,4097
10000afc:	2107d004 	addi	r4,r4,8000
10000b00:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000b04:	01414204 	movi	r5,1288
10000b08:	01000084 	movi	r4,2
10000b0c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b10:	0009883a 	mov	r4,zero
10000b14:	00003640 	call	10000364 <IO_read>
10000b18:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000b1c:	e0bff80b 	ldhu	r2,-32(fp)
10000b20:	100b883a 	mov	r5,r2
10000b24:	01040074 	movhi	r4,4097
10000b28:	2107db04 	addi	r4,r4,8044
10000b2c:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03)
10000b30:	e0bff80b 	ldhu	r2,-32(fp)
10000b34:	108000e0 	cmpeqi	r2,r2,3
10000b38:	1000061e 	bne	r2,zero,10000b54 <main+0x73c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b3c:	00023ac0 	call	100023ac <UsbGetRetryCnt>
10000b40:	e0bff80d 	sth	r2,-32(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000b44:	01040074 	movhi	r4,4097
10000b48:	21077704 	addi	r4,r4,7644
10000b4c:	00025d80 	call	100025d8 <puts>
		goto USB_HOT_PLUG;
10000b50:	003e3c06 	br	10000444 <__alt_data_end+0xf8000444>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000b54:	01040074 	movhi	r4,4097
10000b58:	2107e704 	addi	r4,r4,8092
10000b5c:	00025d80 	call	100025d8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000b60:	01415b04 	movi	r5,1388
10000b64:	01000084 	movi	r4,2
10000b68:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
10000b6c:	0009883a 	mov	r4,zero
10000b70:	00003640 	call	10000364 <IO_read>
10000b74:	e0bffd8d 	sth	r2,-10(fp)
	code = code & 0x003;
10000b78:	e0bffd8b 	ldhu	r2,-10(fp)
10000b7c:	108000cc 	andi	r2,r2,3
10000b80:	e0bffd8d 	sth	r2,-10(fp)
	printf("\ncode = %x\n", code);
10000b84:	e0bffd8b 	ldhu	r2,-10(fp)
10000b88:	100b883a 	mov	r5,r2
10000b8c:	01040074 	movhi	r4,4097
10000b90:	2107fa04 	addi	r4,r4,8168
10000b94:	00024dc0 	call	100024dc <printf>

	if (code == 0x01)
10000b98:	e0bffd8b 	ldhu	r2,-10(fp)
10000b9c:	10800058 	cmpnei	r2,r2,1
10000ba0:	1000041e 	bne	r2,zero,10000bb4 <main+0x79c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000ba4:	01040074 	movhi	r4,4097
10000ba8:	2107fd04 	addi	r4,r4,8180
10000bac:	00025d80 	call	100025d8 <puts>
10000bb0:	00000306 	br	10000bc0 <main+0x7a8>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000bb4:	01040074 	movhi	r4,4097
10000bb8:	21080c04 	addi	r4,r4,8240
10000bbc:	00025d80 	call	100025d8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000bc0:	01415d84 	movi	r5,1398
10000bc4:	01000084 	movi	r4,2
10000bc8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000bcc:	0141cfc4 	movi	r5,1855
10000bd0:	0009883a 	mov	r4,zero
10000bd4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000bd8:	01604154 	movui	r5,33029
10000bdc:	0009883a 	mov	r4,zero
10000be0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000be4:	014000c4 	movi	r5,3
10000be8:	0009883a 	mov	r4,zero
10000bec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000bf0:	01400204 	movi	r5,8
10000bf4:	0009883a 	mov	r4,zero
10000bf8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000bfc:	016b0294 	movui	r5,44042
10000c00:	0009883a 	mov	r4,zero
10000c04:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000c08:	01415d84 	movi	r5,1398
10000c0c:	01006c04 	movi	r4,432
10000c10:	00013300 	call	10001330 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000c14:	01415f04 	movi	r5,1404
10000c18:	01000084 	movi	r4,2
10000c1c:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000c20:	0009883a 	mov	r4,zero
10000c24:	00003640 	call	10000364 <IO_read>
10000c28:	e0bffe05 	stb	r2,-8(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000c2c:	e0bffe03 	ldbu	r2,-8(fp)
10000c30:	100b883a 	mov	r5,r2
10000c34:	01040074 	movhi	r4,4097
10000c38:	21081504 	addi	r4,r4,8276
10000c3c:	00024dc0 	call	100024dc <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000c40:	0001ca00 	call	10001ca0 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c44:	00000306 	br	10000c54 <main+0x83c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000c48:	0001ca00 	call	10001ca0 <UsbSetConfig>
		usleep(10*1000);
10000c4c:	0109c404 	movi	r4,10000
10000c50:	000fc440 	call	1000fc44 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c54:	010000c4 	movi	r4,3
10000c58:	00003640 	call	10000364 <IO_read>
10000c5c:	10bfffcc 	andi	r2,r2,65535
10000c60:	1080040c 	andi	r2,r2,16
10000c64:	103ff826 	beq	r2,zero,10000c48 <__alt_data_end+0xf8000c48>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c68:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c6c:	01414184 	movi	r5,1286
10000c70:	01000084 	movi	r4,2
10000c74:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c78:	0009883a 	mov	r4,zero
10000c7c:	00003640 	call	10000364 <IO_read>
10000c80:	10bfffcc 	andi	r2,r2,65535
10000c84:	100b883a 	mov	r5,r2
10000c88:	01040074 	movhi	r4,4097
10000c8c:	21081f04 	addi	r4,r4,8316
10000c90:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000c94:	01414204 	movi	r5,1288
10000c98:	01000084 	movi	r4,2
10000c9c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ca0:	0009883a 	mov	r4,zero
10000ca4:	00003640 	call	10000364 <IO_read>
10000ca8:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000cac:	e0bff80b 	ldhu	r2,-32(fp)
10000cb0:	100b883a 	mov	r5,r2
10000cb4:	01040074 	movhi	r4,4097
10000cb8:	21082a04 	addi	r4,r4,8360
10000cbc:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03)
10000cc0:	e0bff80b 	ldhu	r2,-32(fp)
10000cc4:	108000e0 	cmpeqi	r2,r2,3
10000cc8:	1000061e 	bne	r2,zero,10000ce4 <main+0x8cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ccc:	00023ac0 	call	100023ac <UsbGetRetryCnt>
10000cd0:	e0bff80d 	sth	r2,-32(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000cd4:	01040074 	movhi	r4,4097
10000cd8:	21077704 	addi	r4,r4,7644
10000cdc:	00025d80 	call	100025d8 <puts>
		goto USB_HOT_PLUG;
10000ce0:	003dd806 	br	10000444 <__alt_data_end+0xf8000444>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000ce4:	01040074 	movhi	r4,4097
10000ce8:	21083604 	addi	r4,r4,8408
10000cec:	00025d80 	call	100025d8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000cf0:	0001da00 	call	10001da0 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cf4:	00000306 	br	10000d04 <main+0x8ec>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000cf8:	0001da00 	call	10001da0 <UsbClassRequest>
		usleep(10*1000);
10000cfc:	0109c404 	movi	r4,10000
10000d00:	000fc440 	call	1000fc44 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d04:	010000c4 	movi	r4,3
10000d08:	00003640 	call	10000364 <IO_read>
10000d0c:	10bfffcc 	andi	r2,r2,65535
10000d10:	1080040c 	andi	r2,r2,16
10000d14:	103ff826 	beq	r2,zero,10000cf8 <__alt_data_end+0xf8000cf8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d18:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d1c:	01414184 	movi	r5,1286
10000d20:	01000084 	movi	r4,2
10000d24:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d28:	0009883a 	mov	r4,zero
10000d2c:	00003640 	call	10000364 <IO_read>
10000d30:	10bfffcc 	andi	r2,r2,65535
10000d34:	100b883a 	mov	r5,r2
10000d38:	01040074 	movhi	r4,4097
10000d3c:	21084804 	addi	r4,r4,8480
10000d40:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000d44:	01414204 	movi	r5,1288
10000d48:	01000084 	movi	r4,2
10000d4c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d50:	0009883a 	mov	r4,zero
10000d54:	00003640 	call	10000364 <IO_read>
10000d58:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d5c:	e0bff80b 	ldhu	r2,-32(fp)
10000d60:	100b883a 	mov	r5,r2
10000d64:	01040074 	movhi	r4,4097
10000d68:	21085304 	addi	r4,r4,8524
10000d6c:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03)
10000d70:	e0bff80b 	ldhu	r2,-32(fp)
10000d74:	108000e0 	cmpeqi	r2,r2,3
10000d78:	1000061e 	bne	r2,zero,10000d94 <main+0x97c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d7c:	00023ac0 	call	100023ac <UsbGetRetryCnt>
10000d80:	e0bff80d 	sth	r2,-32(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000d84:	01040074 	movhi	r4,4097
10000d88:	21077704 	addi	r4,r4,7644
10000d8c:	00025d80 	call	100025d8 <puts>
		goto USB_HOT_PLUG;
10000d90:	003dac06 	br	10000444 <__alt_data_end+0xf8000444>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000d94:	01040074 	movhi	r4,4097
10000d98:	21085f04 	addi	r4,r4,8572
10000d9c:	00025d80 	call	100025d8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000da0:	0001ea00 	call	10001ea0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000da4:	00000306 	br	10000db4 <main+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000da8:	0001ea00 	call	10001ea0 <UsbGetHidDesc>
		usleep(10*1000);
10000dac:	0109c404 	movi	r4,10000
10000db0:	000fc440 	call	1000fc44 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000db4:	010000c4 	movi	r4,3
10000db8:	00003640 	call	10000364 <IO_read>
10000dbc:	10bfffcc 	andi	r2,r2,65535
10000dc0:	1080040c 	andi	r2,r2,16
10000dc4:	103ff826 	beq	r2,zero,10000da8 <__alt_data_end+0xf8000da8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000dc8:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000dcc:	01414184 	movi	r5,1286
10000dd0:	01000084 	movi	r4,2
10000dd4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000dd8:	0009883a 	mov	r4,zero
10000ddc:	00003640 	call	10000364 <IO_read>
10000de0:	10bfffcc 	andi	r2,r2,65535
10000de4:	100b883a 	mov	r5,r2
10000de8:	01040074 	movhi	r4,4097
10000dec:	21084804 	addi	r4,r4,8480
10000df0:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000df4:	01414204 	movi	r5,1288
10000df8:	01000084 	movi	r4,2
10000dfc:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e00:	0009883a 	mov	r4,zero
10000e04:	00003640 	call	10000364 <IO_read>
10000e08:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000e0c:	e0bff80b 	ldhu	r2,-32(fp)
10000e10:	100b883a 	mov	r5,r2
10000e14:	01040074 	movhi	r4,4097
10000e18:	21085304 	addi	r4,r4,8524
10000e1c:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03)
10000e20:	e0bff80b 	ldhu	r2,-32(fp)
10000e24:	108000e0 	cmpeqi	r2,r2,3
10000e28:	1000061e 	bne	r2,zero,10000e44 <main+0xa2c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e2c:	00023ac0 	call	100023ac <UsbGetRetryCnt>
10000e30:	e0bff80d 	sth	r2,-32(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000e34:	01040074 	movhi	r4,4097
10000e38:	21077704 	addi	r4,r4,7644
10000e3c:	00025d80 	call	100025d8 <puts>
		goto USB_HOT_PLUG;
10000e40:	003d8006 	br	10000444 <__alt_data_end+0xf8000444>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000e44:	01040074 	movhi	r4,4097
10000e48:	21087104 	addi	r4,r4,8644
10000e4c:	00025d80 	call	100025d8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000e50:	0001fe80 	call	10001fe8 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e54:	00000306 	br	10000e64 <main+0xa4c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000e58:	0001fe80 	call	10001fe8 <UsbGetReportDesc>
		usleep(10*1000);
10000e5c:	0109c404 	movi	r4,10000
10000e60:	000fc440 	call	1000fc44 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e64:	010000c4 	movi	r4,3
10000e68:	00003640 	call	10000364 <IO_read>
10000e6c:	10bfffcc 	andi	r2,r2,65535
10000e70:	1080040c 	andi	r2,r2,16
10000e74:	103ff826 	beq	r2,zero,10000e58 <__alt_data_end+0xf8000e58>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000e78:	00023280 	call	10002328 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000e7c:	01414184 	movi	r5,1286
10000e80:	01000084 	movi	r4,2
10000e84:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000e88:	0009883a 	mov	r4,zero
10000e8c:	00003640 	call	10000364 <IO_read>
10000e90:	10bfffcc 	andi	r2,r2,65535
10000e94:	100b883a 	mov	r5,r2
10000e98:	01040074 	movhi	r4,4097
10000e9c:	21088504 	addi	r4,r4,8724
10000ea0:	00024dc0 	call	100024dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000ea4:	01414204 	movi	r5,1288
10000ea8:	01000084 	movi	r4,2
10000eac:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000eb0:	0009883a 	mov	r4,zero
10000eb4:	00003640 	call	10000364 <IO_read>
10000eb8:	e0bff80d 	sth	r2,-32(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000ebc:	e0bff80b 	ldhu	r2,-32(fp)
10000ec0:	100b883a 	mov	r5,r2
10000ec4:	01040074 	movhi	r4,4097
10000ec8:	21089104 	addi	r4,r4,8772
10000ecc:	00024dc0 	call	100024dc <printf>
	while (usb_ctl_val != 0x03)
10000ed0:	e0bff80b 	ldhu	r2,-32(fp)
10000ed4:	108000e0 	cmpeqi	r2,r2,3
10000ed8:	1000061e 	bne	r2,zero,10000ef4 <main+0xadc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000edc:	00023ac0 	call	100023ac <UsbGetRetryCnt>
10000ee0:	e0bff80d 	sth	r2,-32(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000ee4:	01040074 	movhi	r4,4097
10000ee8:	21077704 	addi	r4,r4,7644
10000eec:	00025d80 	call	100025d8 <puts>
		goto USB_HOT_PLUG;
10000ef0:	003d5406 	br	10000444 <__alt_data_end+0xf8000444>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000ef4:	01040074 	movhi	r4,4097
10000ef8:	21089d04 	addi	r4,r4,8820
10000efc:	00025d80 	call	100025d8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000f00:	0109c404 	movi	r4,10000
10000f04:	000fc440 	call	1000fc44 <usleep>
	while(1)
	{
		toggle++;
10000f08:	e0bff883 	ldbu	r2,-30(fp)
10000f0c:	10800044 	addi	r2,r2,1
10000f10:	e0bff885 	stb	r2,-30(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000f14:	01414004 	movi	r5,1280
10000f18:	01000084 	movi	r4,2
10000f1c:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000f20:	01414704 	movi	r5,1308
10000f24:	0009883a 	mov	r4,zero
10000f28:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f2c:	e0bffe03 	ldbu	r2,-8(fp)
10000f30:	108003cc 	andi	r2,r2,15
10000f34:	100b883a 	mov	r5,r2
10000f38:	0009883a 	mov	r4,zero
10000f3c:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f40:	0140a444 	movi	r5,657
10000f44:	0009883a 	mov	r4,zero
10000f48:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
10000f4c:	e0bff883 	ldbu	r2,-30(fp)
10000f50:	1080004c 	andi	r2,r2,1
10000f54:	10803fcc 	andi	r2,r2,255
10000f58:	10000426 	beq	r2,zero,10000f6c <main+0xb54>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000f5c:	01400044 	movi	r5,1
10000f60:	0009883a 	mov	r4,zero
10000f64:	00002f40 	call	100002f4 <IO_write>
10000f68:	00000306 	br	10000f78 <main+0xb60>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f6c:	01401044 	movi	r5,65
10000f70:	0009883a 	mov	r4,zero
10000f74:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000f78:	014004c4 	movi	r5,19
10000f7c:	0009883a 	mov	r4,zero
10000f80:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000f84:	000b883a 	mov	r5,zero
10000f88:	0009883a 	mov	r4,zero
10000f8c:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f90:	01414004 	movi	r5,1280
10000f94:	01006c04 	movi	r4,432
10000f98:	00013300 	call	10001330 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f9c:	00002406 	br	10001030 <main+0xc18>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000fa0:	01414004 	movi	r5,1280
10000fa4:	01000084 	movi	r4,2
10000fa8:	00002f40 	call	100002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000fac:	01414704 	movi	r5,1308
10000fb0:	0009883a 	mov	r4,zero
10000fb4:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000fb8:	e0bffe03 	ldbu	r2,-8(fp)
10000fbc:	108003cc 	andi	r2,r2,15
10000fc0:	100b883a 	mov	r5,r2
10000fc4:	0009883a 	mov	r4,zero
10000fc8:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000fcc:	0140a444 	movi	r5,657
10000fd0:	0009883a 	mov	r4,zero
10000fd4:	00002f40 	call	100002f4 <IO_write>
			if(toggle%2)
10000fd8:	e0bff883 	ldbu	r2,-30(fp)
10000fdc:	1080004c 	andi	r2,r2,1
10000fe0:	10803fcc 	andi	r2,r2,255
10000fe4:	10000426 	beq	r2,zero,10000ff8 <main+0xbe0>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000fe8:	01400044 	movi	r5,1
10000fec:	0009883a 	mov	r4,zero
10000ff0:	00002f40 	call	100002f4 <IO_write>
10000ff4:	00000306 	br	10001004 <main+0xbec>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000ff8:	01401044 	movi	r5,65
10000ffc:	0009883a 	mov	r4,zero
10001000:	00002f40 	call	100002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001004:	014004c4 	movi	r5,19
10001008:	0009883a 	mov	r4,zero
1000100c:	00002f40 	call	100002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001010:	000b883a 	mov	r5,zero
10001014:	0009883a 	mov	r4,zero
10001018:	00002f40 	call	100002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000101c:	01414004 	movi	r5,1280
10001020:	01006c04 	movi	r4,432
10001024:	00013300 	call	10001330 <UsbWrite>
			usleep(10*1000);
10001028:	0109c404 	movi	r4,10000
1000102c:	000fc440 	call	1000fc44 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001030:	010000c4 	movi	r4,3
10001034:	00003640 	call	10000364 <IO_read>
10001038:	10bfffcc 	andi	r2,r2,65535
1000103c:	1080040c 	andi	r2,r2,16
10001040:	103fd726 	beq	r2,zero,10000fa0 <__alt_data_end+0xf8000fa0>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10001044:	00023280 	call	10002328 <UsbWaitTDListDone>
10001048:	e0bff80d 	sth	r2,-32(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
1000104c:	01014784 	movi	r4,1310
10001050:	00013880 	call	10001388 <UsbRead>
10001054:	10bfffcc 	andi	r2,r2,65535
10001058:	e0bffc15 	stw	r2,-16(fp)
		// printf("\nfirst two keycode values are %04x\n",keycode);

		keycode <<= 16;
1000105c:	e0bffc17 	ldw	r2,-16(fp)
10001060:	1004943a 	slli	r2,r2,16
10001064:	e0bffc15 	stw	r2,-16(fp)
		keycode |= UsbRead(0x0520);
10001068:	01014804 	movi	r4,1312
1000106c:	00013880 	call	10001388 <UsbRead>
10001070:	10bfffcc 	andi	r2,r2,65535
10001074:	e0fffc17 	ldw	r3,-16(fp)
10001078:	1884b03a 	or	r2,r3,r2
1000107c:	e0bffc15 	stw	r2,-16(fp)
		printf("\nfirdst four keycode values are %x\n",keycode);
10001080:	e17ffc17 	ldw	r5,-16(fp)
10001084:	01040074 	movhi	r4,4097
10001088:	2108b104 	addi	r4,r4,8900
1000108c:	00024dc0 	call	100024dc <printf>
		// *keycode_base = keycode & 0xff;

		/*
			Directly Calculated the movement keys press status and send through keycode
		*/
		alt_u8 presses[4] = {(keycode>>16)&0xff, (keycode>>24)&0xff, (keycode)&0xff, (keycode>>8)&0xff};
10001090:	e0bffc17 	ldw	r2,-16(fp)
10001094:	1005d43a 	srai	r2,r2,16
10001098:	e0bffe45 	stb	r2,-7(fp)
1000109c:	e0bffc17 	ldw	r2,-16(fp)
100010a0:	1004d63a 	srli	r2,r2,24
100010a4:	e0bffe85 	stb	r2,-6(fp)
100010a8:	e0bffc17 	ldw	r2,-16(fp)
100010ac:	e0bffec5 	stb	r2,-5(fp)
100010b0:	e0bffc17 	ldw	r2,-16(fp)
100010b4:	1005d23a 	srai	r2,r2,8
100010b8:	e0bfff05 	stb	r2,-4(fp)
		alt_u8 mask = 0; int i;
100010bc:	e03ff905 	stb	zero,-28(fp)
		for(i = 0; i < 4; i++) {
100010c0:	e03ffa15 	stw	zero,-24(fp)
100010c4:	00004306 	br	100011d4 <main+0xdbc>
			switch (presses[i])
100010c8:	e0fffe44 	addi	r3,fp,-7
100010cc:	e0bffa17 	ldw	r2,-24(fp)
100010d0:	1885883a 	add	r2,r3,r2
100010d4:	10800003 	ldbu	r2,0(r2)
100010d8:	10803fcc 	andi	r2,r2,255
100010dc:	10c006a0 	cmpeqi	r3,r2,26
100010e0:	18000e1e 	bne	r3,zero,1000111c <main+0xd04>
100010e4:	10c006c8 	cmpgei	r3,r2,27
100010e8:	1800051e 	bne	r3,zero,10001100 <main+0xce8>
100010ec:	10c00120 	cmpeqi	r3,r2,4
100010f0:	18000e1e 	bne	r3,zero,1000112c <main+0xd14>
100010f4:	108001e0 	cmpeqi	r2,r2,7
100010f8:	1000131e 	bne	r2,zero,10001148 <main+0xd30>
			case 0x4f:
				if(!(mask&0x02)) mask |= 0x01;
				break;

			default:
				break;
100010fc:	00003206 	br	100011c8 <main+0xdb0>
			Directly Calculated the movement keys press status and send through keycode
		*/
		alt_u8 presses[4] = {(keycode>>16)&0xff, (keycode>>24)&0xff, (keycode)&0xff, (keycode>>8)&0xff};
		alt_u8 mask = 0; int i;
		for(i = 0; i < 4; i++) {
			switch (presses[i])
10001100:	10c01420 	cmpeqi	r3,r2,80
10001104:	18001b1e 	bne	r3,zero,10001174 <main+0xd5c>
10001108:	10c014a0 	cmpeqi	r3,r2,82
1000110c:	1800151e 	bne	r3,zero,10001164 <main+0xd4c>
10001110:	108013e0 	cmpeqi	r2,r2,79
10001114:	10001e1e 	bne	r2,zero,10001190 <main+0xd78>
			case 0x4f:
				if(!(mask&0x02)) mask |= 0x01;
				break;

			default:
				break;
10001118:	00002b06 	br	100011c8 <main+0xdb0>
		for(i = 0; i < 4; i++) {
			switch (presses[i])
			{
			//Fireboy Region
			case 0x1a:
				mask |= 0x40;
1000111c:	e0bff903 	ldbu	r2,-28(fp)
10001120:	10801014 	ori	r2,r2,64
10001124:	e0bff905 	stb	r2,-28(fp)
				break;
10001128:	00002706 	br	100011c8 <main+0xdb0>
			case 0x04:
				if(!(mask&0x10)) mask |= 0x20; //check right flag first for preceding purpose
1000112c:	e0bff903 	ldbu	r2,-28(fp)
10001130:	1080040c 	andi	r2,r2,16
10001134:	10001d1e 	bne	r2,zero,100011ac <main+0xd94>
10001138:	e0bff903 	ldbu	r2,-28(fp)
1000113c:	10800814 	ori	r2,r2,32
10001140:	e0bff905 	stb	r2,-28(fp)
				break;
10001144:	00001906 	br	100011ac <main+0xd94>
			case 0x07:
				if(!(mask&0x20)) mask |= 0x10;
10001148:	e0bff903 	ldbu	r2,-28(fp)
1000114c:	1080080c 	andi	r2,r2,32
10001150:	1000181e 	bne	r2,zero,100011b4 <main+0xd9c>
10001154:	e0bff903 	ldbu	r2,-28(fp)
10001158:	10800414 	ori	r2,r2,16
1000115c:	e0bff905 	stb	r2,-28(fp)
				break;
10001160:	00001406 	br	100011b4 <main+0xd9c>

			//Icegirl Region
			case 0x52:
				mask |= 0x04;
10001164:	e0bff903 	ldbu	r2,-28(fp)
10001168:	10800114 	ori	r2,r2,4
1000116c:	e0bff905 	stb	r2,-28(fp)
				break;
10001170:	00001506 	br	100011c8 <main+0xdb0>
			case 0x50:
				if(!(mask&0x01)) mask |= 0x02; //check right flag first for preceding purpose
10001174:	e0bff903 	ldbu	r2,-28(fp)
10001178:	1080004c 	andi	r2,r2,1
1000117c:	10000f1e 	bne	r2,zero,100011bc <main+0xda4>
10001180:	e0bff903 	ldbu	r2,-28(fp)
10001184:	10800094 	ori	r2,r2,2
10001188:	e0bff905 	stb	r2,-28(fp)
				break;
1000118c:	00000b06 	br	100011bc <main+0xda4>
			case 0x4f:
				if(!(mask&0x02)) mask |= 0x01;
10001190:	e0bff903 	ldbu	r2,-28(fp)
10001194:	1080008c 	andi	r2,r2,2
10001198:	10000a1e 	bne	r2,zero,100011c4 <main+0xdac>
1000119c:	e0bff903 	ldbu	r2,-28(fp)
100011a0:	10800054 	ori	r2,r2,1
100011a4:	e0bff905 	stb	r2,-28(fp)
				break;
100011a8:	00000606 	br	100011c4 <main+0xdac>
			case 0x1a:
				mask |= 0x40;
				break;
			case 0x04:
				if(!(mask&0x10)) mask |= 0x20; //check right flag first for preceding purpose
				break;
100011ac:	0001883a 	nop
100011b0:	00000506 	br	100011c8 <main+0xdb0>
			case 0x07:
				if(!(mask&0x20)) mask |= 0x10;
				break;
100011b4:	0001883a 	nop
100011b8:	00000306 	br	100011c8 <main+0xdb0>
			case 0x52:
				mask |= 0x04;
				break;
			case 0x50:
				if(!(mask&0x01)) mask |= 0x02; //check right flag first for preceding purpose
				break;
100011bc:	0001883a 	nop
100011c0:	00000106 	br	100011c8 <main+0xdb0>
			case 0x4f:
				if(!(mask&0x02)) mask |= 0x01;
				break;
100011c4:	0001883a 	nop
		/*
			Directly Calculated the movement keys press status and send through keycode
		*/
		alt_u8 presses[4] = {(keycode>>16)&0xff, (keycode>>24)&0xff, (keycode)&0xff, (keycode>>8)&0xff};
		alt_u8 mask = 0; int i;
		for(i = 0; i < 4; i++) {
100011c8:	e0bffa17 	ldw	r2,-24(fp)
100011cc:	10800044 	addi	r2,r2,1
100011d0:	e0bffa15 	stw	r2,-24(fp)
100011d4:	e0bffa17 	ldw	r2,-24(fp)
100011d8:	10800110 	cmplti	r2,r2,4
100011dc:	103fba1e 	bne	r2,zero,100010c8 <__alt_data_end+0xf80010c8>

			default:
				break;
			}
		}
		*keycode_base = mask;
100011e0:	00802004 	movi	r2,128
100011e4:	e0fff903 	ldbu	r3,-28(fp)
100011e8:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
100011ec:	01003204 	movi	r4,200
100011f0:	000fc440 	call	1000fc44 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100011f4:	d0a6cd0b 	ldhu	r2,-25804(gp)
100011f8:	10bfffcc 	andi	r2,r2,65535
100011fc:	1009883a 	mov	r4,r2
10001200:	00013880 	call	10001388 <UsbRead>
10001204:	e0bff80d 	sth	r2,-32(fp)

		if(!(usb_ctl_val & no_device))
10001208:	d0a6cd8b 	ldhu	r2,-25802(gp)
1000120c:	e0fff80b 	ldhu	r3,-32(fp)
10001210:	1884703a 	and	r2,r3,r2
10001214:	10bfffcc 	andi	r2,r2,65535
10001218:	10003f1e 	bne	r2,zero,10001318 <main+0xf00>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000121c:	e03ff8c5 	stb	zero,-29(fp)
10001220:	00000f06 	br	10001260 <main+0xe48>
			{
				usleep(5*1000);
10001224:	0104e204 	movi	r4,5000
10001228:	000fc440 	call	1000fc44 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
1000122c:	d0a6cd0b 	ldhu	r2,-25804(gp)
10001230:	10bfffcc 	andi	r2,r2,65535
10001234:	1009883a 	mov	r4,r2
10001238:	00013880 	call	10001388 <UsbRead>
1000123c:	e0bff80d 	sth	r2,-32(fp)
				if(usb_ctl_val & no_device) break;
10001240:	d0a6cd8b 	ldhu	r2,-25802(gp)
10001244:	e0fff80b 	ldhu	r3,-32(fp)
10001248:	1884703a 	and	r2,r3,r2
1000124c:	10bfffcc 	andi	r2,r2,65535
10001250:	1000071e 	bne	r2,zero,10001270 <main+0xe58>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001254:	e0bff8c3 	ldbu	r2,-29(fp)
10001258:	10800044 	addi	r2,r2,1
1000125c:	e0bff8c5 	stb	r2,-29(fp)
10001260:	e0bff8c3 	ldbu	r2,-29(fp)
10001264:	108001f0 	cmpltui	r2,r2,7
10001268:	103fee1e 	bne	r2,zero,10001224 <__alt_data_end+0xf8001224>
1000126c:	00000106 	br	10001274 <main+0xe5c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
10001270:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10001274:	d0a6cd8b 	ldhu	r2,-25802(gp)
10001278:	e0fff80b 	ldhu	r3,-32(fp)
1000127c:	1884703a 	and	r2,r3,r2
10001280:	10bfffcc 	andi	r2,r2,65535
10001284:	1000241e 	bne	r2,zero,10001318 <main+0xf00>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001288:	01040074 	movhi	r4,4097
1000128c:	2108ba04 	addi	r4,r4,8936
10001290:	00025d80 	call	100025d8 <puts>
				printf("[INFO]: please insert again!!! \n");
10001294:	01040074 	movhi	r4,4097
10001298:	2108c504 	addi	r4,r4,8980
1000129c:	00025d80 	call	100025d8 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
100012a0:	00001d06 	br	10001318 <main+0xf00>
		{

			usb_ctl_val = UsbRead(ctl_reg);
100012a4:	d0a6cd0b 	ldhu	r2,-25804(gp)
100012a8:	10bfffcc 	andi	r2,r2,65535
100012ac:	1009883a 	mov	r4,r2
100012b0:	00013880 	call	10001388 <UsbRead>
100012b4:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
100012b8:	0104e204 	movi	r4,5000
100012bc:	000fc440 	call	1000fc44 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100012c0:	d0a6cd0b 	ldhu	r2,-25804(gp)
100012c4:	10bfffcc 	andi	r2,r2,65535
100012c8:	1009883a 	mov	r4,r2
100012cc:	00013880 	call	10001388 <UsbRead>
100012d0:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
100012d4:	0104e204 	movi	r4,5000
100012d8:	000fc440 	call	1000fc44 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100012dc:	d0a6cd0b 	ldhu	r2,-25804(gp)
100012e0:	10bfffcc 	andi	r2,r2,65535
100012e4:	1009883a 	mov	r4,r2
100012e8:	00013880 	call	10001388 <UsbRead>
100012ec:	e0bff80d 	sth	r2,-32(fp)
			usleep(5*1000);
100012f0:	0104e204 	movi	r4,5000
100012f4:	000fc440 	call	1000fc44 <usleep>

			if(usb_ctl_val & no_device)
100012f8:	d0a6cd8b 	ldhu	r2,-25802(gp)
100012fc:	e0fff80b 	ldhu	r3,-32(fp)
10001300:	1884703a 	and	r2,r3,r2
10001304:	10bfffcc 	andi	r2,r2,65535
10001308:	10000126 	beq	r2,zero,10001310 <main+0xef8>
1000130c:	003c4d06 	br	10000444 <__alt_data_end+0xf8000444>
				goto USB_HOT_PLUG;

			usleep(200);
10001310:	01003204 	movi	r4,200
10001314:	000fc440 	call	1000fc44 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001318:	d0a6cd8b 	ldhu	r2,-25802(gp)
1000131c:	e0fff80b 	ldhu	r3,-32(fp)
10001320:	1884703a 	and	r2,r3,r2
10001324:	10bfffcc 	andi	r2,r2,65535
10001328:	103fde26 	beq	r2,zero,100012a4 <__alt_data_end+0xf80012a4>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
1000132c:	003ef606 	br	10000f08 <__alt_data_end+0xf8000f08>

10001330 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001330:	defffc04 	addi	sp,sp,-16
10001334:	dfc00315 	stw	ra,12(sp)
10001338:	df000215 	stw	fp,8(sp)
1000133c:	df000204 	addi	fp,sp,8
10001340:	2007883a 	mov	r3,r4
10001344:	2805883a 	mov	r2,r5
10001348:	e0fffe0d 	sth	r3,-8(fp)
1000134c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10001350:	e0bffe0b 	ldhu	r2,-8(fp)
10001354:	100b883a 	mov	r5,r2
10001358:	01000084 	movi	r4,2
1000135c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA, Data);
10001360:	e0bfff0b 	ldhu	r2,-4(fp)
10001364:	100b883a 	mov	r5,r2
10001368:	0009883a 	mov	r4,zero
1000136c:	00002f40 	call	100002f4 <IO_write>
}
10001370:	0001883a 	nop
10001374:	e037883a 	mov	sp,fp
10001378:	dfc00117 	ldw	ra,4(sp)
1000137c:	df000017 	ldw	fp,0(sp)
10001380:	dec00204 	addi	sp,sp,8
10001384:	f800283a 	ret

10001388 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001388:	defffc04 	addi	sp,sp,-16
1000138c:	dfc00315 	stw	ra,12(sp)
10001390:	df000215 	stw	fp,8(sp)
10001394:	df000204 	addi	fp,sp,8
10001398:	2005883a 	mov	r2,r4
1000139c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
100013a0:	e0bfff0b 	ldhu	r2,-4(fp)
100013a4:	100b883a 	mov	r5,r2
100013a8:	01000084 	movi	r4,2
100013ac:	00002f40 	call	100002f4 <IO_write>
	alt_u16 data = IO_read(HPI_DATA);
100013b0:	0009883a 	mov	r4,zero
100013b4:	00003640 	call	10000364 <IO_read>
100013b8:	e0bffe0d 	sth	r2,-8(fp)
	return data;
100013bc:	e0bffe0b 	ldhu	r2,-8(fp)
}
100013c0:	e037883a 	mov	sp,fp
100013c4:	dfc00117 	ldw	ra,4(sp)
100013c8:	df000017 	ldw	fp,0(sp)
100013cc:	dec00204 	addi	sp,sp,8
100013d0:	f800283a 	ret

100013d4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100013d4:	defffe04 	addi	sp,sp,-8
100013d8:	dfc00115 	stw	ra,4(sp)
100013dc:	df000015 	stw	fp,0(sp)
100013e0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100013e4:	017e9414 	movui	r5,64080
100013e8:	01000044 	movi	r4,1
100013ec:	00002f40 	call	100002f4 <IO_write>
	usleep(100000);
100013f0:	010000b4 	movhi	r4,2
100013f4:	2121a804 	addi	r4,r4,-31072
100013f8:	000fc440 	call	1000fc44 <usleep>
	printf("[USB INIT]:reset finished!\n");
100013fc:	01040074 	movhi	r4,4097
10001400:	2108cd04 	addi	r4,r4,9012
10001404:	00025d80 	call	100025d8 <puts>

	usleep(500000);
10001408:	01000234 	movhi	r4,8
1000140c:	21284804 	addi	r4,r4,-24288
10001410:	000fc440 	call	1000fc44 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001414:	01040074 	movhi	r4,4097
10001418:	2108d404 	addi	r4,r4,9040
1000141c:	00025d80 	call	100025d8 <puts>
	IO_read(HPI_MAILBOX);
10001420:	01000044 	movi	r4,1
10001424:	00003640 	call	10000364 <IO_read>
	IO_read(HPI_STATUS);
10001428:	010000c4 	movi	r4,3
1000142c:	00003640 	call	10000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001430:	01005104 	movi	r4,324
10001434:	00013880 	call	10001388 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001438:	000b883a 	mov	r5,zero
1000143c:	01005104 	movi	r4,324
10001440:	00013300 	call	10001330 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001444:	01005204 	movi	r4,328
10001448:	00013880 	call	10001388 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
1000144c:	000b883a 	mov	r5,zero
10001450:	01005204 	movi	r4,328
10001454:	00013300 	call	10001330 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001458:	017fffd4 	movui	r5,65535
1000145c:	01302414 	movui	r4,49296
10001460:	00013300 	call	10001330 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001464:	017fffd4 	movui	r5,65535
10001468:	01302c14 	movui	r4,49328
1000146c:	00013300 	call	10001330 <UsbWrite>
}
10001470:	0001883a 	nop
10001474:	e037883a 	mov	sp,fp
10001478:	dfc00117 	ldw	ra,4(sp)
1000147c:	df000017 	ldw	fp,0(sp)
10001480:	dec00204 	addi	sp,sp,8
10001484:	f800283a 	ret

10001488 <UsbSetAddress>:


void UsbSetAddress()
{
10001488:	defffe04 	addi	sp,sp,-8
1000148c:	dfc00115 	stw	ra,4(sp)
10001490:	df000015 	stw	fp,0(sp)
10001494:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001498:	01414004 	movi	r5,1280
1000149c:	01000084 	movi	r4,2
100014a0:	00002f40 	call	100002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100014a4:	01414304 	movi	r5,1292
100014a8:	0009883a 	mov	r4,zero
100014ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100014b0:	01400204 	movi	r5,8
100014b4:	0009883a 	mov	r4,zero
100014b8:	00002f40 	call	100002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100014bc:	01403404 	movi	r5,208
100014c0:	0009883a 	mov	r4,zero
100014c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100014c8:	01400044 	movi	r5,1
100014cc:	0009883a 	mov	r4,zero
100014d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014d4:	014004c4 	movi	r5,19
100014d8:	0009883a 	mov	r4,zero
100014dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100014e0:	01414504 	movi	r5,1300
100014e4:	0009883a 	mov	r4,zero
100014e8:	00002f40 	call	100002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100014ec:	01414004 	movi	r5,1280
100014f0:	0009883a 	mov	r4,zero
100014f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
100014f8:	01400084 	movi	r5,2
100014fc:	0009883a 	mov	r4,zero
10001500:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001504:	000b883a 	mov	r5,zero
10001508:	0009883a 	mov	r4,zero
1000150c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001510:	000b883a 	mov	r5,zero
10001514:	0009883a 	mov	r4,zero
10001518:	00002f40 	call	100002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
1000151c:	000b883a 	mov	r5,zero
10001520:	0009883a 	mov	r4,zero
10001524:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001528:	000b883a 	mov	r5,zero
1000152c:	0009883a 	mov	r4,zero
10001530:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001534:	01402404 	movi	r5,144
10001538:	0009883a 	mov	r4,zero
1000153c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001540:	01401044 	movi	r5,65
10001544:	0009883a 	mov	r4,zero
10001548:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000154c:	014004c4 	movi	r5,19
10001550:	0009883a 	mov	r4,zero
10001554:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001558:	000b883a 	mov	r5,zero
1000155c:	0009883a 	mov	r4,zero
10001560:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001564:	01414004 	movi	r5,1280
10001568:	01006c04 	movi	r4,432
1000156c:	00013300 	call	10001330 <UsbWrite>
}
10001570:	0001883a 	nop
10001574:	e037883a 	mov	sp,fp
10001578:	dfc00117 	ldw	ra,4(sp)
1000157c:	df000017 	ldw	fp,0(sp)
10001580:	dec00204 	addi	sp,sp,8
10001584:	f800283a 	ret

10001588 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10001588:	defffe04 	addi	sp,sp,-8
1000158c:	dfc00115 	stw	ra,4(sp)
10001590:	df000015 	stw	fp,0(sp)
10001594:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001598:	01414004 	movi	r5,1280
1000159c:	01000084 	movi	r4,2
100015a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100015a4:	01414304 	movi	r5,1292
100015a8:	0009883a 	mov	r4,zero
100015ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100015b0:	01400204 	movi	r5,8
100015b4:	0009883a 	mov	r4,zero
100015b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100015bc:	0140b404 	movi	r5,720
100015c0:	0009883a 	mov	r4,zero
100015c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100015c8:	01400044 	movi	r5,1
100015cc:	0009883a 	mov	r4,zero
100015d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100015d4:	014004c4 	movi	r5,19
100015d8:	0009883a 	mov	r4,zero
100015dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100015e0:	01414504 	movi	r5,1300
100015e4:	0009883a 	mov	r4,zero
100015e8:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100015ec:	0141a004 	movi	r5,1664
100015f0:	0009883a 	mov	r4,zero
100015f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100015f8:	01404004 	movi	r5,256
100015fc:	0009883a 	mov	r4,zero
10001600:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001604:	000b883a 	mov	r5,zero
10001608:	0009883a 	mov	r4,zero
1000160c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001610:	01400204 	movi	r5,8
10001614:	0009883a 	mov	r4,zero
10001618:	00002f40 	call	100002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
1000161c:	01414b04 	movi	r5,1324
10001620:	0009883a 	mov	r4,zero
10001624:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001628:	01400204 	movi	r5,8
1000162c:	0009883a 	mov	r4,zero
10001630:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001634:	0140a404 	movi	r5,656
10001638:	0009883a 	mov	r4,zero
1000163c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001640:	01401044 	movi	r5,65
10001644:	0009883a 	mov	r4,zero
10001648:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000164c:	014004c4 	movi	r5,19
10001650:	0009883a 	mov	r4,zero
10001654:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
10001658:	01414804 	movi	r5,1312
1000165c:	0009883a 	mov	r4,zero
10001660:	00002f40 	call	100002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001664:	000b883a 	mov	r5,zero
10001668:	0009883a 	mov	r4,zero
1000166c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001670:	000b883a 	mov	r5,zero
10001674:	0009883a 	mov	r4,zero
10001678:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
1000167c:	01408404 	movi	r5,528
10001680:	0009883a 	mov	r4,zero
10001684:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001688:	01401044 	movi	r5,65
1000168c:	0009883a 	mov	r4,zero
10001690:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001694:	014004c4 	movi	r5,19
10001698:	0009883a 	mov	r4,zero
1000169c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100016a0:	000b883a 	mov	r5,zero
100016a4:	0009883a 	mov	r4,zero
100016a8:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100016ac:	01414004 	movi	r5,1280
100016b0:	01006c04 	movi	r4,432
100016b4:	00013300 	call	10001330 <UsbWrite>
}
100016b8:	0001883a 	nop
100016bc:	e037883a 	mov	sp,fp
100016c0:	dfc00117 	ldw	ra,4(sp)
100016c4:	df000017 	ldw	fp,0(sp)
100016c8:	dec00204 	addi	sp,sp,8
100016cc:	f800283a 	ret

100016d0 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100016d0:	defffe04 	addi	sp,sp,-8
100016d4:	dfc00115 	stw	ra,4(sp)
100016d8:	df000015 	stw	fp,0(sp)
100016dc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100016e0:	01414004 	movi	r5,1280
100016e4:	01000084 	movi	r4,2
100016e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100016ec:	01414304 	movi	r5,1292
100016f0:	0009883a 	mov	r4,zero
100016f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100016f8:	01400204 	movi	r5,8
100016fc:	0009883a 	mov	r4,zero
10001700:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001704:	0140b404 	movi	r5,720
10001708:	0009883a 	mov	r4,zero
1000170c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001710:	01400044 	movi	r5,1
10001714:	0009883a 	mov	r4,zero
10001718:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000171c:	014004c4 	movi	r5,19
10001720:	0009883a 	mov	r4,zero
10001724:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001728:	01414504 	movi	r5,1300
1000172c:	0009883a 	mov	r4,zero
10001730:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001734:	0141a004 	movi	r5,1664
10001738:	0009883a 	mov	r4,zero
1000173c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001740:	01404004 	movi	r5,256
10001744:	0009883a 	mov	r4,zero
10001748:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000174c:	000b883a 	mov	r5,zero
10001750:	0009883a 	mov	r4,zero
10001754:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001758:	01400484 	movi	r5,18
1000175c:	0009883a 	mov	r4,zero
10001760:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001764:	01415104 	movi	r5,1348
10001768:	0009883a 	mov	r4,zero
1000176c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001770:	01400204 	movi	r5,8
10001774:	0009883a 	mov	r4,zero
10001778:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000177c:	0140a404 	movi	r5,656
10001780:	0009883a 	mov	r4,zero
10001784:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001788:	01401044 	movi	r5,65
1000178c:	0009883a 	mov	r4,zero
10001790:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001794:	014004c4 	movi	r5,19
10001798:	0009883a 	mov	r4,zero
1000179c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100017a0:	01414804 	movi	r5,1312
100017a4:	0009883a 	mov	r4,zero
100017a8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100017ac:	01415304 	movi	r5,1356
100017b0:	0009883a 	mov	r4,zero
100017b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100017b8:	01400204 	movi	r5,8
100017bc:	0009883a 	mov	r4,zero
100017c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100017c4:	0140a404 	movi	r5,656
100017c8:	0009883a 	mov	r4,zero
100017cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100017d0:	01400044 	movi	r5,1
100017d4:	0009883a 	mov	r4,zero
100017d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100017dc:	014004c4 	movi	r5,19
100017e0:	0009883a 	mov	r4,zero
100017e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100017e8:	01414b04 	movi	r5,1324
100017ec:	0009883a 	mov	r4,zero
100017f0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100017f4:	01415504 	movi	r5,1364
100017f8:	0009883a 	mov	r4,zero
100017fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10001800:	01400084 	movi	r5,2
10001804:	0009883a 	mov	r4,zero
10001808:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000180c:	0140a404 	movi	r5,656
10001810:	0009883a 	mov	r4,zero
10001814:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001818:	01401044 	movi	r5,65
1000181c:	0009883a 	mov	r4,zero
10001820:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001824:	014004c4 	movi	r5,19
10001828:	0009883a 	mov	r4,zero
1000182c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001830:	01414e04 	movi	r5,1336
10001834:	0009883a 	mov	r4,zero
10001838:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
1000183c:	000b883a 	mov	r5,zero
10001840:	0009883a 	mov	r4,zero
10001844:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001848:	000b883a 	mov	r5,zero
1000184c:	0009883a 	mov	r4,zero
10001850:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001854:	01408404 	movi	r5,528
10001858:	0009883a 	mov	r4,zero
1000185c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001860:	01401044 	movi	r5,65
10001864:	0009883a 	mov	r4,zero
10001868:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000186c:	014004c4 	movi	r5,19
10001870:	0009883a 	mov	r4,zero
10001874:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001878:	000b883a 	mov	r5,zero
1000187c:	0009883a 	mov	r4,zero
10001880:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001884:	01414004 	movi	r5,1280
10001888:	01006c04 	movi	r4,432
1000188c:	00013300 	call	10001330 <UsbWrite>
}
10001890:	0001883a 	nop
10001894:	e037883a 	mov	sp,fp
10001898:	dfc00117 	ldw	ra,4(sp)
1000189c:	df000017 	ldw	fp,0(sp)
100018a0:	dec00204 	addi	sp,sp,8
100018a4:	f800283a 	ret

100018a8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100018a8:	defffe04 	addi	sp,sp,-8
100018ac:	dfc00115 	stw	ra,4(sp)
100018b0:	df000015 	stw	fp,0(sp)
100018b4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100018b8:	01414004 	movi	r5,1280
100018bc:	01000084 	movi	r4,2
100018c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100018c4:	01414304 	movi	r5,1292
100018c8:	0009883a 	mov	r4,zero
100018cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100018d0:	01400204 	movi	r5,8
100018d4:	0009883a 	mov	r4,zero
100018d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100018dc:	0140b404 	movi	r5,720
100018e0:	0009883a 	mov	r4,zero
100018e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100018e8:	01400044 	movi	r5,1
100018ec:	0009883a 	mov	r4,zero
100018f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100018f4:	014004c4 	movi	r5,19
100018f8:	0009883a 	mov	r4,zero
100018fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001900:	01414504 	movi	r5,1300
10001904:	0009883a 	mov	r4,zero
10001908:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000190c:	0141a004 	movi	r5,1664
10001910:	0009883a 	mov	r4,zero
10001914:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001918:	01408004 	movi	r5,512
1000191c:	0009883a 	mov	r4,zero
10001920:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001924:	000b883a 	mov	r5,zero
10001928:	0009883a 	mov	r4,zero
1000192c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001930:	01400244 	movi	r5,9
10001934:	0009883a 	mov	r4,zero
10001938:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000193c:	01415104 	movi	r5,1348
10001940:	0009883a 	mov	r4,zero
10001944:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001948:	01400204 	movi	r5,8
1000194c:	0009883a 	mov	r4,zero
10001950:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001954:	0140a404 	movi	r5,656
10001958:	0009883a 	mov	r4,zero
1000195c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001960:	01401044 	movi	r5,65
10001964:	0009883a 	mov	r4,zero
10001968:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000196c:	014004c4 	movi	r5,19
10001970:	0009883a 	mov	r4,zero
10001974:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001978:	01414804 	movi	r5,1312
1000197c:	0009883a 	mov	r4,zero
10001980:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001984:	01415304 	movi	r5,1356
10001988:	0009883a 	mov	r4,zero
1000198c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001990:	01400044 	movi	r5,1
10001994:	0009883a 	mov	r4,zero
10001998:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000199c:	0140a404 	movi	r5,656
100019a0:	0009883a 	mov	r4,zero
100019a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100019a8:	01400044 	movi	r5,1
100019ac:	0009883a 	mov	r4,zero
100019b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100019b4:	014004c4 	movi	r5,19
100019b8:	0009883a 	mov	r4,zero
100019bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100019c0:	01414b04 	movi	r5,1324
100019c4:	0009883a 	mov	r4,zero
100019c8:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100019cc:	000b883a 	mov	r5,zero
100019d0:	0009883a 	mov	r4,zero
100019d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100019d8:	000b883a 	mov	r5,zero
100019dc:	0009883a 	mov	r4,zero
100019e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100019e4:	01408404 	movi	r5,528
100019e8:	0009883a 	mov	r4,zero
100019ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100019f0:	01401044 	movi	r5,65
100019f4:	0009883a 	mov	r4,zero
100019f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100019fc:	014004c4 	movi	r5,19
10001a00:	0009883a 	mov	r4,zero
10001a04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001a08:	000b883a 	mov	r5,zero
10001a0c:	0009883a 	mov	r4,zero
10001a10:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a14:	01414004 	movi	r5,1280
10001a18:	01006c04 	movi	r4,432
10001a1c:	00013300 	call	10001330 <UsbWrite>
}
10001a20:	0001883a 	nop
10001a24:	e037883a 	mov	sp,fp
10001a28:	dfc00117 	ldw	ra,4(sp)
10001a2c:	df000017 	ldw	fp,0(sp)
10001a30:	dec00204 	addi	sp,sp,8
10001a34:	f800283a 	ret

10001a38 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001a38:	defffe04 	addi	sp,sp,-8
10001a3c:	dfc00115 	stw	ra,4(sp)
10001a40:	df000015 	stw	fp,0(sp)
10001a44:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001a48:	01414004 	movi	r5,1280
10001a4c:	01000084 	movi	r4,2
10001a50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001a54:	01414304 	movi	r5,1292
10001a58:	0009883a 	mov	r4,zero
10001a5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001a60:	01400204 	movi	r5,8
10001a64:	0009883a 	mov	r4,zero
10001a68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001a6c:	0140b404 	movi	r5,720
10001a70:	0009883a 	mov	r4,zero
10001a74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001a78:	01400044 	movi	r5,1
10001a7c:	0009883a 	mov	r4,zero
10001a80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a84:	014004c4 	movi	r5,19
10001a88:	0009883a 	mov	r4,zero
10001a8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001a90:	01414504 	movi	r5,1300
10001a94:	0009883a 	mov	r4,zero
10001a98:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001a9c:	0141a004 	movi	r5,1664
10001aa0:	0009883a 	mov	r4,zero
10001aa4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001aa8:	01408004 	movi	r5,512
10001aac:	0009883a 	mov	r4,zero
10001ab0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001ab4:	000b883a 	mov	r5,zero
10001ab8:	0009883a 	mov	r4,zero
10001abc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001ac0:	01403fc4 	movi	r5,255
10001ac4:	0009883a 	mov	r4,zero
10001ac8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001acc:	01415704 	movi	r5,1372
10001ad0:	0009883a 	mov	r4,zero
10001ad4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001ad8:	01400204 	movi	r5,8
10001adc:	0009883a 	mov	r4,zero
10001ae0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001ae4:	0140a404 	movi	r5,656
10001ae8:	0009883a 	mov	r4,zero
10001aec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001af0:	01401044 	movi	r5,65
10001af4:	0009883a 	mov	r4,zero
10001af8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001afc:	014004c4 	movi	r5,19
10001b00:	0009883a 	mov	r4,zero
10001b04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001b08:	01414804 	movi	r5,1312
10001b0c:	0009883a 	mov	r4,zero
10001b10:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001b14:	01415904 	movi	r5,1380
10001b18:	0009883a 	mov	r4,zero
10001b1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001b20:	01400204 	movi	r5,8
10001b24:	0009883a 	mov	r4,zero
10001b28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001b2c:	0140a404 	movi	r5,656
10001b30:	0009883a 	mov	r4,zero
10001b34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001b38:	01400044 	movi	r5,1
10001b3c:	0009883a 	mov	r4,zero
10001b40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001b44:	014004c4 	movi	r5,19
10001b48:	0009883a 	mov	r4,zero
10001b4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001b50:	01414b04 	movi	r5,1324
10001b54:	0009883a 	mov	r4,zero
10001b58:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001b5c:	01415b04 	movi	r5,1388
10001b60:	0009883a 	mov	r4,zero
10001b64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001b68:	01400204 	movi	r5,8
10001b6c:	0009883a 	mov	r4,zero
10001b70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001b74:	0140a404 	movi	r5,656
10001b78:	0009883a 	mov	r4,zero
10001b7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001b80:	01401044 	movi	r5,65
10001b84:	0009883a 	mov	r4,zero
10001b88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001b8c:	014004c4 	movi	r5,19
10001b90:	0009883a 	mov	r4,zero
10001b94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001b98:	01414e04 	movi	r5,1336
10001b9c:	0009883a 	mov	r4,zero
10001ba0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001ba4:	01415d04 	movi	r5,1396
10001ba8:	0009883a 	mov	r4,zero
10001bac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001bb0:	01400204 	movi	r5,8
10001bb4:	0009883a 	mov	r4,zero
10001bb8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001bbc:	0140a404 	movi	r5,656
10001bc0:	0009883a 	mov	r4,zero
10001bc4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001bc8:	01400044 	movi	r5,1
10001bcc:	0009883a 	mov	r4,zero
10001bd0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001bd4:	014004c4 	movi	r5,19
10001bd8:	0009883a 	mov	r4,zero
10001bdc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001be0:	01415104 	movi	r5,1348
10001be4:	0009883a 	mov	r4,zero
10001be8:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001bec:	01415f04 	movi	r5,1404
10001bf0:	0009883a 	mov	r4,zero
10001bf4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001bf8:	01400084 	movi	r5,2
10001bfc:	0009883a 	mov	r4,zero
10001c00:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001c04:	0140a404 	movi	r5,656
10001c08:	0009883a 	mov	r4,zero
10001c0c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001c10:	01401044 	movi	r5,65
10001c14:	0009883a 	mov	r4,zero
10001c18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001c1c:	014004c4 	movi	r5,19
10001c20:	0009883a 	mov	r4,zero
10001c24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001c28:	01415404 	movi	r5,1360
10001c2c:	0009883a 	mov	r4,zero
10001c30:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001c34:	000b883a 	mov	r5,zero
10001c38:	0009883a 	mov	r4,zero
10001c3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001c40:	000b883a 	mov	r5,zero
10001c44:	0009883a 	mov	r4,zero
10001c48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001c4c:	01408404 	movi	r5,528
10001c50:	0009883a 	mov	r4,zero
10001c54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001c58:	01401044 	movi	r5,65
10001c5c:	0009883a 	mov	r4,zero
10001c60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001c64:	014004c4 	movi	r5,19
10001c68:	0009883a 	mov	r4,zero
10001c6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001c70:	000b883a 	mov	r5,zero
10001c74:	0009883a 	mov	r4,zero
10001c78:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c7c:	01414004 	movi	r5,1280
10001c80:	01006c04 	movi	r4,432
10001c84:	00013300 	call	10001330 <UsbWrite>
}
10001c88:	0001883a 	nop
10001c8c:	e037883a 	mov	sp,fp
10001c90:	dfc00117 	ldw	ra,4(sp)
10001c94:	df000017 	ldw	fp,0(sp)
10001c98:	dec00204 	addi	sp,sp,8
10001c9c:	f800283a 	ret

10001ca0 <UsbSetConfig>:

void UsbSetConfig()
{
10001ca0:	defffe04 	addi	sp,sp,-8
10001ca4:	dfc00115 	stw	ra,4(sp)
10001ca8:	df000015 	stw	fp,0(sp)
10001cac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001cb0:	01414004 	movi	r5,1280
10001cb4:	01000084 	movi	r4,2
10001cb8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001cbc:	01414304 	movi	r5,1292
10001cc0:	0009883a 	mov	r4,zero
10001cc4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001cc8:	01400204 	movi	r5,8
10001ccc:	0009883a 	mov	r4,zero
10001cd0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001cd4:	0140b404 	movi	r5,720
10001cd8:	0009883a 	mov	r4,zero
10001cdc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001ce0:	01400044 	movi	r5,1
10001ce4:	0009883a 	mov	r4,zero
10001ce8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001cec:	014004c4 	movi	r5,19
10001cf0:	0009883a 	mov	r4,zero
10001cf4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001cf8:	01414504 	movi	r5,1300
10001cfc:	0009883a 	mov	r4,zero
10001d00:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001d04:	01424004 	movi	r5,2304
10001d08:	0009883a 	mov	r4,zero
10001d0c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001d10:	01400044 	movi	r5,1
10001d14:	0009883a 	mov	r4,zero
10001d18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001d1c:	000b883a 	mov	r5,zero
10001d20:	0009883a 	mov	r4,zero
10001d24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001d28:	000b883a 	mov	r5,zero
10001d2c:	0009883a 	mov	r4,zero
10001d30:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001d34:	000b883a 	mov	r5,zero
10001d38:	0009883a 	mov	r4,zero
10001d3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001d40:	000b883a 	mov	r5,zero
10001d44:	0009883a 	mov	r4,zero
10001d48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001d4c:	0140a404 	movi	r5,656
10001d50:	0009883a 	mov	r4,zero
10001d54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001d58:	01401044 	movi	r5,65
10001d5c:	0009883a 	mov	r4,zero
10001d60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d64:	014004c4 	movi	r5,19
10001d68:	0009883a 	mov	r4,zero
10001d6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001d70:	000b883a 	mov	r5,zero
10001d74:	0009883a 	mov	r4,zero
10001d78:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d7c:	01414004 	movi	r5,1280
10001d80:	01006c04 	movi	r4,432
10001d84:	00013300 	call	10001330 <UsbWrite>

}
10001d88:	0001883a 	nop
10001d8c:	e037883a 	mov	sp,fp
10001d90:	dfc00117 	ldw	ra,4(sp)
10001d94:	df000017 	ldw	fp,0(sp)
10001d98:	dec00204 	addi	sp,sp,8
10001d9c:	f800283a 	ret

10001da0 <UsbClassRequest>:

void UsbClassRequest()
{
10001da0:	defffe04 	addi	sp,sp,-8
10001da4:	dfc00115 	stw	ra,4(sp)
10001da8:	df000015 	stw	fp,0(sp)
10001dac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001db0:	01414004 	movi	r5,1280
10001db4:	01000084 	movi	r4,2
10001db8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001dbc:	01414304 	movi	r5,1292
10001dc0:	0009883a 	mov	r4,zero
10001dc4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001dc8:	01400204 	movi	r5,8
10001dcc:	0009883a 	mov	r4,zero
10001dd0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001dd4:	0140b404 	movi	r5,720
10001dd8:	0009883a 	mov	r4,zero
10001ddc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001de0:	01400044 	movi	r5,1
10001de4:	0009883a 	mov	r4,zero
10001de8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001dec:	014004c4 	movi	r5,19
10001df0:	0009883a 	mov	r4,zero
10001df4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001df8:	01414504 	movi	r5,1300
10001dfc:	0009883a 	mov	r4,zero
10001e00:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001e04:	01428844 	movi	r5,2593
10001e08:	0009883a 	mov	r4,zero
10001e0c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001e10:	000b883a 	mov	r5,zero
10001e14:	0009883a 	mov	r4,zero
10001e18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001e1c:	000b883a 	mov	r5,zero
10001e20:	0009883a 	mov	r4,zero
10001e24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001e28:	000b883a 	mov	r5,zero
10001e2c:	0009883a 	mov	r4,zero
10001e30:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001e34:	000b883a 	mov	r5,zero
10001e38:	0009883a 	mov	r4,zero
10001e3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001e40:	000b883a 	mov	r5,zero
10001e44:	0009883a 	mov	r4,zero
10001e48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001e4c:	0140a404 	movi	r5,656
10001e50:	0009883a 	mov	r4,zero
10001e54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001e58:	01401044 	movi	r5,65
10001e5c:	0009883a 	mov	r4,zero
10001e60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e64:	014004c4 	movi	r5,19
10001e68:	0009883a 	mov	r4,zero
10001e6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001e70:	000b883a 	mov	r5,zero
10001e74:	0009883a 	mov	r4,zero
10001e78:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e7c:	01414004 	movi	r5,1280
10001e80:	01006c04 	movi	r4,432
10001e84:	00013300 	call	10001330 <UsbWrite>
}
10001e88:	0001883a 	nop
10001e8c:	e037883a 	mov	sp,fp
10001e90:	dfc00117 	ldw	ra,4(sp)
10001e94:	df000017 	ldw	fp,0(sp)
10001e98:	dec00204 	addi	sp,sp,8
10001e9c:	f800283a 	ret

10001ea0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001ea0:	defffe04 	addi	sp,sp,-8
10001ea4:	dfc00115 	stw	ra,4(sp)
10001ea8:	df000015 	stw	fp,0(sp)
10001eac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001eb0:	01414004 	movi	r5,1280
10001eb4:	01000084 	movi	r4,2
10001eb8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001ebc:	01414304 	movi	r5,1292
10001ec0:	0009883a 	mov	r4,zero
10001ec4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001ec8:	01400204 	movi	r5,8
10001ecc:	0009883a 	mov	r4,zero
10001ed0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001ed4:	0140b404 	movi	r5,720
10001ed8:	0009883a 	mov	r4,zero
10001edc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001ee0:	01400044 	movi	r5,1
10001ee4:	0009883a 	mov	r4,zero
10001ee8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001eec:	014004c4 	movi	r5,19
10001ef0:	0009883a 	mov	r4,zero
10001ef4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001ef8:	01414504 	movi	r5,1300
10001efc:	0009883a 	mov	r4,zero
10001f00:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001f04:	0141a044 	movi	r5,1665
10001f08:	0009883a 	mov	r4,zero
10001f0c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001f10:	01484004 	movi	r5,8448
10001f14:	0009883a 	mov	r4,zero
10001f18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001f1c:	000b883a 	mov	r5,zero
10001f20:	0009883a 	mov	r4,zero
10001f24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001f28:	01401ec4 	movi	r5,123
10001f2c:	0009883a 	mov	r4,zero
10001f30:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001f34:	01415104 	movi	r5,1348
10001f38:	0009883a 	mov	r4,zero
10001f3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001f40:	01400204 	movi	r5,8
10001f44:	0009883a 	mov	r4,zero
10001f48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001f4c:	0140a404 	movi	r5,656
10001f50:	0009883a 	mov	r4,zero
10001f54:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001f58:	01401044 	movi	r5,65
10001f5c:	0009883a 	mov	r4,zero
10001f60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001f64:	014004c4 	movi	r5,19
10001f68:	0009883a 	mov	r4,zero
10001f6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001f70:	01414804 	movi	r5,1312
10001f74:	0009883a 	mov	r4,zero
10001f78:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001f7c:	000b883a 	mov	r5,zero
10001f80:	0009883a 	mov	r4,zero
10001f84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001f88:	000b883a 	mov	r5,zero
10001f8c:	0009883a 	mov	r4,zero
10001f90:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001f94:	01408404 	movi	r5,528
10001f98:	0009883a 	mov	r4,zero
10001f9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001fa0:	01401044 	movi	r5,65
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001fac:	014004c4 	movi	r5,19
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001fb8:	000b883a 	mov	r5,zero
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001fc4:	01414004 	movi	r5,1280
10001fc8:	01006c04 	movi	r4,432
10001fcc:	00013300 	call	10001330 <UsbWrite>

}
10001fd0:	0001883a 	nop
10001fd4:	e037883a 	mov	sp,fp
10001fd8:	dfc00117 	ldw	ra,4(sp)
10001fdc:	df000017 	ldw	fp,0(sp)
10001fe0:	dec00204 	addi	sp,sp,8
10001fe4:	f800283a 	ret

10001fe8 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001fe8:	defffe04 	addi	sp,sp,-8
10001fec:	dfc00115 	stw	ra,4(sp)
10001ff0:	df000015 	stw	fp,0(sp)
10001ff4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001ff8:	01414004 	movi	r5,1280
10001ffc:	01000084 	movi	r4,2
10002000:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002004:	01414304 	movi	r5,1292
10002008:	0009883a 	mov	r4,zero
1000200c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002010:	01400204 	movi	r5,8
10002014:	0009883a 	mov	r4,zero
10002018:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000201c:	0140b404 	movi	r5,720
10002020:	0009883a 	mov	r4,zero
10002024:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002028:	01400044 	movi	r5,1
1000202c:	0009883a 	mov	r4,zero
10002030:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002034:	014004c4 	movi	r5,19
10002038:	0009883a 	mov	r4,zero
1000203c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002040:	01414504 	movi	r5,1300
10002044:	0009883a 	mov	r4,zero
10002048:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
1000204c:	0141a044 	movi	r5,1665
10002050:	0009883a 	mov	r4,zero
10002054:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002058:	01488004 	movi	r5,8704
1000205c:	0009883a 	mov	r4,zero
10002060:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002064:	000b883a 	mov	r5,zero
10002068:	0009883a 	mov	r4,zero
1000206c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002070:	01401ec4 	movi	r5,123
10002074:	0009883a 	mov	r4,zero
10002078:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
1000207c:	01416004 	movi	r5,1408
10002080:	0009883a 	mov	r4,zero
10002084:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002088:	01400204 	movi	r5,8
1000208c:	0009883a 	mov	r4,zero
10002090:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002094:	0140a404 	movi	r5,656
10002098:	0009883a 	mov	r4,zero
1000209c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100020a0:	01401044 	movi	r5,65
100020a4:	0009883a 	mov	r4,zero
100020a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100020ac:	014004c4 	movi	r5,19
100020b0:	0009883a 	mov	r4,zero
100020b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100020b8:	01414804 	movi	r5,1312
100020bc:	0009883a 	mov	r4,zero
100020c0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
100020c4:	01416204 	movi	r5,1416
100020c8:	0009883a 	mov	r4,zero
100020cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100020d0:	01400204 	movi	r5,8
100020d4:	0009883a 	mov	r4,zero
100020d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100020dc:	0140a404 	movi	r5,656
100020e0:	0009883a 	mov	r4,zero
100020e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100020e8:	01400044 	movi	r5,1
100020ec:	0009883a 	mov	r4,zero
100020f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100020f4:	014004c4 	movi	r5,19
100020f8:	0009883a 	mov	r4,zero
100020fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002100:	01414b04 	movi	r5,1324
10002104:	0009883a 	mov	r4,zero
10002108:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
1000210c:	01416404 	movi	r5,1424
10002110:	0009883a 	mov	r4,zero
10002114:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002118:	01400204 	movi	r5,8
1000211c:	0009883a 	mov	r4,zero
10002120:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002124:	0140a404 	movi	r5,656
10002128:	0009883a 	mov	r4,zero
1000212c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002130:	01401044 	movi	r5,65
10002134:	0009883a 	mov	r4,zero
10002138:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000213c:	014004c4 	movi	r5,19
10002140:	0009883a 	mov	r4,zero
10002144:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002148:	01414e04 	movi	r5,1336
1000214c:	0009883a 	mov	r4,zero
10002150:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002154:	01416604 	movi	r5,1432
10002158:	0009883a 	mov	r4,zero
1000215c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002160:	01400204 	movi	r5,8
10002164:	0009883a 	mov	r4,zero
10002168:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000216c:	0140a404 	movi	r5,656
10002170:	0009883a 	mov	r4,zero
10002174:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002178:	01400044 	movi	r5,1
1000217c:	0009883a 	mov	r4,zero
10002180:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002184:	014004c4 	movi	r5,19
10002188:	0009883a 	mov	r4,zero
1000218c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002190:	01415104 	movi	r5,1348
10002194:	0009883a 	mov	r4,zero
10002198:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
1000219c:	01416804 	movi	r5,1440
100021a0:	0009883a 	mov	r4,zero
100021a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100021a8:	01400204 	movi	r5,8
100021ac:	0009883a 	mov	r4,zero
100021b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100021b4:	0140a404 	movi	r5,656
100021b8:	0009883a 	mov	r4,zero
100021bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100021c0:	01401044 	movi	r5,65
100021c4:	0009883a 	mov	r4,zero
100021c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100021cc:	014004c4 	movi	r5,19
100021d0:	0009883a 	mov	r4,zero
100021d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100021d8:	01415404 	movi	r5,1360
100021dc:	0009883a 	mov	r4,zero
100021e0:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100021e4:	01416a04 	movi	r5,1448
100021e8:	0009883a 	mov	r4,zero
100021ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100021f0:	01400204 	movi	r5,8
100021f4:	0009883a 	mov	r4,zero
100021f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100021fc:	0140a404 	movi	r5,656
10002200:	0009883a 	mov	r4,zero
10002204:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002208:	01400044 	movi	r5,1
1000220c:	0009883a 	mov	r4,zero
10002210:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002214:	014004c4 	movi	r5,19
10002218:	0009883a 	mov	r4,zero
1000221c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002220:	01415704 	movi	r5,1372
10002224:	0009883a 	mov	r4,zero
10002228:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
1000222c:	01416c04 	movi	r5,1456
10002230:	0009883a 	mov	r4,zero
10002234:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002238:	01400204 	movi	r5,8
1000223c:	0009883a 	mov	r4,zero
10002240:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002244:	0140a404 	movi	r5,656
10002248:	0009883a 	mov	r4,zero
1000224c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002250:	01401044 	movi	r5,65
10002254:	0009883a 	mov	r4,zero
10002258:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000225c:	014004c4 	movi	r5,19
10002260:	0009883a 	mov	r4,zero
10002264:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002268:	01415a04 	movi	r5,1384
1000226c:	0009883a 	mov	r4,zero
10002270:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002274:	01416e04 	movi	r5,1464
10002278:	0009883a 	mov	r4,zero
1000227c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002280:	014000c4 	movi	r5,3
10002284:	0009883a 	mov	r4,zero
10002288:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000228c:	0140a404 	movi	r5,656
10002290:	0009883a 	mov	r4,zero
10002294:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002298:	01400044 	movi	r5,1
1000229c:	0009883a 	mov	r4,zero
100022a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
100022a4:	014004c4 	movi	r5,19
100022a8:	0009883a 	mov	r4,zero
100022ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
100022b0:	01415d04 	movi	r5,1396
100022b4:	0009883a 	mov	r4,zero
100022b8:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
100022bc:	000b883a 	mov	r5,zero
100022c0:	0009883a 	mov	r4,zero
100022c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100022c8:	000b883a 	mov	r5,zero
100022cc:	0009883a 	mov	r4,zero
100022d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100022d4:	01408404 	movi	r5,528
100022d8:	0009883a 	mov	r4,zero
100022dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100022e0:	01401044 	movi	r5,65
100022e4:	0009883a 	mov	r4,zero
100022e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100022ec:	014004c4 	movi	r5,19
100022f0:	0009883a 	mov	r4,zero
100022f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100022f8:	000b883a 	mov	r5,zero
100022fc:	0009883a 	mov	r4,zero
10002300:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002304:	01414004 	movi	r5,1280
10002308:	01006c04 	movi	r4,432
1000230c:	00013300 	call	10001330 <UsbWrite>

}
10002310:	0001883a 	nop
10002314:	e037883a 	mov	sp,fp
10002318:	dfc00117 	ldw	ra,4(sp)
1000231c:	df000017 	ldw	fp,0(sp)
10002320:	dec00204 	addi	sp,sp,8
10002324:	f800283a 	ret

10002328 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002328:	defffd04 	addi	sp,sp,-12
1000232c:	dfc00215 	stw	ra,8(sp)
10002330:	df000115 	stw	fp,4(sp)
10002334:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002338:	01005104 	movi	r4,324
1000233c:	00013880 	call	10001388 <UsbRead>
10002340:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002344:	000b883a 	mov	r5,zero
10002348:	01005104 	movi	r4,324
1000234c:	00013300 	call	10001330 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002350:	00000d06 	br	10002388 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002354:	e0bfff0b 	ldhu	r2,-4(fp)
10002358:	10000526 	beq	r2,zero,10002370 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
1000235c:	e0bfff0b 	ldhu	r2,-4(fp)
10002360:	100b883a 	mov	r5,r2
10002364:	01040074 	movhi	r4,4097
10002368:	2108dd04 	addi	r4,r4,9076
1000236c:	00024dc0 	call	100024dc <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002370:	01005104 	movi	r4,324
10002374:	00013880 	call	10001388 <UsbRead>
10002378:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000237c:	000b883a 	mov	r5,zero
10002380:	01005104 	movi	r4,324
10002384:	00013300 	call	10001330 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002388:	e0bfff0b 	ldhu	r2,-4(fp)
1000238c:	10840018 	cmpnei	r2,r2,4096
10002390:	103ff01e 	bne	r2,zero,10002354 <__alt_data_end+0xf8002354>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002394:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002398:	e037883a 	mov	sp,fp
1000239c:	dfc00117 	ldw	ra,4(sp)
100023a0:	df000017 	ldw	fp,0(sp)
100023a4:	dec00204 	addi	sp,sp,8
100023a8:	f800283a 	ret

100023ac <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
100023ac:	defffd04 	addi	sp,sp,-12
100023b0:	dfc00215 	stw	ra,8(sp)
100023b4:	df000115 	stw	fp,4(sp)
100023b8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100023bc:	010000c4 	movi	r4,3
100023c0:	00003640 	call	10000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100023c4:	01005104 	movi	r4,324
100023c8:	00013880 	call	10001388 <UsbRead>
100023cc:	10bfffcc 	andi	r2,r2,65535
100023d0:	10840018 	cmpnei	r2,r2,4096
100023d4:	1000091e 	bne	r2,zero,100023fc <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100023d8:	000b883a 	mov	r5,zero
100023dc:	01005104 	movi	r4,324
100023e0:	00013300 	call	10001330 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100023e4:	0001883a 	nop
100023e8:	010000c4 	movi	r4,3
100023ec:	00003640 	call	10000364 <IO_read>
100023f0:	10bfffcc 	andi	r2,r2,65535
100023f4:	1080040c 	andi	r2,r2,16
100023f8:	103ffb26 	beq	r2,zero,100023e8 <__alt_data_end+0xf80023e8>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100023fc:	01414204 	movi	r5,1288
10002400:	01000084 	movi	r4,2
10002404:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002408:	0009883a 	mov	r4,zero
1000240c:	00003640 	call	10000364 <IO_read>
10002410:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10002414:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002418:	e037883a 	mov	sp,fp
1000241c:	dfc00117 	ldw	ra,4(sp)
10002420:	df000017 	ldw	fp,0(sp)
10002424:	dec00204 	addi	sp,sp,8
10002428:	f800283a 	ret

1000242c <UsbPrintMem>:


void UsbPrintMem()
{
1000242c:	defffc04 	addi	sp,sp,-16
10002430:	dfc00315 	stw	ra,12(sp)
10002434:	df000215 	stw	fp,8(sp)
10002438:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
1000243c:	01414004 	movi	r5,1280
10002440:	01000084 	movi	r4,2
10002444:	00002f40 	call	100002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002448:	e03ffe15 	stw	zero,-8(fp)
1000244c:	00000e06 	br	10002488 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002450:	0009883a 	mov	r4,zero
10002454:	00003640 	call	10000364 <IO_read>
10002458:	10bfffcc 	andi	r2,r2,65535
1000245c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002460:	e0bffe17 	ldw	r2,-8(fp)
10002464:	10814004 	addi	r2,r2,1280
10002468:	e1bfff17 	ldw	r6,-4(fp)
1000246c:	100b883a 	mov	r5,r2
10002470:	01040074 	movhi	r4,4097
10002474:	2108e504 	addi	r4,r4,9108
10002478:	00024dc0 	call	100024dc <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
1000247c:	e0bffe17 	ldw	r2,-8(fp)
10002480:	10800084 	addi	r2,r2,2
10002484:	e0bffe15 	stw	r2,-8(fp)
10002488:	e0bffe17 	ldw	r2,-8(fp)
1000248c:	10803250 	cmplti	r2,r2,201
10002490:	103fef1e 	bne	r2,zero,10002450 <__alt_data_end+0xf8002450>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002494:	0001883a 	nop
10002498:	e037883a 	mov	sp,fp
1000249c:	dfc00117 	ldw	ra,4(sp)
100024a0:	df000017 	ldw	fp,0(sp)
100024a4:	dec00204 	addi	sp,sp,8
100024a8:	f800283a 	ret

100024ac <_printf_r>:
100024ac:	defffd04 	addi	sp,sp,-12
100024b0:	2805883a 	mov	r2,r5
100024b4:	dfc00015 	stw	ra,0(sp)
100024b8:	d9800115 	stw	r6,4(sp)
100024bc:	d9c00215 	stw	r7,8(sp)
100024c0:	21400217 	ldw	r5,8(r4)
100024c4:	d9c00104 	addi	r7,sp,4
100024c8:	100d883a 	mov	r6,r2
100024cc:	00026840 	call	10002684 <___vfprintf_internal_r>
100024d0:	dfc00017 	ldw	ra,0(sp)
100024d4:	dec00304 	addi	sp,sp,12
100024d8:	f800283a 	ret

100024dc <printf>:
100024dc:	defffc04 	addi	sp,sp,-16
100024e0:	dfc00015 	stw	ra,0(sp)
100024e4:	d9400115 	stw	r5,4(sp)
100024e8:	d9800215 	stw	r6,8(sp)
100024ec:	d9c00315 	stw	r7,12(sp)
100024f0:	00840074 	movhi	r2,4097
100024f4:	10905704 	addi	r2,r2,16732
100024f8:	10800017 	ldw	r2,0(r2)
100024fc:	200b883a 	mov	r5,r4
10002500:	d9800104 	addi	r6,sp,4
10002504:	11000217 	ldw	r4,8(r2)
10002508:	00049600 	call	10004960 <__vfprintf_internal>
1000250c:	dfc00017 	ldw	ra,0(sp)
10002510:	dec00404 	addi	sp,sp,16
10002514:	f800283a 	ret

10002518 <_puts_r>:
10002518:	defff604 	addi	sp,sp,-40
1000251c:	dc000715 	stw	r16,28(sp)
10002520:	2021883a 	mov	r16,r4
10002524:	2809883a 	mov	r4,r5
10002528:	dc400815 	stw	r17,32(sp)
1000252c:	dfc00915 	stw	ra,36(sp)
10002530:	2823883a 	mov	r17,r5
10002534:	00025ec0 	call	100025ec <strlen>
10002538:	10c00044 	addi	r3,r2,1
1000253c:	d8800115 	stw	r2,4(sp)
10002540:	00840074 	movhi	r2,4097
10002544:	1088ea04 	addi	r2,r2,9128
10002548:	d8800215 	stw	r2,8(sp)
1000254c:	00800044 	movi	r2,1
10002550:	d8800315 	stw	r2,12(sp)
10002554:	00800084 	movi	r2,2
10002558:	dc400015 	stw	r17,0(sp)
1000255c:	d8c00615 	stw	r3,24(sp)
10002560:	dec00415 	stw	sp,16(sp)
10002564:	d8800515 	stw	r2,20(sp)
10002568:	80000226 	beq	r16,zero,10002574 <_puts_r+0x5c>
1000256c:	80800e17 	ldw	r2,56(r16)
10002570:	10001426 	beq	r2,zero,100025c4 <_puts_r+0xac>
10002574:	81400217 	ldw	r5,8(r16)
10002578:	2880030b 	ldhu	r2,12(r5)
1000257c:	10c8000c 	andi	r3,r2,8192
10002580:	1800061e 	bne	r3,zero,1000259c <_puts_r+0x84>
10002584:	29001917 	ldw	r4,100(r5)
10002588:	00f7ffc4 	movi	r3,-8193
1000258c:	10880014 	ori	r2,r2,8192
10002590:	20c6703a 	and	r3,r4,r3
10002594:	2880030d 	sth	r2,12(r5)
10002598:	28c01915 	stw	r3,100(r5)
1000259c:	d9800404 	addi	r6,sp,16
100025a0:	8009883a 	mov	r4,r16
100025a4:	0006ec80 	call	10006ec8 <__sfvwrite_r>
100025a8:	1000091e 	bne	r2,zero,100025d0 <_puts_r+0xb8>
100025ac:	00800284 	movi	r2,10
100025b0:	dfc00917 	ldw	ra,36(sp)
100025b4:	dc400817 	ldw	r17,32(sp)
100025b8:	dc000717 	ldw	r16,28(sp)
100025bc:	dec00a04 	addi	sp,sp,40
100025c0:	f800283a 	ret
100025c4:	8009883a 	mov	r4,r16
100025c8:	0006a440 	call	10006a44 <__sinit>
100025cc:	003fe906 	br	10002574 <__alt_data_end+0xf8002574>
100025d0:	00bfffc4 	movi	r2,-1
100025d4:	003ff606 	br	100025b0 <__alt_data_end+0xf80025b0>

100025d8 <puts>:
100025d8:	00840074 	movhi	r2,4097
100025dc:	10905704 	addi	r2,r2,16732
100025e0:	200b883a 	mov	r5,r4
100025e4:	11000017 	ldw	r4,0(r2)
100025e8:	00025181 	jmpi	10002518 <_puts_r>

100025ec <strlen>:
100025ec:	208000cc 	andi	r2,r4,3
100025f0:	10002026 	beq	r2,zero,10002674 <strlen+0x88>
100025f4:	20800007 	ldb	r2,0(r4)
100025f8:	10002026 	beq	r2,zero,1000267c <strlen+0x90>
100025fc:	2005883a 	mov	r2,r4
10002600:	00000206 	br	1000260c <strlen+0x20>
10002604:	10c00007 	ldb	r3,0(r2)
10002608:	18001826 	beq	r3,zero,1000266c <strlen+0x80>
1000260c:	10800044 	addi	r2,r2,1
10002610:	10c000cc 	andi	r3,r2,3
10002614:	183ffb1e 	bne	r3,zero,10002604 <__alt_data_end+0xf8002604>
10002618:	10c00017 	ldw	r3,0(r2)
1000261c:	01ffbff4 	movhi	r7,65279
10002620:	39ffbfc4 	addi	r7,r7,-257
10002624:	00ca303a 	nor	r5,zero,r3
10002628:	01a02074 	movhi	r6,32897
1000262c:	19c7883a 	add	r3,r3,r7
10002630:	31a02004 	addi	r6,r6,-32640
10002634:	1946703a 	and	r3,r3,r5
10002638:	1986703a 	and	r3,r3,r6
1000263c:	1800091e 	bne	r3,zero,10002664 <strlen+0x78>
10002640:	10800104 	addi	r2,r2,4
10002644:	10c00017 	ldw	r3,0(r2)
10002648:	19cb883a 	add	r5,r3,r7
1000264c:	00c6303a 	nor	r3,zero,r3
10002650:	28c6703a 	and	r3,r5,r3
10002654:	1986703a 	and	r3,r3,r6
10002658:	183ff926 	beq	r3,zero,10002640 <__alt_data_end+0xf8002640>
1000265c:	00000106 	br	10002664 <strlen+0x78>
10002660:	10800044 	addi	r2,r2,1
10002664:	10c00007 	ldb	r3,0(r2)
10002668:	183ffd1e 	bne	r3,zero,10002660 <__alt_data_end+0xf8002660>
1000266c:	1105c83a 	sub	r2,r2,r4
10002670:	f800283a 	ret
10002674:	2005883a 	mov	r2,r4
10002678:	003fe706 	br	10002618 <__alt_data_end+0xf8002618>
1000267c:	0005883a 	mov	r2,zero
10002680:	f800283a 	ret

10002684 <___vfprintf_internal_r>:
10002684:	deffb804 	addi	sp,sp,-288
10002688:	dfc04715 	stw	ra,284(sp)
1000268c:	ddc04515 	stw	r23,276(sp)
10002690:	dd404315 	stw	r21,268(sp)
10002694:	d9002d15 	stw	r4,180(sp)
10002698:	282f883a 	mov	r23,r5
1000269c:	302b883a 	mov	r21,r6
100026a0:	d9c02e15 	stw	r7,184(sp)
100026a4:	df004615 	stw	fp,280(sp)
100026a8:	dd804415 	stw	r22,272(sp)
100026ac:	dd004215 	stw	r20,264(sp)
100026b0:	dcc04115 	stw	r19,260(sp)
100026b4:	dc804015 	stw	r18,256(sp)
100026b8:	dc403f15 	stw	r17,252(sp)
100026bc:	dc003e15 	stw	r16,248(sp)
100026c0:	00075c40 	call	100075c4 <_localeconv_r>
100026c4:	10800017 	ldw	r2,0(r2)
100026c8:	1009883a 	mov	r4,r2
100026cc:	d8803415 	stw	r2,208(sp)
100026d0:	00025ec0 	call	100025ec <strlen>
100026d4:	d8803715 	stw	r2,220(sp)
100026d8:	d8802d17 	ldw	r2,180(sp)
100026dc:	10000226 	beq	r2,zero,100026e8 <___vfprintf_internal_r+0x64>
100026e0:	10800e17 	ldw	r2,56(r2)
100026e4:	1000fb26 	beq	r2,zero,10002ad4 <___vfprintf_internal_r+0x450>
100026e8:	b880030b 	ldhu	r2,12(r23)
100026ec:	10c8000c 	andi	r3,r2,8192
100026f0:	1800061e 	bne	r3,zero,1000270c <___vfprintf_internal_r+0x88>
100026f4:	b9001917 	ldw	r4,100(r23)
100026f8:	00f7ffc4 	movi	r3,-8193
100026fc:	10880014 	ori	r2,r2,8192
10002700:	20c6703a 	and	r3,r4,r3
10002704:	b880030d 	sth	r2,12(r23)
10002708:	b8c01915 	stw	r3,100(r23)
1000270c:	10c0020c 	andi	r3,r2,8
10002710:	1800c326 	beq	r3,zero,10002a20 <___vfprintf_internal_r+0x39c>
10002714:	b8c00417 	ldw	r3,16(r23)
10002718:	1800c126 	beq	r3,zero,10002a20 <___vfprintf_internal_r+0x39c>
1000271c:	1080068c 	andi	r2,r2,26
10002720:	00c00284 	movi	r3,10
10002724:	10c0c626 	beq	r2,r3,10002a40 <___vfprintf_internal_r+0x3bc>
10002728:	d8c00404 	addi	r3,sp,16
1000272c:	05040074 	movhi	r20,4097
10002730:	d9001e04 	addi	r4,sp,120
10002734:	a508fb84 	addi	r20,r20,9198
10002738:	d8c01e15 	stw	r3,120(sp)
1000273c:	d8002015 	stw	zero,128(sp)
10002740:	d8001f15 	stw	zero,124(sp)
10002744:	d8003315 	stw	zero,204(sp)
10002748:	d8003615 	stw	zero,216(sp)
1000274c:	d8003815 	stw	zero,224(sp)
10002750:	1811883a 	mov	r8,r3
10002754:	d8003915 	stw	zero,228(sp)
10002758:	d8003a15 	stw	zero,232(sp)
1000275c:	d8002f15 	stw	zero,188(sp)
10002760:	d9002815 	stw	r4,160(sp)
10002764:	a8800007 	ldb	r2,0(r21)
10002768:	10028b26 	beq	r2,zero,10003198 <___vfprintf_internal_r+0xb14>
1000276c:	00c00944 	movi	r3,37
10002770:	a823883a 	mov	r17,r21
10002774:	10c0021e 	bne	r2,r3,10002780 <___vfprintf_internal_r+0xfc>
10002778:	00001406 	br	100027cc <___vfprintf_internal_r+0x148>
1000277c:	10c00326 	beq	r2,r3,1000278c <___vfprintf_internal_r+0x108>
10002780:	8c400044 	addi	r17,r17,1
10002784:	88800007 	ldb	r2,0(r17)
10002788:	103ffc1e 	bne	r2,zero,1000277c <__alt_data_end+0xf800277c>
1000278c:	8d61c83a 	sub	r16,r17,r21
10002790:	80000e26 	beq	r16,zero,100027cc <___vfprintf_internal_r+0x148>
10002794:	d8c02017 	ldw	r3,128(sp)
10002798:	d8801f17 	ldw	r2,124(sp)
1000279c:	45400015 	stw	r21,0(r8)
100027a0:	1c07883a 	add	r3,r3,r16
100027a4:	10800044 	addi	r2,r2,1
100027a8:	d8c02015 	stw	r3,128(sp)
100027ac:	44000115 	stw	r16,4(r8)
100027b0:	d8801f15 	stw	r2,124(sp)
100027b4:	00c001c4 	movi	r3,7
100027b8:	1880a916 	blt	r3,r2,10002a60 <___vfprintf_internal_r+0x3dc>
100027bc:	42000204 	addi	r8,r8,8
100027c0:	d9402f17 	ldw	r5,188(sp)
100027c4:	2c0b883a 	add	r5,r5,r16
100027c8:	d9402f15 	stw	r5,188(sp)
100027cc:	88800007 	ldb	r2,0(r17)
100027d0:	1000aa26 	beq	r2,zero,10002a7c <___vfprintf_internal_r+0x3f8>
100027d4:	8d400044 	addi	r21,r17,1
100027d8:	8c400047 	ldb	r17,1(r17)
100027dc:	0021883a 	mov	r16,zero
100027e0:	00bfffc4 	movi	r2,-1
100027e4:	0025883a 	mov	r18,zero
100027e8:	dc002905 	stb	r16,164(sp)
100027ec:	d8002785 	stb	zero,158(sp)
100027f0:	d8002b05 	stb	zero,172(sp)
100027f4:	d8802a15 	stw	r2,168(sp)
100027f8:	d8003115 	stw	zero,196(sp)
100027fc:	04c01604 	movi	r19,88
10002800:	05800244 	movi	r22,9
10002804:	9021883a 	mov	r16,r18
10002808:	4039883a 	mov	fp,r8
1000280c:	ad400044 	addi	r21,r21,1
10002810:	88bff804 	addi	r2,r17,-32
10002814:	98833236 	bltu	r19,r2,100034e0 <___vfprintf_internal_r+0xe5c>
10002818:	100490ba 	slli	r2,r2,2
1000281c:	00c40034 	movhi	r3,4096
10002820:	18ca0c04 	addi	r3,r3,10288
10002824:	10c5883a 	add	r2,r2,r3
10002828:	10800017 	ldw	r2,0(r2)
1000282c:	1000683a 	jmp	r2
10002830:	100033d8 	cmpnei	zero,r2,207
10002834:	100034e0 	cmpeqi	zero,r2,211
10002838:	100034e0 	cmpeqi	zero,r2,211
1000283c:	100033f8 	rdprs	zero,r2,207
10002840:	100034e0 	cmpeqi	zero,r2,211
10002844:	100034e0 	cmpeqi	zero,r2,211
10002848:	100034e0 	cmpeqi	zero,r2,211
1000284c:	100034e0 	cmpeqi	zero,r2,211
10002850:	100034e0 	cmpeqi	zero,r2,211
10002854:	100034e0 	cmpeqi	zero,r2,211
10002858:	10002ae0 	cmpeqi	zero,r2,171
1000285c:	100032e8 	cmpgeui	zero,r2,203
10002860:	100034e0 	cmpeqi	zero,r2,211
10002864:	100029a4 	muli	zero,r2,166
10002868:	10002b04 	addi	zero,r2,172
1000286c:	100034e0 	cmpeqi	zero,r2,211
10002870:	10002b54 	ori	zero,r2,173
10002874:	10002b60 	cmpeqi	zero,r2,173
10002878:	10002b60 	cmpeqi	zero,r2,173
1000287c:	10002b60 	cmpeqi	zero,r2,173
10002880:	10002b60 	cmpeqi	zero,r2,173
10002884:	10002b60 	cmpeqi	zero,r2,173
10002888:	10002b60 	cmpeqi	zero,r2,173
1000288c:	10002b60 	cmpeqi	zero,r2,173
10002890:	10002b60 	cmpeqi	zero,r2,173
10002894:	10002b60 	cmpeqi	zero,r2,173
10002898:	100034e0 	cmpeqi	zero,r2,211
1000289c:	100034e0 	cmpeqi	zero,r2,211
100028a0:	100034e0 	cmpeqi	zero,r2,211
100028a4:	100034e0 	cmpeqi	zero,r2,211
100028a8:	100034e0 	cmpeqi	zero,r2,211
100028ac:	100034e0 	cmpeqi	zero,r2,211
100028b0:	100034e0 	cmpeqi	zero,r2,211
100028b4:	100034e0 	cmpeqi	zero,r2,211
100028b8:	100034e0 	cmpeqi	zero,r2,211
100028bc:	100034e0 	cmpeqi	zero,r2,211
100028c0:	10002b9c 	xori	zero,r2,174
100028c4:	10002c64 	muli	zero,r2,177
100028c8:	100034e0 	cmpeqi	zero,r2,211
100028cc:	10002c64 	muli	zero,r2,177
100028d0:	100034e0 	cmpeqi	zero,r2,211
100028d4:	100034e0 	cmpeqi	zero,r2,211
100028d8:	100034e0 	cmpeqi	zero,r2,211
100028dc:	100034e0 	cmpeqi	zero,r2,211
100028e0:	10002d10 	cmplti	zero,r2,180
100028e4:	100034e0 	cmpeqi	zero,r2,211
100028e8:	100034e0 	cmpeqi	zero,r2,211
100028ec:	10002d1c 	xori	zero,r2,180
100028f0:	100034e0 	cmpeqi	zero,r2,211
100028f4:	100034e0 	cmpeqi	zero,r2,211
100028f8:	100034e0 	cmpeqi	zero,r2,211
100028fc:	100034e0 	cmpeqi	zero,r2,211
10002900:	100034e0 	cmpeqi	zero,r2,211
10002904:	100031a0 	cmpeqi	zero,r2,198
10002908:	100034e0 	cmpeqi	zero,r2,211
1000290c:	100034e0 	cmpeqi	zero,r2,211
10002910:	1000320c 	andi	zero,r2,200
10002914:	100034e0 	cmpeqi	zero,r2,211
10002918:	100034e0 	cmpeqi	zero,r2,211
1000291c:	100034e0 	cmpeqi	zero,r2,211
10002920:	100034e0 	cmpeqi	zero,r2,211
10002924:	100034e0 	cmpeqi	zero,r2,211
10002928:	100034e0 	cmpeqi	zero,r2,211
1000292c:	100034e0 	cmpeqi	zero,r2,211
10002930:	100034e0 	cmpeqi	zero,r2,211
10002934:	100034e0 	cmpeqi	zero,r2,211
10002938:	100034e0 	cmpeqi	zero,r2,211
1000293c:	10003484 	addi	zero,r2,210
10002940:	10003404 	addi	zero,r2,208
10002944:	10002c64 	muli	zero,r2,177
10002948:	10002c64 	muli	zero,r2,177
1000294c:	10002c64 	muli	zero,r2,177
10002950:	10003424 	muli	zero,r2,208
10002954:	10003404 	addi	zero,r2,208
10002958:	100034e0 	cmpeqi	zero,r2,211
1000295c:	100034e0 	cmpeqi	zero,r2,211
10002960:	10003430 	cmpltui	zero,r2,208
10002964:	100034e0 	cmpeqi	zero,r2,211
10002968:	10003444 	addi	zero,r2,209
1000296c:	100032c8 	cmpgei	zero,r2,203
10002970:	100029b0 	cmpltui	zero,r2,166
10002974:	10003300 	call	11000330 <_gp+0xfe41dc>
10002978:	100034e0 	cmpeqi	zero,r2,211
1000297c:	1000330c 	andi	zero,r2,204
10002980:	100034e0 	cmpeqi	zero,r2,211
10002984:	10003370 	cmpltui	zero,r2,205
10002988:	100034e0 	cmpeqi	zero,r2,211
1000298c:	100034e0 	cmpeqi	zero,r2,211
10002990:	10003390 	cmplti	zero,r2,206
10002994:	d8c03117 	ldw	r3,196(sp)
10002998:	d8802e15 	stw	r2,184(sp)
1000299c:	00c7c83a 	sub	r3,zero,r3
100029a0:	d8c03115 	stw	r3,196(sp)
100029a4:	84000114 	ori	r16,r16,4
100029a8:	ac400007 	ldb	r17,0(r21)
100029ac:	003f9706 	br	1000280c <__alt_data_end+0xf800280c>
100029b0:	00800c04 	movi	r2,48
100029b4:	d8802705 	stb	r2,156(sp)
100029b8:	00801e04 	movi	r2,120
100029bc:	d8802745 	stb	r2,157(sp)
100029c0:	d9002a17 	ldw	r4,168(sp)
100029c4:	d8802e17 	ldw	r2,184(sp)
100029c8:	d8002785 	stb	zero,158(sp)
100029cc:	e011883a 	mov	r8,fp
100029d0:	10c00104 	addi	r3,r2,4
100029d4:	14c00017 	ldw	r19,0(r2)
100029d8:	002d883a 	mov	r22,zero
100029dc:	80800094 	ori	r2,r16,2
100029e0:	2002ca16 	blt	r4,zero,1000350c <___vfprintf_internal_r+0xe88>
100029e4:	00bfdfc4 	movi	r2,-129
100029e8:	80a4703a 	and	r18,r16,r2
100029ec:	d8c02e15 	stw	r3,184(sp)
100029f0:	94800094 	ori	r18,r18,2
100029f4:	9802b41e 	bne	r19,zero,100034c8 <___vfprintf_internal_r+0xe44>
100029f8:	01440074 	movhi	r5,4097
100029fc:	2948f404 	addi	r5,r5,9168
10002a00:	d9403915 	stw	r5,228(sp)
10002a04:	04401e04 	movi	r17,120
10002a08:	d8802a17 	ldw	r2,168(sp)
10002a0c:	0039883a 	mov	fp,zero
10002a10:	1001fa26 	beq	r2,zero,100031fc <___vfprintf_internal_r+0xb78>
10002a14:	0027883a 	mov	r19,zero
10002a18:	002d883a 	mov	r22,zero
10002a1c:	00021906 	br	10003284 <___vfprintf_internal_r+0xc00>
10002a20:	d9002d17 	ldw	r4,180(sp)
10002a24:	b80b883a 	mov	r5,r23
10002a28:	0004a380 	call	10004a38 <__swsetup_r>
10002a2c:	1005dc1e 	bne	r2,zero,100041a0 <___vfprintf_internal_r+0x1b1c>
10002a30:	b880030b 	ldhu	r2,12(r23)
10002a34:	00c00284 	movi	r3,10
10002a38:	1080068c 	andi	r2,r2,26
10002a3c:	10ff3a1e 	bne	r2,r3,10002728 <__alt_data_end+0xf8002728>
10002a40:	b880038f 	ldh	r2,14(r23)
10002a44:	103f3816 	blt	r2,zero,10002728 <__alt_data_end+0xf8002728>
10002a48:	d9c02e17 	ldw	r7,184(sp)
10002a4c:	d9002d17 	ldw	r4,180(sp)
10002a50:	a80d883a 	mov	r6,r21
10002a54:	b80b883a 	mov	r5,r23
10002a58:	000497c0 	call	1000497c <__sbprintf>
10002a5c:	00001106 	br	10002aa4 <___vfprintf_internal_r+0x420>
10002a60:	d9002d17 	ldw	r4,180(sp)
10002a64:	d9801e04 	addi	r6,sp,120
10002a68:	b80b883a 	mov	r5,r23
10002a6c:	0009e640 	call	10009e64 <__sprint_r>
10002a70:	1000081e 	bne	r2,zero,10002a94 <___vfprintf_internal_r+0x410>
10002a74:	da000404 	addi	r8,sp,16
10002a78:	003f5106 	br	100027c0 <__alt_data_end+0xf80027c0>
10002a7c:	d8802017 	ldw	r2,128(sp)
10002a80:	10000426 	beq	r2,zero,10002a94 <___vfprintf_internal_r+0x410>
10002a84:	d9002d17 	ldw	r4,180(sp)
10002a88:	d9801e04 	addi	r6,sp,120
10002a8c:	b80b883a 	mov	r5,r23
10002a90:	0009e640 	call	10009e64 <__sprint_r>
10002a94:	b880030b 	ldhu	r2,12(r23)
10002a98:	1080100c 	andi	r2,r2,64
10002a9c:	1005c01e 	bne	r2,zero,100041a0 <___vfprintf_internal_r+0x1b1c>
10002aa0:	d8802f17 	ldw	r2,188(sp)
10002aa4:	dfc04717 	ldw	ra,284(sp)
10002aa8:	df004617 	ldw	fp,280(sp)
10002aac:	ddc04517 	ldw	r23,276(sp)
10002ab0:	dd804417 	ldw	r22,272(sp)
10002ab4:	dd404317 	ldw	r21,268(sp)
10002ab8:	dd004217 	ldw	r20,264(sp)
10002abc:	dcc04117 	ldw	r19,260(sp)
10002ac0:	dc804017 	ldw	r18,256(sp)
10002ac4:	dc403f17 	ldw	r17,252(sp)
10002ac8:	dc003e17 	ldw	r16,248(sp)
10002acc:	dec04804 	addi	sp,sp,288
10002ad0:	f800283a 	ret
10002ad4:	d9002d17 	ldw	r4,180(sp)
10002ad8:	0006a440 	call	10006a44 <__sinit>
10002adc:	003f0206 	br	100026e8 <__alt_data_end+0xf80026e8>
10002ae0:	d9002e17 	ldw	r4,184(sp)
10002ae4:	d9402e17 	ldw	r5,184(sp)
10002ae8:	21000017 	ldw	r4,0(r4)
10002aec:	28800104 	addi	r2,r5,4
10002af0:	d9003115 	stw	r4,196(sp)
10002af4:	203fa716 	blt	r4,zero,10002994 <__alt_data_end+0xf8002994>
10002af8:	d8802e15 	stw	r2,184(sp)
10002afc:	ac400007 	ldb	r17,0(r21)
10002b00:	003f4206 	br	1000280c <__alt_data_end+0xf800280c>
10002b04:	ac400007 	ldb	r17,0(r21)
10002b08:	01000a84 	movi	r4,42
10002b0c:	a8c00044 	addi	r3,r21,1
10002b10:	89075826 	beq	r17,r4,10004874 <___vfprintf_internal_r+0x21f0>
10002b14:	8cbff404 	addi	r18,r17,-48
10002b18:	b486ae36 	bltu	r22,r18,100045d4 <___vfprintf_internal_r+0x1f50>
10002b1c:	0009883a 	mov	r4,zero
10002b20:	1823883a 	mov	r17,r3
10002b24:	01400284 	movi	r5,10
10002b28:	000cb200 	call	1000cb20 <__mulsi3>
10002b2c:	88c00007 	ldb	r3,0(r17)
10002b30:	1489883a 	add	r4,r2,r18
10002b34:	8d400044 	addi	r21,r17,1
10002b38:	1cbff404 	addi	r18,r3,-48
10002b3c:	a823883a 	mov	r17,r21
10002b40:	b4bff82e 	bgeu	r22,r18,10002b24 <__alt_data_end+0xf8002b24>
10002b44:	1823883a 	mov	r17,r3
10002b48:	2005f616 	blt	r4,zero,10004324 <___vfprintf_internal_r+0x1ca0>
10002b4c:	d9002a15 	stw	r4,168(sp)
10002b50:	003f2f06 	br	10002810 <__alt_data_end+0xf8002810>
10002b54:	84002014 	ori	r16,r16,128
10002b58:	ac400007 	ldb	r17,0(r21)
10002b5c:	003f2b06 	br	1000280c <__alt_data_end+0xf800280c>
10002b60:	8cbff404 	addi	r18,r17,-48
10002b64:	d8003115 	stw	zero,196(sp)
10002b68:	0009883a 	mov	r4,zero
10002b6c:	a823883a 	mov	r17,r21
10002b70:	01400284 	movi	r5,10
10002b74:	000cb200 	call	1000cb20 <__mulsi3>
10002b78:	88c00007 	ldb	r3,0(r17)
10002b7c:	9089883a 	add	r4,r18,r2
10002b80:	ad400044 	addi	r21,r21,1
10002b84:	1cbff404 	addi	r18,r3,-48
10002b88:	a823883a 	mov	r17,r21
10002b8c:	b4bff82e 	bgeu	r22,r18,10002b70 <__alt_data_end+0xf8002b70>
10002b90:	1823883a 	mov	r17,r3
10002b94:	d9003115 	stw	r4,196(sp)
10002b98:	003f1d06 	br	10002810 <__alt_data_end+0xf8002810>
10002b9c:	8025883a 	mov	r18,r16
10002ba0:	dc002903 	ldbu	r16,164(sp)
10002ba4:	e011883a 	mov	r8,fp
10002ba8:	84003fcc 	andi	r16,r16,255
10002bac:	8007531e 	bne	r16,zero,100048fc <___vfprintf_internal_r+0x2278>
10002bb0:	94800414 	ori	r18,r18,16
10002bb4:	9080080c 	andi	r2,r18,32
10002bb8:	1003a326 	beq	r2,zero,10003a48 <___vfprintf_internal_r+0x13c4>
10002bbc:	d9002e17 	ldw	r4,184(sp)
10002bc0:	20800117 	ldw	r2,4(r4)
10002bc4:	24c00017 	ldw	r19,0(r4)
10002bc8:	21000204 	addi	r4,r4,8
10002bcc:	d9002e15 	stw	r4,184(sp)
10002bd0:	102d883a 	mov	r22,r2
10002bd4:	10047316 	blt	r2,zero,10003da4 <___vfprintf_internal_r+0x1720>
10002bd8:	d9002a17 	ldw	r4,168(sp)
10002bdc:	df002783 	ldbu	fp,158(sp)
10002be0:	2003e416 	blt	r4,zero,10003b74 <___vfprintf_internal_r+0x14f0>
10002be4:	00ffdfc4 	movi	r3,-129
10002be8:	9d84b03a 	or	r2,r19,r22
10002bec:	90e4703a 	and	r18,r18,r3
10002bf0:	10018026 	beq	r2,zero,100031f4 <___vfprintf_internal_r+0xb70>
10002bf4:	b003ab26 	beq	r22,zero,10003aa4 <___vfprintf_internal_r+0x1420>
10002bf8:	dc402915 	stw	r17,164(sp)
10002bfc:	dc001e04 	addi	r16,sp,120
10002c00:	b023883a 	mov	r17,r22
10002c04:	402d883a 	mov	r22,r8
10002c08:	9809883a 	mov	r4,r19
10002c0c:	880b883a 	mov	r5,r17
10002c10:	01800284 	movi	r6,10
10002c14:	000f883a 	mov	r7,zero
10002c18:	000c3a80 	call	1000c3a8 <__umoddi3>
10002c1c:	10800c04 	addi	r2,r2,48
10002c20:	843fffc4 	addi	r16,r16,-1
10002c24:	9809883a 	mov	r4,r19
10002c28:	880b883a 	mov	r5,r17
10002c2c:	80800005 	stb	r2,0(r16)
10002c30:	01800284 	movi	r6,10
10002c34:	000f883a 	mov	r7,zero
10002c38:	000bdac0 	call	1000bdac <__udivdi3>
10002c3c:	1027883a 	mov	r19,r2
10002c40:	10c4b03a 	or	r2,r2,r3
10002c44:	1823883a 	mov	r17,r3
10002c48:	103fef1e 	bne	r2,zero,10002c08 <__alt_data_end+0xf8002c08>
10002c4c:	d8c02817 	ldw	r3,160(sp)
10002c50:	dc402917 	ldw	r17,164(sp)
10002c54:	b011883a 	mov	r8,r22
10002c58:	1c07c83a 	sub	r3,r3,r16
10002c5c:	d8c02b15 	stw	r3,172(sp)
10002c60:	00005f06 	br	10002de0 <___vfprintf_internal_r+0x75c>
10002c64:	8025883a 	mov	r18,r16
10002c68:	dc002903 	ldbu	r16,164(sp)
10002c6c:	e011883a 	mov	r8,fp
10002c70:	84003fcc 	andi	r16,r16,255
10002c74:	80071e1e 	bne	r16,zero,100048f0 <___vfprintf_internal_r+0x226c>
10002c78:	9080020c 	andi	r2,r18,8
10002c7c:	1004af26 	beq	r2,zero,10003f3c <___vfprintf_internal_r+0x18b8>
10002c80:	d9002e17 	ldw	r4,184(sp)
10002c84:	d9402e17 	ldw	r5,184(sp)
10002c88:	d8802e17 	ldw	r2,184(sp)
10002c8c:	21000017 	ldw	r4,0(r4)
10002c90:	29400117 	ldw	r5,4(r5)
10002c94:	10800204 	addi	r2,r2,8
10002c98:	d9003615 	stw	r4,216(sp)
10002c9c:	d9403815 	stw	r5,224(sp)
10002ca0:	d8802e15 	stw	r2,184(sp)
10002ca4:	d9003617 	ldw	r4,216(sp)
10002ca8:	d9403817 	ldw	r5,224(sp)
10002cac:	da003d15 	stw	r8,244(sp)
10002cb0:	04000044 	movi	r16,1
10002cb4:	0009a880 	call	10009a88 <__fpclassifyd>
10002cb8:	da003d17 	ldw	r8,244(sp)
10002cbc:	1404441e 	bne	r2,r16,10003dd0 <___vfprintf_internal_r+0x174c>
10002cc0:	d9003617 	ldw	r4,216(sp)
10002cc4:	d9403817 	ldw	r5,224(sp)
10002cc8:	000d883a 	mov	r6,zero
10002ccc:	000f883a 	mov	r7,zero
10002cd0:	000df280 	call	1000df28 <__ledf2>
10002cd4:	da003d17 	ldw	r8,244(sp)
10002cd8:	1005e316 	blt	r2,zero,10004468 <___vfprintf_internal_r+0x1de4>
10002cdc:	df002783 	ldbu	fp,158(sp)
10002ce0:	008011c4 	movi	r2,71
10002ce4:	1445580e 	bge	r2,r17,10004248 <___vfprintf_internal_r+0x1bc4>
10002ce8:	04040074 	movhi	r16,4097
10002cec:	8408ec04 	addi	r16,r16,9136
10002cf0:	00c000c4 	movi	r3,3
10002cf4:	00bfdfc4 	movi	r2,-129
10002cf8:	d8c02915 	stw	r3,164(sp)
10002cfc:	90a4703a 	and	r18,r18,r2
10002d00:	d8c02b15 	stw	r3,172(sp)
10002d04:	d8002a15 	stw	zero,168(sp)
10002d08:	d8003215 	stw	zero,200(sp)
10002d0c:	00003a06 	br	10002df8 <___vfprintf_internal_r+0x774>
10002d10:	84000214 	ori	r16,r16,8
10002d14:	ac400007 	ldb	r17,0(r21)
10002d18:	003ebc06 	br	1000280c <__alt_data_end+0xf800280c>
10002d1c:	8025883a 	mov	r18,r16
10002d20:	dc002903 	ldbu	r16,164(sp)
10002d24:	e011883a 	mov	r8,fp
10002d28:	84003fcc 	andi	r16,r16,255
10002d2c:	8007001e 	bne	r16,zero,10004930 <___vfprintf_internal_r+0x22ac>
10002d30:	94800414 	ori	r18,r18,16
10002d34:	9080080c 	andi	r2,r18,32
10002d38:	1002fa26 	beq	r2,zero,10003924 <___vfprintf_internal_r+0x12a0>
10002d3c:	d9002e17 	ldw	r4,184(sp)
10002d40:	d9402a17 	ldw	r5,168(sp)
10002d44:	d8002785 	stb	zero,158(sp)
10002d48:	20800204 	addi	r2,r4,8
10002d4c:	24c00017 	ldw	r19,0(r4)
10002d50:	25800117 	ldw	r22,4(r4)
10002d54:	2804b116 	blt	r5,zero,1000401c <___vfprintf_internal_r+0x1998>
10002d58:	013fdfc4 	movi	r4,-129
10002d5c:	9d86b03a 	or	r3,r19,r22
10002d60:	d8802e15 	stw	r2,184(sp)
10002d64:	9124703a 	and	r18,r18,r4
10002d68:	1802fb1e 	bne	r3,zero,10003958 <___vfprintf_internal_r+0x12d4>
10002d6c:	d8c02a17 	ldw	r3,168(sp)
10002d70:	0039883a 	mov	fp,zero
10002d74:	1805e526 	beq	r3,zero,1000450c <___vfprintf_internal_r+0x1e88>
10002d78:	0027883a 	mov	r19,zero
10002d7c:	002d883a 	mov	r22,zero
10002d80:	dc001e04 	addi	r16,sp,120
10002d84:	9806d0fa 	srli	r3,r19,3
10002d88:	b008977a 	slli	r4,r22,29
10002d8c:	b02cd0fa 	srli	r22,r22,3
10002d90:	9cc001cc 	andi	r19,r19,7
10002d94:	98800c04 	addi	r2,r19,48
10002d98:	843fffc4 	addi	r16,r16,-1
10002d9c:	20e6b03a 	or	r19,r4,r3
10002da0:	80800005 	stb	r2,0(r16)
10002da4:	9d86b03a 	or	r3,r19,r22
10002da8:	183ff61e 	bne	r3,zero,10002d84 <__alt_data_end+0xf8002d84>
10002dac:	90c0004c 	andi	r3,r18,1
10002db0:	18014126 	beq	r3,zero,100032b8 <___vfprintf_internal_r+0xc34>
10002db4:	10803fcc 	andi	r2,r2,255
10002db8:	1080201c 	xori	r2,r2,128
10002dbc:	10bfe004 	addi	r2,r2,-128
10002dc0:	00c00c04 	movi	r3,48
10002dc4:	10c13c26 	beq	r2,r3,100032b8 <___vfprintf_internal_r+0xc34>
10002dc8:	80ffffc5 	stb	r3,-1(r16)
10002dcc:	d8c02817 	ldw	r3,160(sp)
10002dd0:	80bfffc4 	addi	r2,r16,-1
10002dd4:	1021883a 	mov	r16,r2
10002dd8:	1887c83a 	sub	r3,r3,r2
10002ddc:	d8c02b15 	stw	r3,172(sp)
10002de0:	d8802b17 	ldw	r2,172(sp)
10002de4:	d9002a17 	ldw	r4,168(sp)
10002de8:	1100010e 	bge	r2,r4,10002df0 <___vfprintf_internal_r+0x76c>
10002dec:	2005883a 	mov	r2,r4
10002df0:	d8802915 	stw	r2,164(sp)
10002df4:	d8003215 	stw	zero,200(sp)
10002df8:	e7003fcc 	andi	fp,fp,255
10002dfc:	e700201c 	xori	fp,fp,128
10002e00:	e73fe004 	addi	fp,fp,-128
10002e04:	e0000326 	beq	fp,zero,10002e14 <___vfprintf_internal_r+0x790>
10002e08:	d8c02917 	ldw	r3,164(sp)
10002e0c:	18c00044 	addi	r3,r3,1
10002e10:	d8c02915 	stw	r3,164(sp)
10002e14:	90c0008c 	andi	r3,r18,2
10002e18:	d8c02c15 	stw	r3,176(sp)
10002e1c:	18000326 	beq	r3,zero,10002e2c <___vfprintf_internal_r+0x7a8>
10002e20:	d8c02917 	ldw	r3,164(sp)
10002e24:	18c00084 	addi	r3,r3,2
10002e28:	d8c02915 	stw	r3,164(sp)
10002e2c:	90c0210c 	andi	r3,r18,132
10002e30:	d8c03015 	stw	r3,192(sp)
10002e34:	1801c51e 	bne	r3,zero,1000354c <___vfprintf_internal_r+0xec8>
10002e38:	d9003117 	ldw	r4,196(sp)
10002e3c:	d8c02917 	ldw	r3,164(sp)
10002e40:	20e7c83a 	sub	r19,r4,r3
10002e44:	04c1c10e 	bge	zero,r19,1000354c <___vfprintf_internal_r+0xec8>
10002e48:	02400404 	movi	r9,16
10002e4c:	d8c02017 	ldw	r3,128(sp)
10002e50:	d8801f17 	ldw	r2,124(sp)
10002e54:	4cc52f0e 	bge	r9,r19,10004314 <___vfprintf_internal_r+0x1c90>
10002e58:	01440074 	movhi	r5,4097
10002e5c:	2948ff84 	addi	r5,r5,9214
10002e60:	dc403b15 	stw	r17,236(sp)
10002e64:	d9403515 	stw	r5,212(sp)
10002e68:	9823883a 	mov	r17,r19
10002e6c:	482d883a 	mov	r22,r9
10002e70:	9027883a 	mov	r19,r18
10002e74:	070001c4 	movi	fp,7
10002e78:	8025883a 	mov	r18,r16
10002e7c:	dc002d17 	ldw	r16,180(sp)
10002e80:	00000306 	br	10002e90 <___vfprintf_internal_r+0x80c>
10002e84:	8c7ffc04 	addi	r17,r17,-16
10002e88:	42000204 	addi	r8,r8,8
10002e8c:	b440130e 	bge	r22,r17,10002edc <___vfprintf_internal_r+0x858>
10002e90:	01040074 	movhi	r4,4097
10002e94:	18c00404 	addi	r3,r3,16
10002e98:	10800044 	addi	r2,r2,1
10002e9c:	2108ff84 	addi	r4,r4,9214
10002ea0:	41000015 	stw	r4,0(r8)
10002ea4:	45800115 	stw	r22,4(r8)
10002ea8:	d8c02015 	stw	r3,128(sp)
10002eac:	d8801f15 	stw	r2,124(sp)
10002eb0:	e0bff40e 	bge	fp,r2,10002e84 <__alt_data_end+0xf8002e84>
10002eb4:	d9801e04 	addi	r6,sp,120
10002eb8:	b80b883a 	mov	r5,r23
10002ebc:	8009883a 	mov	r4,r16
10002ec0:	0009e640 	call	10009e64 <__sprint_r>
10002ec4:	103ef31e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10002ec8:	8c7ffc04 	addi	r17,r17,-16
10002ecc:	d8c02017 	ldw	r3,128(sp)
10002ed0:	d8801f17 	ldw	r2,124(sp)
10002ed4:	da000404 	addi	r8,sp,16
10002ed8:	b47fed16 	blt	r22,r17,10002e90 <__alt_data_end+0xf8002e90>
10002edc:	9021883a 	mov	r16,r18
10002ee0:	9825883a 	mov	r18,r19
10002ee4:	8827883a 	mov	r19,r17
10002ee8:	dc403b17 	ldw	r17,236(sp)
10002eec:	d9403517 	ldw	r5,212(sp)
10002ef0:	98c7883a 	add	r3,r19,r3
10002ef4:	10800044 	addi	r2,r2,1
10002ef8:	41400015 	stw	r5,0(r8)
10002efc:	44c00115 	stw	r19,4(r8)
10002f00:	d8c02015 	stw	r3,128(sp)
10002f04:	d8801f15 	stw	r2,124(sp)
10002f08:	010001c4 	movi	r4,7
10002f0c:	2082c516 	blt	r4,r2,10003a24 <___vfprintf_internal_r+0x13a0>
10002f10:	df002787 	ldb	fp,158(sp)
10002f14:	42000204 	addi	r8,r8,8
10002f18:	e0000c26 	beq	fp,zero,10002f4c <___vfprintf_internal_r+0x8c8>
10002f1c:	d8801f17 	ldw	r2,124(sp)
10002f20:	d9002784 	addi	r4,sp,158
10002f24:	18c00044 	addi	r3,r3,1
10002f28:	10800044 	addi	r2,r2,1
10002f2c:	41000015 	stw	r4,0(r8)
10002f30:	01000044 	movi	r4,1
10002f34:	41000115 	stw	r4,4(r8)
10002f38:	d8c02015 	stw	r3,128(sp)
10002f3c:	d8801f15 	stw	r2,124(sp)
10002f40:	010001c4 	movi	r4,7
10002f44:	20825e16 	blt	r4,r2,100038c0 <___vfprintf_internal_r+0x123c>
10002f48:	42000204 	addi	r8,r8,8
10002f4c:	d8802c17 	ldw	r2,176(sp)
10002f50:	10000c26 	beq	r2,zero,10002f84 <___vfprintf_internal_r+0x900>
10002f54:	d8801f17 	ldw	r2,124(sp)
10002f58:	d9002704 	addi	r4,sp,156
10002f5c:	18c00084 	addi	r3,r3,2
10002f60:	10800044 	addi	r2,r2,1
10002f64:	41000015 	stw	r4,0(r8)
10002f68:	01000084 	movi	r4,2
10002f6c:	41000115 	stw	r4,4(r8)
10002f70:	d8c02015 	stw	r3,128(sp)
10002f74:	d8801f15 	stw	r2,124(sp)
10002f78:	010001c4 	movi	r4,7
10002f7c:	20825816 	blt	r4,r2,100038e0 <___vfprintf_internal_r+0x125c>
10002f80:	42000204 	addi	r8,r8,8
10002f84:	d9003017 	ldw	r4,192(sp)
10002f88:	00802004 	movi	r2,128
10002f8c:	2081bb26 	beq	r4,r2,1000367c <___vfprintf_internal_r+0xff8>
10002f90:	d9402a17 	ldw	r5,168(sp)
10002f94:	d8802b17 	ldw	r2,172(sp)
10002f98:	28adc83a 	sub	r22,r5,r2
10002f9c:	0580310e 	bge	zero,r22,10003064 <___vfprintf_internal_r+0x9e0>
10002fa0:	07000404 	movi	fp,16
10002fa4:	d8801f17 	ldw	r2,124(sp)
10002fa8:	e584360e 	bge	fp,r22,10004084 <___vfprintf_internal_r+0x1a00>
10002fac:	01440074 	movhi	r5,4097
10002fb0:	2948fb84 	addi	r5,r5,9198
10002fb4:	dc402a15 	stw	r17,168(sp)
10002fb8:	d9402c15 	stw	r5,176(sp)
10002fbc:	b023883a 	mov	r17,r22
10002fc0:	04c001c4 	movi	r19,7
10002fc4:	a82d883a 	mov	r22,r21
10002fc8:	902b883a 	mov	r21,r18
10002fcc:	8025883a 	mov	r18,r16
10002fd0:	dc002d17 	ldw	r16,180(sp)
10002fd4:	00000306 	br	10002fe4 <___vfprintf_internal_r+0x960>
10002fd8:	8c7ffc04 	addi	r17,r17,-16
10002fdc:	42000204 	addi	r8,r8,8
10002fe0:	e440110e 	bge	fp,r17,10003028 <___vfprintf_internal_r+0x9a4>
10002fe4:	18c00404 	addi	r3,r3,16
10002fe8:	10800044 	addi	r2,r2,1
10002fec:	45000015 	stw	r20,0(r8)
10002ff0:	47000115 	stw	fp,4(r8)
10002ff4:	d8c02015 	stw	r3,128(sp)
10002ff8:	d8801f15 	stw	r2,124(sp)
10002ffc:	98bff60e 	bge	r19,r2,10002fd8 <__alt_data_end+0xf8002fd8>
10003000:	d9801e04 	addi	r6,sp,120
10003004:	b80b883a 	mov	r5,r23
10003008:	8009883a 	mov	r4,r16
1000300c:	0009e640 	call	10009e64 <__sprint_r>
10003010:	103ea01e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003014:	8c7ffc04 	addi	r17,r17,-16
10003018:	d8c02017 	ldw	r3,128(sp)
1000301c:	d8801f17 	ldw	r2,124(sp)
10003020:	da000404 	addi	r8,sp,16
10003024:	e47fef16 	blt	fp,r17,10002fe4 <__alt_data_end+0xf8002fe4>
10003028:	9021883a 	mov	r16,r18
1000302c:	a825883a 	mov	r18,r21
10003030:	b02b883a 	mov	r21,r22
10003034:	882d883a 	mov	r22,r17
10003038:	dc402a17 	ldw	r17,168(sp)
1000303c:	d9002c17 	ldw	r4,176(sp)
10003040:	1d87883a 	add	r3,r3,r22
10003044:	10800044 	addi	r2,r2,1
10003048:	41000015 	stw	r4,0(r8)
1000304c:	45800115 	stw	r22,4(r8)
10003050:	d8c02015 	stw	r3,128(sp)
10003054:	d8801f15 	stw	r2,124(sp)
10003058:	010001c4 	movi	r4,7
1000305c:	20821016 	blt	r4,r2,100038a0 <___vfprintf_internal_r+0x121c>
10003060:	42000204 	addi	r8,r8,8
10003064:	9080400c 	andi	r2,r18,256
10003068:	10013a1e 	bne	r2,zero,10003554 <___vfprintf_internal_r+0xed0>
1000306c:	d9402b17 	ldw	r5,172(sp)
10003070:	d8801f17 	ldw	r2,124(sp)
10003074:	44000015 	stw	r16,0(r8)
10003078:	1947883a 	add	r3,r3,r5
1000307c:	10800044 	addi	r2,r2,1
10003080:	41400115 	stw	r5,4(r8)
10003084:	d8c02015 	stw	r3,128(sp)
10003088:	d8801f15 	stw	r2,124(sp)
1000308c:	010001c4 	movi	r4,7
10003090:	2081f516 	blt	r4,r2,10003868 <___vfprintf_internal_r+0x11e4>
10003094:	42000204 	addi	r8,r8,8
10003098:	9480010c 	andi	r18,r18,4
1000309c:	90003226 	beq	r18,zero,10003168 <___vfprintf_internal_r+0xae4>
100030a0:	d9403117 	ldw	r5,196(sp)
100030a4:	d8802917 	ldw	r2,164(sp)
100030a8:	28a1c83a 	sub	r16,r5,r2
100030ac:	04002e0e 	bge	zero,r16,10003168 <___vfprintf_internal_r+0xae4>
100030b0:	04400404 	movi	r17,16
100030b4:	d8801f17 	ldw	r2,124(sp)
100030b8:	8c04c40e 	bge	r17,r16,100043cc <___vfprintf_internal_r+0x1d48>
100030bc:	01440074 	movhi	r5,4097
100030c0:	2948ff84 	addi	r5,r5,9214
100030c4:	d9403515 	stw	r5,212(sp)
100030c8:	048001c4 	movi	r18,7
100030cc:	dcc02d17 	ldw	r19,180(sp)
100030d0:	00000306 	br	100030e0 <___vfprintf_internal_r+0xa5c>
100030d4:	843ffc04 	addi	r16,r16,-16
100030d8:	42000204 	addi	r8,r8,8
100030dc:	8c00130e 	bge	r17,r16,1000312c <___vfprintf_internal_r+0xaa8>
100030e0:	01040074 	movhi	r4,4097
100030e4:	18c00404 	addi	r3,r3,16
100030e8:	10800044 	addi	r2,r2,1
100030ec:	2108ff84 	addi	r4,r4,9214
100030f0:	41000015 	stw	r4,0(r8)
100030f4:	44400115 	stw	r17,4(r8)
100030f8:	d8c02015 	stw	r3,128(sp)
100030fc:	d8801f15 	stw	r2,124(sp)
10003100:	90bff40e 	bge	r18,r2,100030d4 <__alt_data_end+0xf80030d4>
10003104:	d9801e04 	addi	r6,sp,120
10003108:	b80b883a 	mov	r5,r23
1000310c:	9809883a 	mov	r4,r19
10003110:	0009e640 	call	10009e64 <__sprint_r>
10003114:	103e5f1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003118:	843ffc04 	addi	r16,r16,-16
1000311c:	d8c02017 	ldw	r3,128(sp)
10003120:	d8801f17 	ldw	r2,124(sp)
10003124:	da000404 	addi	r8,sp,16
10003128:	8c3fed16 	blt	r17,r16,100030e0 <__alt_data_end+0xf80030e0>
1000312c:	d9403517 	ldw	r5,212(sp)
10003130:	1c07883a 	add	r3,r3,r16
10003134:	10800044 	addi	r2,r2,1
10003138:	41400015 	stw	r5,0(r8)
1000313c:	44000115 	stw	r16,4(r8)
10003140:	d8c02015 	stw	r3,128(sp)
10003144:	d8801f15 	stw	r2,124(sp)
10003148:	010001c4 	movi	r4,7
1000314c:	2080060e 	bge	r4,r2,10003168 <___vfprintf_internal_r+0xae4>
10003150:	d9002d17 	ldw	r4,180(sp)
10003154:	d9801e04 	addi	r6,sp,120
10003158:	b80b883a 	mov	r5,r23
1000315c:	0009e640 	call	10009e64 <__sprint_r>
10003160:	103e4c1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003164:	d8c02017 	ldw	r3,128(sp)
10003168:	d8803117 	ldw	r2,196(sp)
1000316c:	d9002917 	ldw	r4,164(sp)
10003170:	1100010e 	bge	r2,r4,10003178 <___vfprintf_internal_r+0xaf4>
10003174:	2005883a 	mov	r2,r4
10003178:	d9402f17 	ldw	r5,188(sp)
1000317c:	288b883a 	add	r5,r5,r2
10003180:	d9402f15 	stw	r5,188(sp)
10003184:	1801c01e 	bne	r3,zero,10003888 <___vfprintf_internal_r+0x1204>
10003188:	a8800007 	ldb	r2,0(r21)
1000318c:	d8001f15 	stw	zero,124(sp)
10003190:	da000404 	addi	r8,sp,16
10003194:	103d751e 	bne	r2,zero,1000276c <__alt_data_end+0xf800276c>
10003198:	a823883a 	mov	r17,r21
1000319c:	003d8b06 	br	100027cc <__alt_data_end+0xf80027cc>
100031a0:	8025883a 	mov	r18,r16
100031a4:	dc002903 	ldbu	r16,164(sp)
100031a8:	e011883a 	mov	r8,fp
100031ac:	84003fcc 	andi	r16,r16,255
100031b0:	8005e51e 	bne	r16,zero,10004948 <___vfprintf_internal_r+0x22c4>
100031b4:	94800414 	ori	r18,r18,16
100031b8:	9080080c 	andi	r2,r18,32
100031bc:	10022b26 	beq	r2,zero,10003a6c <___vfprintf_internal_r+0x13e8>
100031c0:	d9002e17 	ldw	r4,184(sp)
100031c4:	d9402a17 	ldw	r5,168(sp)
100031c8:	d8002785 	stb	zero,158(sp)
100031cc:	20c00204 	addi	r3,r4,8
100031d0:	24c00017 	ldw	r19,0(r4)
100031d4:	25800117 	ldw	r22,4(r4)
100031d8:	28042e16 	blt	r5,zero,10004294 <___vfprintf_internal_r+0x1c10>
100031dc:	013fdfc4 	movi	r4,-129
100031e0:	9d84b03a 	or	r2,r19,r22
100031e4:	d8c02e15 	stw	r3,184(sp)
100031e8:	9124703a 	and	r18,r18,r4
100031ec:	0039883a 	mov	fp,zero
100031f0:	103e801e 	bne	r2,zero,10002bf4 <__alt_data_end+0xf8002bf4>
100031f4:	d9002a17 	ldw	r4,168(sp)
100031f8:	2002e01e 	bne	r4,zero,10003d7c <___vfprintf_internal_r+0x16f8>
100031fc:	d8002a15 	stw	zero,168(sp)
10003200:	d8002b15 	stw	zero,172(sp)
10003204:	dc001e04 	addi	r16,sp,120
10003208:	003ef506 	br	10002de0 <__alt_data_end+0xf8002de0>
1000320c:	8025883a 	mov	r18,r16
10003210:	dc002903 	ldbu	r16,164(sp)
10003214:	e011883a 	mov	r8,fp
10003218:	84003fcc 	andi	r16,r16,255
1000321c:	8005ba1e 	bne	r16,zero,10004908 <___vfprintf_internal_r+0x2284>
10003220:	01040074 	movhi	r4,4097
10003224:	2108ef04 	addi	r4,r4,9148
10003228:	d9003915 	stw	r4,228(sp)
1000322c:	9080080c 	andi	r2,r18,32
10003230:	10006126 	beq	r2,zero,100033b8 <___vfprintf_internal_r+0xd34>
10003234:	d9402e17 	ldw	r5,184(sp)
10003238:	2cc00017 	ldw	r19,0(r5)
1000323c:	2d800117 	ldw	r22,4(r5)
10003240:	29400204 	addi	r5,r5,8
10003244:	d9402e15 	stw	r5,184(sp)
10003248:	9080004c 	andi	r2,r18,1
1000324c:	1001ac26 	beq	r2,zero,10003900 <___vfprintf_internal_r+0x127c>
10003250:	9d84b03a 	or	r2,r19,r22
10003254:	10038526 	beq	r2,zero,1000406c <___vfprintf_internal_r+0x19e8>
10003258:	d8c02a17 	ldw	r3,168(sp)
1000325c:	00800c04 	movi	r2,48
10003260:	d8802705 	stb	r2,156(sp)
10003264:	dc402745 	stb	r17,157(sp)
10003268:	d8002785 	stb	zero,158(sp)
1000326c:	90800094 	ori	r2,r18,2
10003270:	18047916 	blt	r3,zero,10004458 <___vfprintf_internal_r+0x1dd4>
10003274:	00bfdfc4 	movi	r2,-129
10003278:	90a4703a 	and	r18,r18,r2
1000327c:	94800094 	ori	r18,r18,2
10003280:	0039883a 	mov	fp,zero
10003284:	d9003917 	ldw	r4,228(sp)
10003288:	dc001e04 	addi	r16,sp,120
1000328c:	988003cc 	andi	r2,r19,15
10003290:	b006973a 	slli	r3,r22,28
10003294:	2085883a 	add	r2,r4,r2
10003298:	9826d13a 	srli	r19,r19,4
1000329c:	10800003 	ldbu	r2,0(r2)
100032a0:	b02cd13a 	srli	r22,r22,4
100032a4:	843fffc4 	addi	r16,r16,-1
100032a8:	1ce6b03a 	or	r19,r3,r19
100032ac:	80800005 	stb	r2,0(r16)
100032b0:	9d84b03a 	or	r2,r19,r22
100032b4:	103ff51e 	bne	r2,zero,1000328c <__alt_data_end+0xf800328c>
100032b8:	d8c02817 	ldw	r3,160(sp)
100032bc:	1c07c83a 	sub	r3,r3,r16
100032c0:	d8c02b15 	stw	r3,172(sp)
100032c4:	003ec606 	br	10002de0 <__alt_data_end+0xf8002de0>
100032c8:	8025883a 	mov	r18,r16
100032cc:	dc002903 	ldbu	r16,164(sp)
100032d0:	e011883a 	mov	r8,fp
100032d4:	84003fcc 	andi	r16,r16,255
100032d8:	803e9626 	beq	r16,zero,10002d34 <__alt_data_end+0xf8002d34>
100032dc:	d8c02b03 	ldbu	r3,172(sp)
100032e0:	d8c02785 	stb	r3,158(sp)
100032e4:	003e9306 	br	10002d34 <__alt_data_end+0xf8002d34>
100032e8:	00c00044 	movi	r3,1
100032ec:	d8c02905 	stb	r3,164(sp)
100032f0:	00c00ac4 	movi	r3,43
100032f4:	d8c02b05 	stb	r3,172(sp)
100032f8:	ac400007 	ldb	r17,0(r21)
100032fc:	003d4306 	br	1000280c <__alt_data_end+0xf800280c>
10003300:	84000814 	ori	r16,r16,32
10003304:	ac400007 	ldb	r17,0(r21)
10003308:	003d4006 	br	1000280c <__alt_data_end+0xf800280c>
1000330c:	d8802e17 	ldw	r2,184(sp)
10003310:	8025883a 	mov	r18,r16
10003314:	d8002785 	stb	zero,158(sp)
10003318:	14000017 	ldw	r16,0(r2)
1000331c:	e011883a 	mov	r8,fp
10003320:	14c00104 	addi	r19,r2,4
10003324:	80042d26 	beq	r16,zero,100043dc <___vfprintf_internal_r+0x1d58>
10003328:	d8c02a17 	ldw	r3,168(sp)
1000332c:	1803e416 	blt	r3,zero,100042c0 <___vfprintf_internal_r+0x1c3c>
10003330:	180d883a 	mov	r6,r3
10003334:	000b883a 	mov	r5,zero
10003338:	8009883a 	mov	r4,r16
1000333c:	df003d15 	stw	fp,244(sp)
10003340:	0007fbc0 	call	10007fbc <memchr>
10003344:	da003d17 	ldw	r8,244(sp)
10003348:	10046826 	beq	r2,zero,100044ec <___vfprintf_internal_r+0x1e68>
1000334c:	1405c83a 	sub	r2,r2,r16
10003350:	d8802b15 	stw	r2,172(sp)
10003354:	1003e016 	blt	r2,zero,100042d8 <___vfprintf_internal_r+0x1c54>
10003358:	df002783 	ldbu	fp,158(sp)
1000335c:	d8802915 	stw	r2,164(sp)
10003360:	dcc02e15 	stw	r19,184(sp)
10003364:	d8002a15 	stw	zero,168(sp)
10003368:	d8003215 	stw	zero,200(sp)
1000336c:	003ea206 	br	10002df8 <__alt_data_end+0xf8002df8>
10003370:	8025883a 	mov	r18,r16
10003374:	dc002903 	ldbu	r16,164(sp)
10003378:	e011883a 	mov	r8,fp
1000337c:	84003fcc 	andi	r16,r16,255
10003380:	803f8d26 	beq	r16,zero,100031b8 <__alt_data_end+0xf80031b8>
10003384:	d8c02b03 	ldbu	r3,172(sp)
10003388:	d8c02785 	stb	r3,158(sp)
1000338c:	003f8a06 	br	100031b8 <__alt_data_end+0xf80031b8>
10003390:	8025883a 	mov	r18,r16
10003394:	dc002903 	ldbu	r16,164(sp)
10003398:	e011883a 	mov	r8,fp
1000339c:	84003fcc 	andi	r16,r16,255
100033a0:	8005661e 	bne	r16,zero,1000493c <___vfprintf_internal_r+0x22b8>
100033a4:	01040074 	movhi	r4,4097
100033a8:	2108f404 	addi	r4,r4,9168
100033ac:	d9003915 	stw	r4,228(sp)
100033b0:	9080080c 	andi	r2,r18,32
100033b4:	103f9f1e 	bne	r2,zero,10003234 <__alt_data_end+0xf8003234>
100033b8:	9080040c 	andi	r2,r18,16
100033bc:	1002eb26 	beq	r2,zero,10003f6c <___vfprintf_internal_r+0x18e8>
100033c0:	d8802e17 	ldw	r2,184(sp)
100033c4:	002d883a 	mov	r22,zero
100033c8:	14c00017 	ldw	r19,0(r2)
100033cc:	10800104 	addi	r2,r2,4
100033d0:	d8802e15 	stw	r2,184(sp)
100033d4:	003f9c06 	br	10003248 <__alt_data_end+0xf8003248>
100033d8:	d8802b07 	ldb	r2,172(sp)
100033dc:	1002e11e 	bne	r2,zero,10003f64 <___vfprintf_internal_r+0x18e0>
100033e0:	00c00044 	movi	r3,1
100033e4:	d8c02905 	stb	r3,164(sp)
100033e8:	00c00804 	movi	r3,32
100033ec:	d8c02b05 	stb	r3,172(sp)
100033f0:	ac400007 	ldb	r17,0(r21)
100033f4:	003d0506 	br	1000280c <__alt_data_end+0xf800280c>
100033f8:	84000054 	ori	r16,r16,1
100033fc:	ac400007 	ldb	r17,0(r21)
10003400:	003d0206 	br	1000280c <__alt_data_end+0xf800280c>
10003404:	8025883a 	mov	r18,r16
10003408:	dc002903 	ldbu	r16,164(sp)
1000340c:	e011883a 	mov	r8,fp
10003410:	84003fcc 	andi	r16,r16,255
10003414:	803de726 	beq	r16,zero,10002bb4 <__alt_data_end+0xf8002bb4>
10003418:	d8c02b03 	ldbu	r3,172(sp)
1000341c:	d8c02785 	stb	r3,158(sp)
10003420:	003de406 	br	10002bb4 <__alt_data_end+0xf8002bb4>
10003424:	84001014 	ori	r16,r16,64
10003428:	ac400007 	ldb	r17,0(r21)
1000342c:	003cf706 	br	1000280c <__alt_data_end+0xf800280c>
10003430:	ac400007 	ldb	r17,0(r21)
10003434:	00801b04 	movi	r2,108
10003438:	88838f26 	beq	r17,r2,10004278 <___vfprintf_internal_r+0x1bf4>
1000343c:	84000414 	ori	r16,r16,16
10003440:	003cf206 	br	1000280c <__alt_data_end+0xf800280c>
10003444:	8025883a 	mov	r18,r16
10003448:	dc002903 	ldbu	r16,164(sp)
1000344c:	e011883a 	mov	r8,fp
10003450:	84003fcc 	andi	r16,r16,255
10003454:	80053f1e 	bne	r16,zero,10004954 <___vfprintf_internal_r+0x22d0>
10003458:	9080080c 	andi	r2,r18,32
1000345c:	1002d226 	beq	r2,zero,10003fa8 <___vfprintf_internal_r+0x1924>
10003460:	d9002e17 	ldw	r4,184(sp)
10003464:	d9402f17 	ldw	r5,188(sp)
10003468:	20800017 	ldw	r2,0(r4)
1000346c:	2807d7fa 	srai	r3,r5,31
10003470:	21000104 	addi	r4,r4,4
10003474:	d9002e15 	stw	r4,184(sp)
10003478:	11400015 	stw	r5,0(r2)
1000347c:	10c00115 	stw	r3,4(r2)
10003480:	003cb806 	br	10002764 <__alt_data_end+0xf8002764>
10003484:	d8c02e17 	ldw	r3,184(sp)
10003488:	d9002e17 	ldw	r4,184(sp)
1000348c:	8025883a 	mov	r18,r16
10003490:	18800017 	ldw	r2,0(r3)
10003494:	21000104 	addi	r4,r4,4
10003498:	00c00044 	movi	r3,1
1000349c:	e011883a 	mov	r8,fp
100034a0:	d8c02915 	stw	r3,164(sp)
100034a4:	d8002785 	stb	zero,158(sp)
100034a8:	d8801405 	stb	r2,80(sp)
100034ac:	d9002e15 	stw	r4,184(sp)
100034b0:	d8c02b15 	stw	r3,172(sp)
100034b4:	d8002a15 	stw	zero,168(sp)
100034b8:	d8003215 	stw	zero,200(sp)
100034bc:	dc001404 	addi	r16,sp,80
100034c0:	0039883a 	mov	fp,zero
100034c4:	003e5306 	br	10002e14 <__alt_data_end+0xf8002e14>
100034c8:	01040074 	movhi	r4,4097
100034cc:	2108f404 	addi	r4,r4,9168
100034d0:	0039883a 	mov	fp,zero
100034d4:	d9003915 	stw	r4,228(sp)
100034d8:	04401e04 	movi	r17,120
100034dc:	003f6906 	br	10003284 <__alt_data_end+0xf8003284>
100034e0:	8025883a 	mov	r18,r16
100034e4:	dc002903 	ldbu	r16,164(sp)
100034e8:	e011883a 	mov	r8,fp
100034ec:	84003fcc 	andi	r16,r16,255
100034f0:	8005081e 	bne	r16,zero,10004914 <___vfprintf_internal_r+0x2290>
100034f4:	883d6126 	beq	r17,zero,10002a7c <__alt_data_end+0xf8002a7c>
100034f8:	00c00044 	movi	r3,1
100034fc:	d8c02915 	stw	r3,164(sp)
10003500:	dc401405 	stb	r17,80(sp)
10003504:	d8002785 	stb	zero,158(sp)
10003508:	003fe906 	br	100034b0 <__alt_data_end+0xf80034b0>
1000350c:	01440074 	movhi	r5,4097
10003510:	2948f404 	addi	r5,r5,9168
10003514:	d9403915 	stw	r5,228(sp)
10003518:	d8c02e15 	stw	r3,184(sp)
1000351c:	1025883a 	mov	r18,r2
10003520:	04401e04 	movi	r17,120
10003524:	9d84b03a 	or	r2,r19,r22
10003528:	1000fc1e 	bne	r2,zero,1000391c <___vfprintf_internal_r+0x1298>
1000352c:	0039883a 	mov	fp,zero
10003530:	00800084 	movi	r2,2
10003534:	10803fcc 	andi	r2,r2,255
10003538:	00c00044 	movi	r3,1
1000353c:	10c20f26 	beq	r2,r3,10003d7c <___vfprintf_internal_r+0x16f8>
10003540:	00c00084 	movi	r3,2
10003544:	10fd3326 	beq	r2,r3,10002a14 <__alt_data_end+0xf8002a14>
10003548:	003e0b06 	br	10002d78 <__alt_data_end+0xf8002d78>
1000354c:	d8c02017 	ldw	r3,128(sp)
10003550:	003e7106 	br	10002f18 <__alt_data_end+0xf8002f18>
10003554:	00801944 	movi	r2,101
10003558:	14407e0e 	bge	r2,r17,10003754 <___vfprintf_internal_r+0x10d0>
1000355c:	d9003617 	ldw	r4,216(sp)
10003560:	d9403817 	ldw	r5,224(sp)
10003564:	000d883a 	mov	r6,zero
10003568:	000f883a 	mov	r7,zero
1000356c:	d8c03c15 	stw	r3,240(sp)
10003570:	da003d15 	stw	r8,244(sp)
10003574:	000ddc40 	call	1000ddc4 <__eqdf2>
10003578:	d8c03c17 	ldw	r3,240(sp)
1000357c:	da003d17 	ldw	r8,244(sp)
10003580:	1000f71e 	bne	r2,zero,10003960 <___vfprintf_internal_r+0x12dc>
10003584:	d8801f17 	ldw	r2,124(sp)
10003588:	01040074 	movhi	r4,4097
1000358c:	2108fb04 	addi	r4,r4,9196
10003590:	18c00044 	addi	r3,r3,1
10003594:	10800044 	addi	r2,r2,1
10003598:	41000015 	stw	r4,0(r8)
1000359c:	01000044 	movi	r4,1
100035a0:	41000115 	stw	r4,4(r8)
100035a4:	d8c02015 	stw	r3,128(sp)
100035a8:	d8801f15 	stw	r2,124(sp)
100035ac:	010001c4 	movi	r4,7
100035b0:	2082b816 	blt	r4,r2,10004094 <___vfprintf_internal_r+0x1a10>
100035b4:	42000204 	addi	r8,r8,8
100035b8:	d8802617 	ldw	r2,152(sp)
100035bc:	d9403317 	ldw	r5,204(sp)
100035c0:	11400216 	blt	r2,r5,100035cc <___vfprintf_internal_r+0xf48>
100035c4:	9080004c 	andi	r2,r18,1
100035c8:	103eb326 	beq	r2,zero,10003098 <__alt_data_end+0xf8003098>
100035cc:	d8803717 	ldw	r2,220(sp)
100035d0:	d9003417 	ldw	r4,208(sp)
100035d4:	d9403717 	ldw	r5,220(sp)
100035d8:	1887883a 	add	r3,r3,r2
100035dc:	d8801f17 	ldw	r2,124(sp)
100035e0:	41000015 	stw	r4,0(r8)
100035e4:	41400115 	stw	r5,4(r8)
100035e8:	10800044 	addi	r2,r2,1
100035ec:	d8c02015 	stw	r3,128(sp)
100035f0:	d8801f15 	stw	r2,124(sp)
100035f4:	010001c4 	movi	r4,7
100035f8:	20832916 	blt	r4,r2,100042a0 <___vfprintf_internal_r+0x1c1c>
100035fc:	42000204 	addi	r8,r8,8
10003600:	d8803317 	ldw	r2,204(sp)
10003604:	143fffc4 	addi	r16,r2,-1
10003608:	043ea30e 	bge	zero,r16,10003098 <__alt_data_end+0xf8003098>
1000360c:	04400404 	movi	r17,16
10003610:	d8801f17 	ldw	r2,124(sp)
10003614:	8c00880e 	bge	r17,r16,10003838 <___vfprintf_internal_r+0x11b4>
10003618:	01440074 	movhi	r5,4097
1000361c:	2948fb84 	addi	r5,r5,9198
10003620:	d9402c15 	stw	r5,176(sp)
10003624:	058001c4 	movi	r22,7
10003628:	dcc02d17 	ldw	r19,180(sp)
1000362c:	00000306 	br	1000363c <___vfprintf_internal_r+0xfb8>
10003630:	42000204 	addi	r8,r8,8
10003634:	843ffc04 	addi	r16,r16,-16
10003638:	8c00820e 	bge	r17,r16,10003844 <___vfprintf_internal_r+0x11c0>
1000363c:	18c00404 	addi	r3,r3,16
10003640:	10800044 	addi	r2,r2,1
10003644:	45000015 	stw	r20,0(r8)
10003648:	44400115 	stw	r17,4(r8)
1000364c:	d8c02015 	stw	r3,128(sp)
10003650:	d8801f15 	stw	r2,124(sp)
10003654:	b0bff60e 	bge	r22,r2,10003630 <__alt_data_end+0xf8003630>
10003658:	d9801e04 	addi	r6,sp,120
1000365c:	b80b883a 	mov	r5,r23
10003660:	9809883a 	mov	r4,r19
10003664:	0009e640 	call	10009e64 <__sprint_r>
10003668:	103d0a1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
1000366c:	d8c02017 	ldw	r3,128(sp)
10003670:	d8801f17 	ldw	r2,124(sp)
10003674:	da000404 	addi	r8,sp,16
10003678:	003fee06 	br	10003634 <__alt_data_end+0xf8003634>
1000367c:	d9403117 	ldw	r5,196(sp)
10003680:	d8802917 	ldw	r2,164(sp)
10003684:	28adc83a 	sub	r22,r5,r2
10003688:	05be410e 	bge	zero,r22,10002f90 <__alt_data_end+0xf8002f90>
1000368c:	07000404 	movi	fp,16
10003690:	d8801f17 	ldw	r2,124(sp)
10003694:	e5838f0e 	bge	fp,r22,100044d4 <___vfprintf_internal_r+0x1e50>
10003698:	01440074 	movhi	r5,4097
1000369c:	2948fb84 	addi	r5,r5,9198
100036a0:	dc403015 	stw	r17,192(sp)
100036a4:	d9402c15 	stw	r5,176(sp)
100036a8:	b023883a 	mov	r17,r22
100036ac:	04c001c4 	movi	r19,7
100036b0:	a82d883a 	mov	r22,r21
100036b4:	902b883a 	mov	r21,r18
100036b8:	8025883a 	mov	r18,r16
100036bc:	dc002d17 	ldw	r16,180(sp)
100036c0:	00000306 	br	100036d0 <___vfprintf_internal_r+0x104c>
100036c4:	8c7ffc04 	addi	r17,r17,-16
100036c8:	42000204 	addi	r8,r8,8
100036cc:	e440110e 	bge	fp,r17,10003714 <___vfprintf_internal_r+0x1090>
100036d0:	18c00404 	addi	r3,r3,16
100036d4:	10800044 	addi	r2,r2,1
100036d8:	45000015 	stw	r20,0(r8)
100036dc:	47000115 	stw	fp,4(r8)
100036e0:	d8c02015 	stw	r3,128(sp)
100036e4:	d8801f15 	stw	r2,124(sp)
100036e8:	98bff60e 	bge	r19,r2,100036c4 <__alt_data_end+0xf80036c4>
100036ec:	d9801e04 	addi	r6,sp,120
100036f0:	b80b883a 	mov	r5,r23
100036f4:	8009883a 	mov	r4,r16
100036f8:	0009e640 	call	10009e64 <__sprint_r>
100036fc:	103ce51e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003700:	8c7ffc04 	addi	r17,r17,-16
10003704:	d8c02017 	ldw	r3,128(sp)
10003708:	d8801f17 	ldw	r2,124(sp)
1000370c:	da000404 	addi	r8,sp,16
10003710:	e47fef16 	blt	fp,r17,100036d0 <__alt_data_end+0xf80036d0>
10003714:	9021883a 	mov	r16,r18
10003718:	a825883a 	mov	r18,r21
1000371c:	b02b883a 	mov	r21,r22
10003720:	882d883a 	mov	r22,r17
10003724:	dc403017 	ldw	r17,192(sp)
10003728:	d9002c17 	ldw	r4,176(sp)
1000372c:	1d87883a 	add	r3,r3,r22
10003730:	10800044 	addi	r2,r2,1
10003734:	41000015 	stw	r4,0(r8)
10003738:	45800115 	stw	r22,4(r8)
1000373c:	d8c02015 	stw	r3,128(sp)
10003740:	d8801f15 	stw	r2,124(sp)
10003744:	010001c4 	movi	r4,7
10003748:	20818e16 	blt	r4,r2,10003d84 <___vfprintf_internal_r+0x1700>
1000374c:	42000204 	addi	r8,r8,8
10003750:	003e0f06 	br	10002f90 <__alt_data_end+0xf8002f90>
10003754:	d9403317 	ldw	r5,204(sp)
10003758:	00800044 	movi	r2,1
1000375c:	18c00044 	addi	r3,r3,1
10003760:	1141530e 	bge	r2,r5,10003cb0 <___vfprintf_internal_r+0x162c>
10003764:	dc401f17 	ldw	r17,124(sp)
10003768:	00800044 	movi	r2,1
1000376c:	40800115 	stw	r2,4(r8)
10003770:	8c400044 	addi	r17,r17,1
10003774:	44000015 	stw	r16,0(r8)
10003778:	d8c02015 	stw	r3,128(sp)
1000377c:	dc401f15 	stw	r17,124(sp)
10003780:	008001c4 	movi	r2,7
10003784:	14416b16 	blt	r2,r17,10003d34 <___vfprintf_internal_r+0x16b0>
10003788:	42000204 	addi	r8,r8,8
1000378c:	d8803717 	ldw	r2,220(sp)
10003790:	d9003417 	ldw	r4,208(sp)
10003794:	8c400044 	addi	r17,r17,1
10003798:	10c7883a 	add	r3,r2,r3
1000379c:	40800115 	stw	r2,4(r8)
100037a0:	41000015 	stw	r4,0(r8)
100037a4:	d8c02015 	stw	r3,128(sp)
100037a8:	dc401f15 	stw	r17,124(sp)
100037ac:	008001c4 	movi	r2,7
100037b0:	14416916 	blt	r2,r17,10003d58 <___vfprintf_internal_r+0x16d4>
100037b4:	45800204 	addi	r22,r8,8
100037b8:	d9003617 	ldw	r4,216(sp)
100037bc:	d9403817 	ldw	r5,224(sp)
100037c0:	000d883a 	mov	r6,zero
100037c4:	000f883a 	mov	r7,zero
100037c8:	d8c03c15 	stw	r3,240(sp)
100037cc:	000ddc40 	call	1000ddc4 <__eqdf2>
100037d0:	d8c03c17 	ldw	r3,240(sp)
100037d4:	1000bc26 	beq	r2,zero,10003ac8 <___vfprintf_internal_r+0x1444>
100037d8:	d9403317 	ldw	r5,204(sp)
100037dc:	84000044 	addi	r16,r16,1
100037e0:	8c400044 	addi	r17,r17,1
100037e4:	28bfffc4 	addi	r2,r5,-1
100037e8:	1887883a 	add	r3,r3,r2
100037ec:	b0800115 	stw	r2,4(r22)
100037f0:	b4000015 	stw	r16,0(r22)
100037f4:	d8c02015 	stw	r3,128(sp)
100037f8:	dc401f15 	stw	r17,124(sp)
100037fc:	008001c4 	movi	r2,7
10003800:	14414316 	blt	r2,r17,10003d10 <___vfprintf_internal_r+0x168c>
10003804:	b5800204 	addi	r22,r22,8
10003808:	d9003a17 	ldw	r4,232(sp)
1000380c:	df0022c4 	addi	fp,sp,139
10003810:	8c400044 	addi	r17,r17,1
10003814:	20c7883a 	add	r3,r4,r3
10003818:	b7000015 	stw	fp,0(r22)
1000381c:	b1000115 	stw	r4,4(r22)
10003820:	d8c02015 	stw	r3,128(sp)
10003824:	dc401f15 	stw	r17,124(sp)
10003828:	008001c4 	movi	r2,7
1000382c:	14400e16 	blt	r2,r17,10003868 <___vfprintf_internal_r+0x11e4>
10003830:	b2000204 	addi	r8,r22,8
10003834:	003e1806 	br	10003098 <__alt_data_end+0xf8003098>
10003838:	01040074 	movhi	r4,4097
1000383c:	2108fb84 	addi	r4,r4,9198
10003840:	d9002c15 	stw	r4,176(sp)
10003844:	d9002c17 	ldw	r4,176(sp)
10003848:	1c07883a 	add	r3,r3,r16
1000384c:	44000115 	stw	r16,4(r8)
10003850:	41000015 	stw	r4,0(r8)
10003854:	10800044 	addi	r2,r2,1
10003858:	d8c02015 	stw	r3,128(sp)
1000385c:	d8801f15 	stw	r2,124(sp)
10003860:	010001c4 	movi	r4,7
10003864:	20be0b0e 	bge	r4,r2,10003094 <__alt_data_end+0xf8003094>
10003868:	d9002d17 	ldw	r4,180(sp)
1000386c:	d9801e04 	addi	r6,sp,120
10003870:	b80b883a 	mov	r5,r23
10003874:	0009e640 	call	10009e64 <__sprint_r>
10003878:	103c861e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
1000387c:	d8c02017 	ldw	r3,128(sp)
10003880:	da000404 	addi	r8,sp,16
10003884:	003e0406 	br	10003098 <__alt_data_end+0xf8003098>
10003888:	d9002d17 	ldw	r4,180(sp)
1000388c:	d9801e04 	addi	r6,sp,120
10003890:	b80b883a 	mov	r5,r23
10003894:	0009e640 	call	10009e64 <__sprint_r>
10003898:	103e3b26 	beq	r2,zero,10003188 <__alt_data_end+0xf8003188>
1000389c:	003c7d06 	br	10002a94 <__alt_data_end+0xf8002a94>
100038a0:	d9002d17 	ldw	r4,180(sp)
100038a4:	d9801e04 	addi	r6,sp,120
100038a8:	b80b883a 	mov	r5,r23
100038ac:	0009e640 	call	10009e64 <__sprint_r>
100038b0:	103c781e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
100038b4:	d8c02017 	ldw	r3,128(sp)
100038b8:	da000404 	addi	r8,sp,16
100038bc:	003de906 	br	10003064 <__alt_data_end+0xf8003064>
100038c0:	d9002d17 	ldw	r4,180(sp)
100038c4:	d9801e04 	addi	r6,sp,120
100038c8:	b80b883a 	mov	r5,r23
100038cc:	0009e640 	call	10009e64 <__sprint_r>
100038d0:	103c701e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
100038d4:	d8c02017 	ldw	r3,128(sp)
100038d8:	da000404 	addi	r8,sp,16
100038dc:	003d9b06 	br	10002f4c <__alt_data_end+0xf8002f4c>
100038e0:	d9002d17 	ldw	r4,180(sp)
100038e4:	d9801e04 	addi	r6,sp,120
100038e8:	b80b883a 	mov	r5,r23
100038ec:	0009e640 	call	10009e64 <__sprint_r>
100038f0:	103c681e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
100038f4:	d8c02017 	ldw	r3,128(sp)
100038f8:	da000404 	addi	r8,sp,16
100038fc:	003da106 	br	10002f84 <__alt_data_end+0xf8002f84>
10003900:	d9402a17 	ldw	r5,168(sp)
10003904:	d8002785 	stb	zero,158(sp)
10003908:	283f0616 	blt	r5,zero,10003524 <__alt_data_end+0xf8003524>
1000390c:	00ffdfc4 	movi	r3,-129
10003910:	9d84b03a 	or	r2,r19,r22
10003914:	90e4703a 	and	r18,r18,r3
10003918:	103c3b26 	beq	r2,zero,10002a08 <__alt_data_end+0xf8002a08>
1000391c:	0039883a 	mov	fp,zero
10003920:	003e5806 	br	10003284 <__alt_data_end+0xf8003284>
10003924:	9080040c 	andi	r2,r18,16
10003928:	1001b326 	beq	r2,zero,10003ff8 <___vfprintf_internal_r+0x1974>
1000392c:	d8c02e17 	ldw	r3,184(sp)
10003930:	d9002a17 	ldw	r4,168(sp)
10003934:	d8002785 	stb	zero,158(sp)
10003938:	18800104 	addi	r2,r3,4
1000393c:	1cc00017 	ldw	r19,0(r3)
10003940:	002d883a 	mov	r22,zero
10003944:	2001b516 	blt	r4,zero,1000401c <___vfprintf_internal_r+0x1998>
10003948:	00ffdfc4 	movi	r3,-129
1000394c:	d8802e15 	stw	r2,184(sp)
10003950:	90e4703a 	and	r18,r18,r3
10003954:	983d0526 	beq	r19,zero,10002d6c <__alt_data_end+0xf8002d6c>
10003958:	0039883a 	mov	fp,zero
1000395c:	003d0806 	br	10002d80 <__alt_data_end+0xf8002d80>
10003960:	dc402617 	ldw	r17,152(sp)
10003964:	0441d30e 	bge	zero,r17,100040b4 <___vfprintf_internal_r+0x1a30>
10003968:	dc403217 	ldw	r17,200(sp)
1000396c:	d8803317 	ldw	r2,204(sp)
10003970:	1440010e 	bge	r2,r17,10003978 <___vfprintf_internal_r+0x12f4>
10003974:	1023883a 	mov	r17,r2
10003978:	04400a0e 	bge	zero,r17,100039a4 <___vfprintf_internal_r+0x1320>
1000397c:	d8801f17 	ldw	r2,124(sp)
10003980:	1c47883a 	add	r3,r3,r17
10003984:	44000015 	stw	r16,0(r8)
10003988:	10800044 	addi	r2,r2,1
1000398c:	44400115 	stw	r17,4(r8)
10003990:	d8c02015 	stw	r3,128(sp)
10003994:	d8801f15 	stw	r2,124(sp)
10003998:	010001c4 	movi	r4,7
1000399c:	20826516 	blt	r4,r2,10004334 <___vfprintf_internal_r+0x1cb0>
100039a0:	42000204 	addi	r8,r8,8
100039a4:	88026116 	blt	r17,zero,1000432c <___vfprintf_internal_r+0x1ca8>
100039a8:	d9003217 	ldw	r4,200(sp)
100039ac:	2463c83a 	sub	r17,r4,r17
100039b0:	04407b0e 	bge	zero,r17,10003ba0 <___vfprintf_internal_r+0x151c>
100039b4:	05800404 	movi	r22,16
100039b8:	d8801f17 	ldw	r2,124(sp)
100039bc:	b4419d0e 	bge	r22,r17,10004034 <___vfprintf_internal_r+0x19b0>
100039c0:	01040074 	movhi	r4,4097
100039c4:	2108fb84 	addi	r4,r4,9198
100039c8:	d9002c15 	stw	r4,176(sp)
100039cc:	070001c4 	movi	fp,7
100039d0:	dcc02d17 	ldw	r19,180(sp)
100039d4:	00000306 	br	100039e4 <___vfprintf_internal_r+0x1360>
100039d8:	42000204 	addi	r8,r8,8
100039dc:	8c7ffc04 	addi	r17,r17,-16
100039e0:	b441970e 	bge	r22,r17,10004040 <___vfprintf_internal_r+0x19bc>
100039e4:	18c00404 	addi	r3,r3,16
100039e8:	10800044 	addi	r2,r2,1
100039ec:	45000015 	stw	r20,0(r8)
100039f0:	45800115 	stw	r22,4(r8)
100039f4:	d8c02015 	stw	r3,128(sp)
100039f8:	d8801f15 	stw	r2,124(sp)
100039fc:	e0bff60e 	bge	fp,r2,100039d8 <__alt_data_end+0xf80039d8>
10003a00:	d9801e04 	addi	r6,sp,120
10003a04:	b80b883a 	mov	r5,r23
10003a08:	9809883a 	mov	r4,r19
10003a0c:	0009e640 	call	10009e64 <__sprint_r>
10003a10:	103c201e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003a14:	d8c02017 	ldw	r3,128(sp)
10003a18:	d8801f17 	ldw	r2,124(sp)
10003a1c:	da000404 	addi	r8,sp,16
10003a20:	003fee06 	br	100039dc <__alt_data_end+0xf80039dc>
10003a24:	d9002d17 	ldw	r4,180(sp)
10003a28:	d9801e04 	addi	r6,sp,120
10003a2c:	b80b883a 	mov	r5,r23
10003a30:	0009e640 	call	10009e64 <__sprint_r>
10003a34:	103c171e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003a38:	d8c02017 	ldw	r3,128(sp)
10003a3c:	df002787 	ldb	fp,158(sp)
10003a40:	da000404 	addi	r8,sp,16
10003a44:	003d3406 	br	10002f18 <__alt_data_end+0xf8002f18>
10003a48:	9080040c 	andi	r2,r18,16
10003a4c:	10016126 	beq	r2,zero,10003fd4 <___vfprintf_internal_r+0x1950>
10003a50:	d9402e17 	ldw	r5,184(sp)
10003a54:	2cc00017 	ldw	r19,0(r5)
10003a58:	29400104 	addi	r5,r5,4
10003a5c:	d9402e15 	stw	r5,184(sp)
10003a60:	982dd7fa 	srai	r22,r19,31
10003a64:	b005883a 	mov	r2,r22
10003a68:	003c5a06 	br	10002bd4 <__alt_data_end+0xf8002bd4>
10003a6c:	9080040c 	andi	r2,r18,16
10003a70:	10003526 	beq	r2,zero,10003b48 <___vfprintf_internal_r+0x14c4>
10003a74:	d8c02e17 	ldw	r3,184(sp)
10003a78:	d9002a17 	ldw	r4,168(sp)
10003a7c:	d8002785 	stb	zero,158(sp)
10003a80:	18800104 	addi	r2,r3,4
10003a84:	1cc00017 	ldw	r19,0(r3)
10003a88:	002d883a 	mov	r22,zero
10003a8c:	20003716 	blt	r4,zero,10003b6c <___vfprintf_internal_r+0x14e8>
10003a90:	00ffdfc4 	movi	r3,-129
10003a94:	d8802e15 	stw	r2,184(sp)
10003a98:	90e4703a 	and	r18,r18,r3
10003a9c:	0039883a 	mov	fp,zero
10003aa0:	983dd426 	beq	r19,zero,100031f4 <__alt_data_end+0xf80031f4>
10003aa4:	00800244 	movi	r2,9
10003aa8:	14fc5336 	bltu	r2,r19,10002bf8 <__alt_data_end+0xf8002bf8>
10003aac:	d8c02817 	ldw	r3,160(sp)
10003ab0:	dc001dc4 	addi	r16,sp,119
10003ab4:	9cc00c04 	addi	r19,r19,48
10003ab8:	1c07c83a 	sub	r3,r3,r16
10003abc:	dcc01dc5 	stb	r19,119(sp)
10003ac0:	d8c02b15 	stw	r3,172(sp)
10003ac4:	003cc606 	br	10002de0 <__alt_data_end+0xf8002de0>
10003ac8:	d8803317 	ldw	r2,204(sp)
10003acc:	143fffc4 	addi	r16,r2,-1
10003ad0:	043f4d0e 	bge	zero,r16,10003808 <__alt_data_end+0xf8003808>
10003ad4:	07000404 	movi	fp,16
10003ad8:	e400810e 	bge	fp,r16,10003ce0 <___vfprintf_internal_r+0x165c>
10003adc:	01440074 	movhi	r5,4097
10003ae0:	2948fb84 	addi	r5,r5,9198
10003ae4:	d9402c15 	stw	r5,176(sp)
10003ae8:	01c001c4 	movi	r7,7
10003aec:	dcc02d17 	ldw	r19,180(sp)
10003af0:	00000306 	br	10003b00 <___vfprintf_internal_r+0x147c>
10003af4:	b5800204 	addi	r22,r22,8
10003af8:	843ffc04 	addi	r16,r16,-16
10003afc:	e4007b0e 	bge	fp,r16,10003cec <___vfprintf_internal_r+0x1668>
10003b00:	18c00404 	addi	r3,r3,16
10003b04:	8c400044 	addi	r17,r17,1
10003b08:	b5000015 	stw	r20,0(r22)
10003b0c:	b7000115 	stw	fp,4(r22)
10003b10:	d8c02015 	stw	r3,128(sp)
10003b14:	dc401f15 	stw	r17,124(sp)
10003b18:	3c7ff60e 	bge	r7,r17,10003af4 <__alt_data_end+0xf8003af4>
10003b1c:	d9801e04 	addi	r6,sp,120
10003b20:	b80b883a 	mov	r5,r23
10003b24:	9809883a 	mov	r4,r19
10003b28:	d9c03c15 	stw	r7,240(sp)
10003b2c:	0009e640 	call	10009e64 <__sprint_r>
10003b30:	d9c03c17 	ldw	r7,240(sp)
10003b34:	103bd71e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003b38:	d8c02017 	ldw	r3,128(sp)
10003b3c:	dc401f17 	ldw	r17,124(sp)
10003b40:	dd800404 	addi	r22,sp,16
10003b44:	003fec06 	br	10003af8 <__alt_data_end+0xf8003af8>
10003b48:	9080100c 	andi	r2,r18,64
10003b4c:	d8002785 	stb	zero,158(sp)
10003b50:	10010e26 	beq	r2,zero,10003f8c <___vfprintf_internal_r+0x1908>
10003b54:	d9402e17 	ldw	r5,184(sp)
10003b58:	d8c02a17 	ldw	r3,168(sp)
10003b5c:	002d883a 	mov	r22,zero
10003b60:	28800104 	addi	r2,r5,4
10003b64:	2cc0000b 	ldhu	r19,0(r5)
10003b68:	183fc90e 	bge	r3,zero,10003a90 <__alt_data_end+0xf8003a90>
10003b6c:	d8802e15 	stw	r2,184(sp)
10003b70:	0039883a 	mov	fp,zero
10003b74:	9d84b03a 	or	r2,r19,r22
10003b78:	103c1e1e 	bne	r2,zero,10002bf4 <__alt_data_end+0xf8002bf4>
10003b7c:	00800044 	movi	r2,1
10003b80:	003e6c06 	br	10003534 <__alt_data_end+0xf8003534>
10003b84:	d9002d17 	ldw	r4,180(sp)
10003b88:	d9801e04 	addi	r6,sp,120
10003b8c:	b80b883a 	mov	r5,r23
10003b90:	0009e640 	call	10009e64 <__sprint_r>
10003b94:	103bbf1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003b98:	d8c02017 	ldw	r3,128(sp)
10003b9c:	da000404 	addi	r8,sp,16
10003ba0:	d9003217 	ldw	r4,200(sp)
10003ba4:	d8802617 	ldw	r2,152(sp)
10003ba8:	d9403317 	ldw	r5,204(sp)
10003bac:	8123883a 	add	r17,r16,r4
10003bb0:	11400216 	blt	r2,r5,10003bbc <___vfprintf_internal_r+0x1538>
10003bb4:	9100004c 	andi	r4,r18,1
10003bb8:	20000d26 	beq	r4,zero,10003bf0 <___vfprintf_internal_r+0x156c>
10003bbc:	d9003717 	ldw	r4,220(sp)
10003bc0:	d9403417 	ldw	r5,208(sp)
10003bc4:	1907883a 	add	r3,r3,r4
10003bc8:	d9001f17 	ldw	r4,124(sp)
10003bcc:	41400015 	stw	r5,0(r8)
10003bd0:	d9403717 	ldw	r5,220(sp)
10003bd4:	21000044 	addi	r4,r4,1
10003bd8:	d8c02015 	stw	r3,128(sp)
10003bdc:	41400115 	stw	r5,4(r8)
10003be0:	d9001f15 	stw	r4,124(sp)
10003be4:	014001c4 	movi	r5,7
10003be8:	2901e816 	blt	r5,r4,1000438c <___vfprintf_internal_r+0x1d08>
10003bec:	42000204 	addi	r8,r8,8
10003bf0:	d9003317 	ldw	r4,204(sp)
10003bf4:	8121883a 	add	r16,r16,r4
10003bf8:	2085c83a 	sub	r2,r4,r2
10003bfc:	8461c83a 	sub	r16,r16,r17
10003c00:	1400010e 	bge	r2,r16,10003c08 <___vfprintf_internal_r+0x1584>
10003c04:	1021883a 	mov	r16,r2
10003c08:	04000a0e 	bge	zero,r16,10003c34 <___vfprintf_internal_r+0x15b0>
10003c0c:	d9001f17 	ldw	r4,124(sp)
10003c10:	1c07883a 	add	r3,r3,r16
10003c14:	44400015 	stw	r17,0(r8)
10003c18:	21000044 	addi	r4,r4,1
10003c1c:	44000115 	stw	r16,4(r8)
10003c20:	d8c02015 	stw	r3,128(sp)
10003c24:	d9001f15 	stw	r4,124(sp)
10003c28:	014001c4 	movi	r5,7
10003c2c:	2901fb16 	blt	r5,r4,1000441c <___vfprintf_internal_r+0x1d98>
10003c30:	42000204 	addi	r8,r8,8
10003c34:	8001f716 	blt	r16,zero,10004414 <___vfprintf_internal_r+0x1d90>
10003c38:	1421c83a 	sub	r16,r2,r16
10003c3c:	043d160e 	bge	zero,r16,10003098 <__alt_data_end+0xf8003098>
10003c40:	04400404 	movi	r17,16
10003c44:	d8801f17 	ldw	r2,124(sp)
10003c48:	8c3efb0e 	bge	r17,r16,10003838 <__alt_data_end+0xf8003838>
10003c4c:	01440074 	movhi	r5,4097
10003c50:	2948fb84 	addi	r5,r5,9198
10003c54:	d9402c15 	stw	r5,176(sp)
10003c58:	058001c4 	movi	r22,7
10003c5c:	dcc02d17 	ldw	r19,180(sp)
10003c60:	00000306 	br	10003c70 <___vfprintf_internal_r+0x15ec>
10003c64:	42000204 	addi	r8,r8,8
10003c68:	843ffc04 	addi	r16,r16,-16
10003c6c:	8c3ef50e 	bge	r17,r16,10003844 <__alt_data_end+0xf8003844>
10003c70:	18c00404 	addi	r3,r3,16
10003c74:	10800044 	addi	r2,r2,1
10003c78:	45000015 	stw	r20,0(r8)
10003c7c:	44400115 	stw	r17,4(r8)
10003c80:	d8c02015 	stw	r3,128(sp)
10003c84:	d8801f15 	stw	r2,124(sp)
10003c88:	b0bff60e 	bge	r22,r2,10003c64 <__alt_data_end+0xf8003c64>
10003c8c:	d9801e04 	addi	r6,sp,120
10003c90:	b80b883a 	mov	r5,r23
10003c94:	9809883a 	mov	r4,r19
10003c98:	0009e640 	call	10009e64 <__sprint_r>
10003c9c:	103b7d1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003ca0:	d8c02017 	ldw	r3,128(sp)
10003ca4:	d8801f17 	ldw	r2,124(sp)
10003ca8:	da000404 	addi	r8,sp,16
10003cac:	003fee06 	br	10003c68 <__alt_data_end+0xf8003c68>
10003cb0:	9088703a 	and	r4,r18,r2
10003cb4:	203eab1e 	bne	r4,zero,10003764 <__alt_data_end+0xf8003764>
10003cb8:	dc401f17 	ldw	r17,124(sp)
10003cbc:	40800115 	stw	r2,4(r8)
10003cc0:	44000015 	stw	r16,0(r8)
10003cc4:	8c400044 	addi	r17,r17,1
10003cc8:	d8c02015 	stw	r3,128(sp)
10003ccc:	dc401f15 	stw	r17,124(sp)
10003cd0:	008001c4 	movi	r2,7
10003cd4:	14400e16 	blt	r2,r17,10003d10 <___vfprintf_internal_r+0x168c>
10003cd8:	45800204 	addi	r22,r8,8
10003cdc:	003eca06 	br	10003808 <__alt_data_end+0xf8003808>
10003ce0:	01040074 	movhi	r4,4097
10003ce4:	2108fb84 	addi	r4,r4,9198
10003ce8:	d9002c15 	stw	r4,176(sp)
10003cec:	d8802c17 	ldw	r2,176(sp)
10003cf0:	1c07883a 	add	r3,r3,r16
10003cf4:	8c400044 	addi	r17,r17,1
10003cf8:	b0800015 	stw	r2,0(r22)
10003cfc:	b4000115 	stw	r16,4(r22)
10003d00:	d8c02015 	stw	r3,128(sp)
10003d04:	dc401f15 	stw	r17,124(sp)
10003d08:	008001c4 	movi	r2,7
10003d0c:	147ebd0e 	bge	r2,r17,10003804 <__alt_data_end+0xf8003804>
10003d10:	d9002d17 	ldw	r4,180(sp)
10003d14:	d9801e04 	addi	r6,sp,120
10003d18:	b80b883a 	mov	r5,r23
10003d1c:	0009e640 	call	10009e64 <__sprint_r>
10003d20:	103b5c1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003d24:	d8c02017 	ldw	r3,128(sp)
10003d28:	dc401f17 	ldw	r17,124(sp)
10003d2c:	dd800404 	addi	r22,sp,16
10003d30:	003eb506 	br	10003808 <__alt_data_end+0xf8003808>
10003d34:	d9002d17 	ldw	r4,180(sp)
10003d38:	d9801e04 	addi	r6,sp,120
10003d3c:	b80b883a 	mov	r5,r23
10003d40:	0009e640 	call	10009e64 <__sprint_r>
10003d44:	103b531e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003d48:	d8c02017 	ldw	r3,128(sp)
10003d4c:	dc401f17 	ldw	r17,124(sp)
10003d50:	da000404 	addi	r8,sp,16
10003d54:	003e8d06 	br	1000378c <__alt_data_end+0xf800378c>
10003d58:	d9002d17 	ldw	r4,180(sp)
10003d5c:	d9801e04 	addi	r6,sp,120
10003d60:	b80b883a 	mov	r5,r23
10003d64:	0009e640 	call	10009e64 <__sprint_r>
10003d68:	103b4a1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003d6c:	d8c02017 	ldw	r3,128(sp)
10003d70:	dc401f17 	ldw	r17,124(sp)
10003d74:	dd800404 	addi	r22,sp,16
10003d78:	003e8f06 	br	100037b8 <__alt_data_end+0xf80037b8>
10003d7c:	0027883a 	mov	r19,zero
10003d80:	003f4a06 	br	10003aac <__alt_data_end+0xf8003aac>
10003d84:	d9002d17 	ldw	r4,180(sp)
10003d88:	d9801e04 	addi	r6,sp,120
10003d8c:	b80b883a 	mov	r5,r23
10003d90:	0009e640 	call	10009e64 <__sprint_r>
10003d94:	103b3f1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10003d98:	d8c02017 	ldw	r3,128(sp)
10003d9c:	da000404 	addi	r8,sp,16
10003da0:	003c7b06 	br	10002f90 <__alt_data_end+0xf8002f90>
10003da4:	d9402a17 	ldw	r5,168(sp)
10003da8:	04e7c83a 	sub	r19,zero,r19
10003dac:	07000b44 	movi	fp,45
10003db0:	9804c03a 	cmpne	r2,r19,zero
10003db4:	05adc83a 	sub	r22,zero,r22
10003db8:	df002785 	stb	fp,158(sp)
10003dbc:	b0adc83a 	sub	r22,r22,r2
10003dc0:	28017b16 	blt	r5,zero,100043b0 <___vfprintf_internal_r+0x1d2c>
10003dc4:	00bfdfc4 	movi	r2,-129
10003dc8:	90a4703a 	and	r18,r18,r2
10003dcc:	003b8906 	br	10002bf4 <__alt_data_end+0xf8002bf4>
10003dd0:	d9003617 	ldw	r4,216(sp)
10003dd4:	d9403817 	ldw	r5,224(sp)
10003dd8:	da003d15 	stw	r8,244(sp)
10003ddc:	0009a880 	call	10009a88 <__fpclassifyd>
10003de0:	da003d17 	ldw	r8,244(sp)
10003de4:	1000f026 	beq	r2,zero,100041a8 <___vfprintf_internal_r+0x1b24>
10003de8:	d9002a17 	ldw	r4,168(sp)
10003dec:	05bff7c4 	movi	r22,-33
10003df0:	00bfffc4 	movi	r2,-1
10003df4:	8dac703a 	and	r22,r17,r22
10003df8:	20820026 	beq	r4,r2,100045fc <___vfprintf_internal_r+0x1f78>
10003dfc:	008011c4 	movi	r2,71
10003e00:	b081f726 	beq	r22,r2,100045e0 <___vfprintf_internal_r+0x1f5c>
10003e04:	d9003817 	ldw	r4,224(sp)
10003e08:	90c04014 	ori	r3,r18,256
10003e0c:	d8c02c15 	stw	r3,176(sp)
10003e10:	20021516 	blt	r4,zero,10004668 <___vfprintf_internal_r+0x1fe4>
10003e14:	dcc03817 	ldw	r19,224(sp)
10003e18:	d8002905 	stb	zero,164(sp)
10003e1c:	00801984 	movi	r2,102
10003e20:	8881f926 	beq	r17,r2,10004608 <___vfprintf_internal_r+0x1f84>
10003e24:	00801184 	movi	r2,70
10003e28:	88821c26 	beq	r17,r2,1000469c <___vfprintf_internal_r+0x2018>
10003e2c:	00801144 	movi	r2,69
10003e30:	b081ef26 	beq	r22,r2,100045f0 <___vfprintf_internal_r+0x1f6c>
10003e34:	d8c02a17 	ldw	r3,168(sp)
10003e38:	d8802104 	addi	r2,sp,132
10003e3c:	d8800315 	stw	r2,12(sp)
10003e40:	d9403617 	ldw	r5,216(sp)
10003e44:	d8802504 	addi	r2,sp,148
10003e48:	d9002d17 	ldw	r4,180(sp)
10003e4c:	d8800215 	stw	r2,8(sp)
10003e50:	d8802604 	addi	r2,sp,152
10003e54:	d8c00015 	stw	r3,0(sp)
10003e58:	d8800115 	stw	r2,4(sp)
10003e5c:	01c00084 	movi	r7,2
10003e60:	980d883a 	mov	r6,r19
10003e64:	d8c03c15 	stw	r3,240(sp)
10003e68:	da003d15 	stw	r8,244(sp)
10003e6c:	0004db40 	call	10004db4 <_dtoa_r>
10003e70:	1021883a 	mov	r16,r2
10003e74:	008019c4 	movi	r2,103
10003e78:	d8c03c17 	ldw	r3,240(sp)
10003e7c:	da003d17 	ldw	r8,244(sp)
10003e80:	88817126 	beq	r17,r2,10004448 <___vfprintf_internal_r+0x1dc4>
10003e84:	008011c4 	movi	r2,71
10003e88:	88829126 	beq	r17,r2,100048d0 <___vfprintf_internal_r+0x224c>
10003e8c:	80f9883a 	add	fp,r16,r3
10003e90:	d9003617 	ldw	r4,216(sp)
10003e94:	000d883a 	mov	r6,zero
10003e98:	000f883a 	mov	r7,zero
10003e9c:	980b883a 	mov	r5,r19
10003ea0:	da003d15 	stw	r8,244(sp)
10003ea4:	000ddc40 	call	1000ddc4 <__eqdf2>
10003ea8:	da003d17 	ldw	r8,244(sp)
10003eac:	10018d26 	beq	r2,zero,100044e4 <___vfprintf_internal_r+0x1e60>
10003eb0:	d8802117 	ldw	r2,132(sp)
10003eb4:	1700062e 	bgeu	r2,fp,10003ed0 <___vfprintf_internal_r+0x184c>
10003eb8:	01000c04 	movi	r4,48
10003ebc:	10c00044 	addi	r3,r2,1
10003ec0:	d8c02115 	stw	r3,132(sp)
10003ec4:	11000005 	stb	r4,0(r2)
10003ec8:	d8802117 	ldw	r2,132(sp)
10003ecc:	173ffb36 	bltu	r2,fp,10003ebc <__alt_data_end+0xf8003ebc>
10003ed0:	1405c83a 	sub	r2,r2,r16
10003ed4:	d8803315 	stw	r2,204(sp)
10003ed8:	008011c4 	movi	r2,71
10003edc:	b0817626 	beq	r22,r2,100044b8 <___vfprintf_internal_r+0x1e34>
10003ee0:	00801944 	movi	r2,101
10003ee4:	1442800e 	bge	r2,r17,100048e8 <___vfprintf_internal_r+0x2264>
10003ee8:	d8c02617 	ldw	r3,152(sp)
10003eec:	00801984 	movi	r2,102
10003ef0:	d8c03215 	stw	r3,200(sp)
10003ef4:	8881fe26 	beq	r17,r2,100046f0 <___vfprintf_internal_r+0x206c>
10003ef8:	d8c03217 	ldw	r3,200(sp)
10003efc:	d9003317 	ldw	r4,204(sp)
10003f00:	1901dd16 	blt	r3,r4,10004678 <___vfprintf_internal_r+0x1ff4>
10003f04:	9480004c 	andi	r18,r18,1
10003f08:	90022b1e 	bne	r18,zero,100047b8 <___vfprintf_internal_r+0x2134>
10003f0c:	1805883a 	mov	r2,r3
10003f10:	18028316 	blt	r3,zero,10004920 <___vfprintf_internal_r+0x229c>
10003f14:	d8c03217 	ldw	r3,200(sp)
10003f18:	044019c4 	movi	r17,103
10003f1c:	d8c02b15 	stw	r3,172(sp)
10003f20:	df002907 	ldb	fp,164(sp)
10003f24:	e001531e 	bne	fp,zero,10004474 <___vfprintf_internal_r+0x1df0>
10003f28:	df002783 	ldbu	fp,158(sp)
10003f2c:	d8802915 	stw	r2,164(sp)
10003f30:	dc802c17 	ldw	r18,176(sp)
10003f34:	d8002a15 	stw	zero,168(sp)
10003f38:	003baf06 	br	10002df8 <__alt_data_end+0xf8002df8>
10003f3c:	d8c02e17 	ldw	r3,184(sp)
10003f40:	d9002e17 	ldw	r4,184(sp)
10003f44:	d9402e17 	ldw	r5,184(sp)
10003f48:	18c00017 	ldw	r3,0(r3)
10003f4c:	21000117 	ldw	r4,4(r4)
10003f50:	29400204 	addi	r5,r5,8
10003f54:	d8c03615 	stw	r3,216(sp)
10003f58:	d9003815 	stw	r4,224(sp)
10003f5c:	d9402e15 	stw	r5,184(sp)
10003f60:	003b5006 	br	10002ca4 <__alt_data_end+0xf8002ca4>
10003f64:	ac400007 	ldb	r17,0(r21)
10003f68:	003a2806 	br	1000280c <__alt_data_end+0xf800280c>
10003f6c:	9080100c 	andi	r2,r18,64
10003f70:	1000a826 	beq	r2,zero,10004214 <___vfprintf_internal_r+0x1b90>
10003f74:	d8c02e17 	ldw	r3,184(sp)
10003f78:	002d883a 	mov	r22,zero
10003f7c:	1cc0000b 	ldhu	r19,0(r3)
10003f80:	18c00104 	addi	r3,r3,4
10003f84:	d8c02e15 	stw	r3,184(sp)
10003f88:	003caf06 	br	10003248 <__alt_data_end+0xf8003248>
10003f8c:	d9002e17 	ldw	r4,184(sp)
10003f90:	d9402a17 	ldw	r5,168(sp)
10003f94:	002d883a 	mov	r22,zero
10003f98:	20800104 	addi	r2,r4,4
10003f9c:	24c00017 	ldw	r19,0(r4)
10003fa0:	283ebb0e 	bge	r5,zero,10003a90 <__alt_data_end+0xf8003a90>
10003fa4:	003ef106 	br	10003b6c <__alt_data_end+0xf8003b6c>
10003fa8:	9080040c 	andi	r2,r18,16
10003fac:	1000921e 	bne	r2,zero,100041f8 <___vfprintf_internal_r+0x1b74>
10003fb0:	9480100c 	andi	r18,r18,64
10003fb4:	90013926 	beq	r18,zero,1000449c <___vfprintf_internal_r+0x1e18>
10003fb8:	d9402e17 	ldw	r5,184(sp)
10003fbc:	d8c02f17 	ldw	r3,188(sp)
10003fc0:	28800017 	ldw	r2,0(r5)
10003fc4:	29400104 	addi	r5,r5,4
10003fc8:	d9402e15 	stw	r5,184(sp)
10003fcc:	10c0000d 	sth	r3,0(r2)
10003fd0:	0039e406 	br	10002764 <__alt_data_end+0xf8002764>
10003fd4:	9080100c 	andi	r2,r18,64
10003fd8:	10008026 	beq	r2,zero,100041dc <___vfprintf_internal_r+0x1b58>
10003fdc:	d8802e17 	ldw	r2,184(sp)
10003fe0:	14c0000f 	ldh	r19,0(r2)
10003fe4:	10800104 	addi	r2,r2,4
10003fe8:	d8802e15 	stw	r2,184(sp)
10003fec:	982dd7fa 	srai	r22,r19,31
10003ff0:	b005883a 	mov	r2,r22
10003ff4:	003af706 	br	10002bd4 <__alt_data_end+0xf8002bd4>
10003ff8:	9080100c 	andi	r2,r18,64
10003ffc:	d8002785 	stb	zero,158(sp)
10004000:	10008a1e 	bne	r2,zero,1000422c <___vfprintf_internal_r+0x1ba8>
10004004:	d9002e17 	ldw	r4,184(sp)
10004008:	d9402a17 	ldw	r5,168(sp)
1000400c:	002d883a 	mov	r22,zero
10004010:	20800104 	addi	r2,r4,4
10004014:	24c00017 	ldw	r19,0(r4)
10004018:	283e4b0e 	bge	r5,zero,10003948 <__alt_data_end+0xf8003948>
1000401c:	9d86b03a 	or	r3,r19,r22
10004020:	d8802e15 	stw	r2,184(sp)
10004024:	183e4c1e 	bne	r3,zero,10003958 <__alt_data_end+0xf8003958>
10004028:	0039883a 	mov	fp,zero
1000402c:	0005883a 	mov	r2,zero
10004030:	003d4006 	br	10003534 <__alt_data_end+0xf8003534>
10004034:	01440074 	movhi	r5,4097
10004038:	2948fb84 	addi	r5,r5,9198
1000403c:	d9402c15 	stw	r5,176(sp)
10004040:	d9402c17 	ldw	r5,176(sp)
10004044:	1c47883a 	add	r3,r3,r17
10004048:	10800044 	addi	r2,r2,1
1000404c:	41400015 	stw	r5,0(r8)
10004050:	44400115 	stw	r17,4(r8)
10004054:	d8c02015 	stw	r3,128(sp)
10004058:	d8801f15 	stw	r2,124(sp)
1000405c:	010001c4 	movi	r4,7
10004060:	20bec816 	blt	r4,r2,10003b84 <__alt_data_end+0xf8003b84>
10004064:	42000204 	addi	r8,r8,8
10004068:	003ecd06 	br	10003ba0 <__alt_data_end+0xf8003ba0>
1000406c:	d9002a17 	ldw	r4,168(sp)
10004070:	d8002785 	stb	zero,158(sp)
10004074:	203d2d16 	blt	r4,zero,1000352c <__alt_data_end+0xf800352c>
10004078:	00bfdfc4 	movi	r2,-129
1000407c:	90a4703a 	and	r18,r18,r2
10004080:	003a6106 	br	10002a08 <__alt_data_end+0xf8002a08>
10004084:	01040074 	movhi	r4,4097
10004088:	2108fb84 	addi	r4,r4,9198
1000408c:	d9002c15 	stw	r4,176(sp)
10004090:	003bea06 	br	1000303c <__alt_data_end+0xf800303c>
10004094:	d9002d17 	ldw	r4,180(sp)
10004098:	d9801e04 	addi	r6,sp,120
1000409c:	b80b883a 	mov	r5,r23
100040a0:	0009e640 	call	10009e64 <__sprint_r>
100040a4:	103a7b1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
100040a8:	d8c02017 	ldw	r3,128(sp)
100040ac:	da000404 	addi	r8,sp,16
100040b0:	003d4106 	br	100035b8 <__alt_data_end+0xf80035b8>
100040b4:	d8801f17 	ldw	r2,124(sp)
100040b8:	01440074 	movhi	r5,4097
100040bc:	01000044 	movi	r4,1
100040c0:	18c00044 	addi	r3,r3,1
100040c4:	10800044 	addi	r2,r2,1
100040c8:	2948fb04 	addi	r5,r5,9196
100040cc:	41000115 	stw	r4,4(r8)
100040d0:	41400015 	stw	r5,0(r8)
100040d4:	d8c02015 	stw	r3,128(sp)
100040d8:	d8801f15 	stw	r2,124(sp)
100040dc:	010001c4 	movi	r4,7
100040e0:	20805c16 	blt	r4,r2,10004254 <___vfprintf_internal_r+0x1bd0>
100040e4:	42000204 	addi	r8,r8,8
100040e8:	8800041e 	bne	r17,zero,100040fc <___vfprintf_internal_r+0x1a78>
100040ec:	d8803317 	ldw	r2,204(sp)
100040f0:	1000021e 	bne	r2,zero,100040fc <___vfprintf_internal_r+0x1a78>
100040f4:	9080004c 	andi	r2,r18,1
100040f8:	103be726 	beq	r2,zero,10003098 <__alt_data_end+0xf8003098>
100040fc:	d9003717 	ldw	r4,220(sp)
10004100:	d8801f17 	ldw	r2,124(sp)
10004104:	d9403417 	ldw	r5,208(sp)
10004108:	20c7883a 	add	r3,r4,r3
1000410c:	10800044 	addi	r2,r2,1
10004110:	41000115 	stw	r4,4(r8)
10004114:	41400015 	stw	r5,0(r8)
10004118:	d8c02015 	stw	r3,128(sp)
1000411c:	d8801f15 	stw	r2,124(sp)
10004120:	010001c4 	movi	r4,7
10004124:	20812116 	blt	r4,r2,100045ac <___vfprintf_internal_r+0x1f28>
10004128:	42000204 	addi	r8,r8,8
1000412c:	0463c83a 	sub	r17,zero,r17
10004130:	0440730e 	bge	zero,r17,10004300 <___vfprintf_internal_r+0x1c7c>
10004134:	05800404 	movi	r22,16
10004138:	b440860e 	bge	r22,r17,10004354 <___vfprintf_internal_r+0x1cd0>
1000413c:	01440074 	movhi	r5,4097
10004140:	2948fb84 	addi	r5,r5,9198
10004144:	d9402c15 	stw	r5,176(sp)
10004148:	070001c4 	movi	fp,7
1000414c:	dcc02d17 	ldw	r19,180(sp)
10004150:	00000306 	br	10004160 <___vfprintf_internal_r+0x1adc>
10004154:	42000204 	addi	r8,r8,8
10004158:	8c7ffc04 	addi	r17,r17,-16
1000415c:	b440800e 	bge	r22,r17,10004360 <___vfprintf_internal_r+0x1cdc>
10004160:	18c00404 	addi	r3,r3,16
10004164:	10800044 	addi	r2,r2,1
10004168:	45000015 	stw	r20,0(r8)
1000416c:	45800115 	stw	r22,4(r8)
10004170:	d8c02015 	stw	r3,128(sp)
10004174:	d8801f15 	stw	r2,124(sp)
10004178:	e0bff60e 	bge	fp,r2,10004154 <__alt_data_end+0xf8004154>
1000417c:	d9801e04 	addi	r6,sp,120
10004180:	b80b883a 	mov	r5,r23
10004184:	9809883a 	mov	r4,r19
10004188:	0009e640 	call	10009e64 <__sprint_r>
1000418c:	103a411e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10004190:	d8c02017 	ldw	r3,128(sp)
10004194:	d8801f17 	ldw	r2,124(sp)
10004198:	da000404 	addi	r8,sp,16
1000419c:	003fee06 	br	10004158 <__alt_data_end+0xf8004158>
100041a0:	00bfffc4 	movi	r2,-1
100041a4:	003a3f06 	br	10002aa4 <__alt_data_end+0xf8002aa4>
100041a8:	008011c4 	movi	r2,71
100041ac:	1440b816 	blt	r2,r17,10004490 <___vfprintf_internal_r+0x1e0c>
100041b0:	04040074 	movhi	r16,4097
100041b4:	8408ed04 	addi	r16,r16,9140
100041b8:	00c000c4 	movi	r3,3
100041bc:	00bfdfc4 	movi	r2,-129
100041c0:	d8c02915 	stw	r3,164(sp)
100041c4:	90a4703a 	and	r18,r18,r2
100041c8:	df002783 	ldbu	fp,158(sp)
100041cc:	d8c02b15 	stw	r3,172(sp)
100041d0:	d8002a15 	stw	zero,168(sp)
100041d4:	d8003215 	stw	zero,200(sp)
100041d8:	003b0706 	br	10002df8 <__alt_data_end+0xf8002df8>
100041dc:	d8c02e17 	ldw	r3,184(sp)
100041e0:	1cc00017 	ldw	r19,0(r3)
100041e4:	18c00104 	addi	r3,r3,4
100041e8:	d8c02e15 	stw	r3,184(sp)
100041ec:	982dd7fa 	srai	r22,r19,31
100041f0:	b005883a 	mov	r2,r22
100041f4:	003a7706 	br	10002bd4 <__alt_data_end+0xf8002bd4>
100041f8:	d8c02e17 	ldw	r3,184(sp)
100041fc:	d9002f17 	ldw	r4,188(sp)
10004200:	18800017 	ldw	r2,0(r3)
10004204:	18c00104 	addi	r3,r3,4
10004208:	d8c02e15 	stw	r3,184(sp)
1000420c:	11000015 	stw	r4,0(r2)
10004210:	00395406 	br	10002764 <__alt_data_end+0xf8002764>
10004214:	d9002e17 	ldw	r4,184(sp)
10004218:	002d883a 	mov	r22,zero
1000421c:	24c00017 	ldw	r19,0(r4)
10004220:	21000104 	addi	r4,r4,4
10004224:	d9002e15 	stw	r4,184(sp)
10004228:	003c0706 	br	10003248 <__alt_data_end+0xf8003248>
1000422c:	d9402e17 	ldw	r5,184(sp)
10004230:	d8c02a17 	ldw	r3,168(sp)
10004234:	002d883a 	mov	r22,zero
10004238:	28800104 	addi	r2,r5,4
1000423c:	2cc0000b 	ldhu	r19,0(r5)
10004240:	183dc10e 	bge	r3,zero,10003948 <__alt_data_end+0xf8003948>
10004244:	003f7506 	br	1000401c <__alt_data_end+0xf800401c>
10004248:	04040074 	movhi	r16,4097
1000424c:	8408eb04 	addi	r16,r16,9132
10004250:	003aa706 	br	10002cf0 <__alt_data_end+0xf8002cf0>
10004254:	d9002d17 	ldw	r4,180(sp)
10004258:	d9801e04 	addi	r6,sp,120
1000425c:	b80b883a 	mov	r5,r23
10004260:	0009e640 	call	10009e64 <__sprint_r>
10004264:	103a0b1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10004268:	dc402617 	ldw	r17,152(sp)
1000426c:	d8c02017 	ldw	r3,128(sp)
10004270:	da000404 	addi	r8,sp,16
10004274:	003f9c06 	br	100040e8 <__alt_data_end+0xf80040e8>
10004278:	ac400043 	ldbu	r17,1(r21)
1000427c:	84000814 	ori	r16,r16,32
10004280:	ad400044 	addi	r21,r21,1
10004284:	8c403fcc 	andi	r17,r17,255
10004288:	8c40201c 	xori	r17,r17,128
1000428c:	8c7fe004 	addi	r17,r17,-128
10004290:	00395e06 	br	1000280c <__alt_data_end+0xf800280c>
10004294:	d8c02e15 	stw	r3,184(sp)
10004298:	0039883a 	mov	fp,zero
1000429c:	003e3506 	br	10003b74 <__alt_data_end+0xf8003b74>
100042a0:	d9002d17 	ldw	r4,180(sp)
100042a4:	d9801e04 	addi	r6,sp,120
100042a8:	b80b883a 	mov	r5,r23
100042ac:	0009e640 	call	10009e64 <__sprint_r>
100042b0:	1039f81e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
100042b4:	d8c02017 	ldw	r3,128(sp)
100042b8:	da000404 	addi	r8,sp,16
100042bc:	003cd006 	br	10003600 <__alt_data_end+0xf8003600>
100042c0:	8009883a 	mov	r4,r16
100042c4:	df003d15 	stw	fp,244(sp)
100042c8:	00025ec0 	call	100025ec <strlen>
100042cc:	d8802b15 	stw	r2,172(sp)
100042d0:	da003d17 	ldw	r8,244(sp)
100042d4:	103c200e 	bge	r2,zero,10003358 <__alt_data_end+0xf8003358>
100042d8:	0005883a 	mov	r2,zero
100042dc:	003c1e06 	br	10003358 <__alt_data_end+0xf8003358>
100042e0:	d9002d17 	ldw	r4,180(sp)
100042e4:	d9801e04 	addi	r6,sp,120
100042e8:	b80b883a 	mov	r5,r23
100042ec:	0009e640 	call	10009e64 <__sprint_r>
100042f0:	1039e81e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
100042f4:	d8c02017 	ldw	r3,128(sp)
100042f8:	d8801f17 	ldw	r2,124(sp)
100042fc:	da000404 	addi	r8,sp,16
10004300:	d9403317 	ldw	r5,204(sp)
10004304:	10800044 	addi	r2,r2,1
10004308:	44000015 	stw	r16,0(r8)
1000430c:	28c7883a 	add	r3,r5,r3
10004310:	003b5b06 	br	10003080 <__alt_data_end+0xf8003080>
10004314:	01040074 	movhi	r4,4097
10004318:	2108ff84 	addi	r4,r4,9214
1000431c:	d9003515 	stw	r4,212(sp)
10004320:	003af206 	br	10002eec <__alt_data_end+0xf8002eec>
10004324:	013fffc4 	movi	r4,-1
10004328:	003a0806 	br	10002b4c <__alt_data_end+0xf8002b4c>
1000432c:	0023883a 	mov	r17,zero
10004330:	003d9d06 	br	100039a8 <__alt_data_end+0xf80039a8>
10004334:	d9002d17 	ldw	r4,180(sp)
10004338:	d9801e04 	addi	r6,sp,120
1000433c:	b80b883a 	mov	r5,r23
10004340:	0009e640 	call	10009e64 <__sprint_r>
10004344:	1039d31e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10004348:	d8c02017 	ldw	r3,128(sp)
1000434c:	da000404 	addi	r8,sp,16
10004350:	003d9406 	br	100039a4 <__alt_data_end+0xf80039a4>
10004354:	01040074 	movhi	r4,4097
10004358:	2108fb84 	addi	r4,r4,9198
1000435c:	d9002c15 	stw	r4,176(sp)
10004360:	d9002c17 	ldw	r4,176(sp)
10004364:	1c47883a 	add	r3,r3,r17
10004368:	10800044 	addi	r2,r2,1
1000436c:	41000015 	stw	r4,0(r8)
10004370:	44400115 	stw	r17,4(r8)
10004374:	d8c02015 	stw	r3,128(sp)
10004378:	d8801f15 	stw	r2,124(sp)
1000437c:	010001c4 	movi	r4,7
10004380:	20bfd716 	blt	r4,r2,100042e0 <__alt_data_end+0xf80042e0>
10004384:	42000204 	addi	r8,r8,8
10004388:	003fdd06 	br	10004300 <__alt_data_end+0xf8004300>
1000438c:	d9002d17 	ldw	r4,180(sp)
10004390:	d9801e04 	addi	r6,sp,120
10004394:	b80b883a 	mov	r5,r23
10004398:	0009e640 	call	10009e64 <__sprint_r>
1000439c:	1039bd1e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
100043a0:	d8802617 	ldw	r2,152(sp)
100043a4:	d8c02017 	ldw	r3,128(sp)
100043a8:	da000404 	addi	r8,sp,16
100043ac:	003e1006 	br	10003bf0 <__alt_data_end+0xf8003bf0>
100043b0:	00800044 	movi	r2,1
100043b4:	10803fcc 	andi	r2,r2,255
100043b8:	00c00044 	movi	r3,1
100043bc:	10fa0d26 	beq	r2,r3,10002bf4 <__alt_data_end+0xf8002bf4>
100043c0:	00c00084 	movi	r3,2
100043c4:	10fbaf26 	beq	r2,r3,10003284 <__alt_data_end+0xf8003284>
100043c8:	003a6d06 	br	10002d80 <__alt_data_end+0xf8002d80>
100043cc:	01040074 	movhi	r4,4097
100043d0:	2108ff84 	addi	r4,r4,9214
100043d4:	d9003515 	stw	r4,212(sp)
100043d8:	003b5406 	br	1000312c <__alt_data_end+0xf800312c>
100043dc:	d8802a17 	ldw	r2,168(sp)
100043e0:	00c00184 	movi	r3,6
100043e4:	1880012e 	bgeu	r3,r2,100043ec <___vfprintf_internal_r+0x1d68>
100043e8:	1805883a 	mov	r2,r3
100043ec:	d8802b15 	stw	r2,172(sp)
100043f0:	1000ef16 	blt	r2,zero,100047b0 <___vfprintf_internal_r+0x212c>
100043f4:	04040074 	movhi	r16,4097
100043f8:	d8802915 	stw	r2,164(sp)
100043fc:	dcc02e15 	stw	r19,184(sp)
10004400:	d8002a15 	stw	zero,168(sp)
10004404:	d8003215 	stw	zero,200(sp)
10004408:	8408f904 	addi	r16,r16,9188
1000440c:	0039883a 	mov	fp,zero
10004410:	003a8006 	br	10002e14 <__alt_data_end+0xf8002e14>
10004414:	0021883a 	mov	r16,zero
10004418:	003e0706 	br	10003c38 <__alt_data_end+0xf8003c38>
1000441c:	d9002d17 	ldw	r4,180(sp)
10004420:	d9801e04 	addi	r6,sp,120
10004424:	b80b883a 	mov	r5,r23
10004428:	0009e640 	call	10009e64 <__sprint_r>
1000442c:	1039991e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
10004430:	d8802617 	ldw	r2,152(sp)
10004434:	d9403317 	ldw	r5,204(sp)
10004438:	d8c02017 	ldw	r3,128(sp)
1000443c:	da000404 	addi	r8,sp,16
10004440:	2885c83a 	sub	r2,r5,r2
10004444:	003dfb06 	br	10003c34 <__alt_data_end+0xf8003c34>
10004448:	9080004c 	andi	r2,r18,1
1000444c:	103e8f1e 	bne	r2,zero,10003e8c <__alt_data_end+0xf8003e8c>
10004450:	d8802117 	ldw	r2,132(sp)
10004454:	003e9e06 	br	10003ed0 <__alt_data_end+0xf8003ed0>
10004458:	1025883a 	mov	r18,r2
1000445c:	0039883a 	mov	fp,zero
10004460:	00800084 	movi	r2,2
10004464:	003fd306 	br	100043b4 <__alt_data_end+0xf80043b4>
10004468:	07000b44 	movi	fp,45
1000446c:	df002785 	stb	fp,158(sp)
10004470:	003a1b06 	br	10002ce0 <__alt_data_end+0xf8002ce0>
10004474:	00c00b44 	movi	r3,45
10004478:	d8c02785 	stb	r3,158(sp)
1000447c:	d8802915 	stw	r2,164(sp)
10004480:	dc802c17 	ldw	r18,176(sp)
10004484:	d8002a15 	stw	zero,168(sp)
10004488:	07000b44 	movi	fp,45
1000448c:	003a5e06 	br	10002e08 <__alt_data_end+0xf8002e08>
10004490:	04040074 	movhi	r16,4097
10004494:	8408ee04 	addi	r16,r16,9144
10004498:	003f4706 	br	100041b8 <__alt_data_end+0xf80041b8>
1000449c:	d9002e17 	ldw	r4,184(sp)
100044a0:	d9402f17 	ldw	r5,188(sp)
100044a4:	20800017 	ldw	r2,0(r4)
100044a8:	21000104 	addi	r4,r4,4
100044ac:	d9002e15 	stw	r4,184(sp)
100044b0:	11400015 	stw	r5,0(r2)
100044b4:	0038ab06 	br	10002764 <__alt_data_end+0xf8002764>
100044b8:	dd802617 	ldw	r22,152(sp)
100044bc:	00bfff44 	movi	r2,-3
100044c0:	b0801c16 	blt	r22,r2,10004534 <___vfprintf_internal_r+0x1eb0>
100044c4:	d9402a17 	ldw	r5,168(sp)
100044c8:	2d801a16 	blt	r5,r22,10004534 <___vfprintf_internal_r+0x1eb0>
100044cc:	dd803215 	stw	r22,200(sp)
100044d0:	003e8906 	br	10003ef8 <__alt_data_end+0xf8003ef8>
100044d4:	01040074 	movhi	r4,4097
100044d8:	2108fb84 	addi	r4,r4,9198
100044dc:	d9002c15 	stw	r4,176(sp)
100044e0:	003c9106 	br	10003728 <__alt_data_end+0xf8003728>
100044e4:	e005883a 	mov	r2,fp
100044e8:	003e7906 	br	10003ed0 <__alt_data_end+0xf8003ed0>
100044ec:	d9002a17 	ldw	r4,168(sp)
100044f0:	df002783 	ldbu	fp,158(sp)
100044f4:	dcc02e15 	stw	r19,184(sp)
100044f8:	d9002915 	stw	r4,164(sp)
100044fc:	d9002b15 	stw	r4,172(sp)
10004500:	d8002a15 	stw	zero,168(sp)
10004504:	d8003215 	stw	zero,200(sp)
10004508:	003a3b06 	br	10002df8 <__alt_data_end+0xf8002df8>
1000450c:	9080004c 	andi	r2,r18,1
10004510:	0039883a 	mov	fp,zero
10004514:	10000426 	beq	r2,zero,10004528 <___vfprintf_internal_r+0x1ea4>
10004518:	00800c04 	movi	r2,48
1000451c:	dc001dc4 	addi	r16,sp,119
10004520:	d8801dc5 	stb	r2,119(sp)
10004524:	003b6406 	br	100032b8 <__alt_data_end+0xf80032b8>
10004528:	d8002b15 	stw	zero,172(sp)
1000452c:	dc001e04 	addi	r16,sp,120
10004530:	003a2b06 	br	10002de0 <__alt_data_end+0xf8002de0>
10004534:	8c7fff84 	addi	r17,r17,-2
10004538:	b5bfffc4 	addi	r22,r22,-1
1000453c:	dd802615 	stw	r22,152(sp)
10004540:	dc4022c5 	stb	r17,139(sp)
10004544:	b000bf16 	blt	r22,zero,10004844 <___vfprintf_internal_r+0x21c0>
10004548:	00800ac4 	movi	r2,43
1000454c:	d8802305 	stb	r2,140(sp)
10004550:	00800244 	movi	r2,9
10004554:	15807016 	blt	r2,r22,10004718 <___vfprintf_internal_r+0x2094>
10004558:	00800c04 	movi	r2,48
1000455c:	b5800c04 	addi	r22,r22,48
10004560:	d8802345 	stb	r2,141(sp)
10004564:	dd802385 	stb	r22,142(sp)
10004568:	d88023c4 	addi	r2,sp,143
1000456c:	df0022c4 	addi	fp,sp,139
10004570:	d8c03317 	ldw	r3,204(sp)
10004574:	1739c83a 	sub	fp,r2,fp
10004578:	d9003317 	ldw	r4,204(sp)
1000457c:	e0c7883a 	add	r3,fp,r3
10004580:	df003a15 	stw	fp,232(sp)
10004584:	d8c02b15 	stw	r3,172(sp)
10004588:	00800044 	movi	r2,1
1000458c:	1100b30e 	bge	r2,r4,1000485c <___vfprintf_internal_r+0x21d8>
10004590:	d8c02b17 	ldw	r3,172(sp)
10004594:	18c00044 	addi	r3,r3,1
10004598:	d8c02b15 	stw	r3,172(sp)
1000459c:	1805883a 	mov	r2,r3
100045a0:	1800ac16 	blt	r3,zero,10004854 <___vfprintf_internal_r+0x21d0>
100045a4:	d8003215 	stw	zero,200(sp)
100045a8:	003e5d06 	br	10003f20 <__alt_data_end+0xf8003f20>
100045ac:	d9002d17 	ldw	r4,180(sp)
100045b0:	d9801e04 	addi	r6,sp,120
100045b4:	b80b883a 	mov	r5,r23
100045b8:	0009e640 	call	10009e64 <__sprint_r>
100045bc:	1039351e 	bne	r2,zero,10002a94 <__alt_data_end+0xf8002a94>
100045c0:	dc402617 	ldw	r17,152(sp)
100045c4:	d8c02017 	ldw	r3,128(sp)
100045c8:	d8801f17 	ldw	r2,124(sp)
100045cc:	da000404 	addi	r8,sp,16
100045d0:	003ed606 	br	1000412c <__alt_data_end+0xf800412c>
100045d4:	182b883a 	mov	r21,r3
100045d8:	d8002a15 	stw	zero,168(sp)
100045dc:	00388c06 	br	10002810 <__alt_data_end+0xf8002810>
100045e0:	d8802a17 	ldw	r2,168(sp)
100045e4:	103e071e 	bne	r2,zero,10003e04 <__alt_data_end+0xf8003e04>
100045e8:	dc002a15 	stw	r16,168(sp)
100045ec:	003e0506 	br	10003e04 <__alt_data_end+0xf8003e04>
100045f0:	d9002a17 	ldw	r4,168(sp)
100045f4:	20c00044 	addi	r3,r4,1
100045f8:	003e0f06 	br	10003e38 <__alt_data_end+0xf8003e38>
100045fc:	01400184 	movi	r5,6
10004600:	d9402a15 	stw	r5,168(sp)
10004604:	003dff06 	br	10003e04 <__alt_data_end+0xf8003e04>
10004608:	d8802104 	addi	r2,sp,132
1000460c:	d8800315 	stw	r2,12(sp)
10004610:	d8802504 	addi	r2,sp,148
10004614:	d8800215 	stw	r2,8(sp)
10004618:	d8802604 	addi	r2,sp,152
1000461c:	d8800115 	stw	r2,4(sp)
10004620:	d8802a17 	ldw	r2,168(sp)
10004624:	d9403617 	ldw	r5,216(sp)
10004628:	d9002d17 	ldw	r4,180(sp)
1000462c:	d8800015 	stw	r2,0(sp)
10004630:	01c000c4 	movi	r7,3
10004634:	980d883a 	mov	r6,r19
10004638:	da003d15 	stw	r8,244(sp)
1000463c:	0004db40 	call	10004db4 <_dtoa_r>
10004640:	d8c02a17 	ldw	r3,168(sp)
10004644:	da003d17 	ldw	r8,244(sp)
10004648:	1021883a 	mov	r16,r2
1000464c:	10f9883a 	add	fp,r2,r3
10004650:	81000007 	ldb	r4,0(r16)
10004654:	00800c04 	movi	r2,48
10004658:	20805e26 	beq	r4,r2,100047d4 <___vfprintf_internal_r+0x2150>
1000465c:	d8c02617 	ldw	r3,152(sp)
10004660:	e0f9883a 	add	fp,fp,r3
10004664:	003e0a06 	br	10003e90 <__alt_data_end+0xf8003e90>
10004668:	00c00b44 	movi	r3,45
1000466c:	24e0003c 	xorhi	r19,r4,32768
10004670:	d8c02905 	stb	r3,164(sp)
10004674:	003de906 	br	10003e1c <__alt_data_end+0xf8003e1c>
10004678:	d8c03217 	ldw	r3,200(sp)
1000467c:	00c07a0e 	bge	zero,r3,10004868 <___vfprintf_internal_r+0x21e4>
10004680:	00800044 	movi	r2,1
10004684:	d9003317 	ldw	r4,204(sp)
10004688:	1105883a 	add	r2,r2,r4
1000468c:	d8802b15 	stw	r2,172(sp)
10004690:	10004e16 	blt	r2,zero,100047cc <___vfprintf_internal_r+0x2148>
10004694:	044019c4 	movi	r17,103
10004698:	003e2106 	br	10003f20 <__alt_data_end+0xf8003f20>
1000469c:	d9002a17 	ldw	r4,168(sp)
100046a0:	d8802104 	addi	r2,sp,132
100046a4:	d8800315 	stw	r2,12(sp)
100046a8:	d9000015 	stw	r4,0(sp)
100046ac:	d8802504 	addi	r2,sp,148
100046b0:	d9403617 	ldw	r5,216(sp)
100046b4:	d9002d17 	ldw	r4,180(sp)
100046b8:	d8800215 	stw	r2,8(sp)
100046bc:	d8802604 	addi	r2,sp,152
100046c0:	d8800115 	stw	r2,4(sp)
100046c4:	01c000c4 	movi	r7,3
100046c8:	980d883a 	mov	r6,r19
100046cc:	da003d15 	stw	r8,244(sp)
100046d0:	0004db40 	call	10004db4 <_dtoa_r>
100046d4:	d8c02a17 	ldw	r3,168(sp)
100046d8:	da003d17 	ldw	r8,244(sp)
100046dc:	1021883a 	mov	r16,r2
100046e0:	00801184 	movi	r2,70
100046e4:	80f9883a 	add	fp,r16,r3
100046e8:	88bfd926 	beq	r17,r2,10004650 <__alt_data_end+0xf8004650>
100046ec:	003de806 	br	10003e90 <__alt_data_end+0xf8003e90>
100046f0:	d9002a17 	ldw	r4,168(sp)
100046f4:	00c04d0e 	bge	zero,r3,1000482c <___vfprintf_internal_r+0x21a8>
100046f8:	2000441e 	bne	r4,zero,1000480c <___vfprintf_internal_r+0x2188>
100046fc:	9480004c 	andi	r18,r18,1
10004700:	9000421e 	bne	r18,zero,1000480c <___vfprintf_internal_r+0x2188>
10004704:	1805883a 	mov	r2,r3
10004708:	18006f16 	blt	r3,zero,100048c8 <___vfprintf_internal_r+0x2244>
1000470c:	d8c03217 	ldw	r3,200(sp)
10004710:	d8c02b15 	stw	r3,172(sp)
10004714:	003e0206 	br	10003f20 <__alt_data_end+0xf8003f20>
10004718:	df0022c4 	addi	fp,sp,139
1000471c:	dc002a15 	stw	r16,168(sp)
10004720:	4027883a 	mov	r19,r8
10004724:	e021883a 	mov	r16,fp
10004728:	b009883a 	mov	r4,r22
1000472c:	01400284 	movi	r5,10
10004730:	000c9f00 	call	1000c9f0 <__modsi3>
10004734:	10800c04 	addi	r2,r2,48
10004738:	843fffc4 	addi	r16,r16,-1
1000473c:	b009883a 	mov	r4,r22
10004740:	01400284 	movi	r5,10
10004744:	80800005 	stb	r2,0(r16)
10004748:	000c96c0 	call	1000c96c <__divsi3>
1000474c:	102d883a 	mov	r22,r2
10004750:	00800244 	movi	r2,9
10004754:	15bff416 	blt	r2,r22,10004728 <__alt_data_end+0xf8004728>
10004758:	9811883a 	mov	r8,r19
1000475c:	b0800c04 	addi	r2,r22,48
10004760:	8027883a 	mov	r19,r16
10004764:	997fffc4 	addi	r5,r19,-1
10004768:	98bfffc5 	stb	r2,-1(r19)
1000476c:	dc002a17 	ldw	r16,168(sp)
10004770:	2f006d2e 	bgeu	r5,fp,10004928 <___vfprintf_internal_r+0x22a4>
10004774:	d9c02384 	addi	r7,sp,142
10004778:	3ccfc83a 	sub	r7,r7,r19
1000477c:	d9002344 	addi	r4,sp,141
10004780:	e1cf883a 	add	r7,fp,r7
10004784:	00000106 	br	1000478c <___vfprintf_internal_r+0x2108>
10004788:	28800003 	ldbu	r2,0(r5)
1000478c:	20800005 	stb	r2,0(r4)
10004790:	21000044 	addi	r4,r4,1
10004794:	29400044 	addi	r5,r5,1
10004798:	393ffb1e 	bne	r7,r4,10004788 <__alt_data_end+0xf8004788>
1000479c:	d8802304 	addi	r2,sp,140
100047a0:	14c5c83a 	sub	r2,r2,r19
100047a4:	d8c02344 	addi	r3,sp,141
100047a8:	1885883a 	add	r2,r3,r2
100047ac:	003f7006 	br	10004570 <__alt_data_end+0xf8004570>
100047b0:	0005883a 	mov	r2,zero
100047b4:	003f0f06 	br	100043f4 <__alt_data_end+0xf80043f4>
100047b8:	d8c03217 	ldw	r3,200(sp)
100047bc:	18c00044 	addi	r3,r3,1
100047c0:	d8c02b15 	stw	r3,172(sp)
100047c4:	1805883a 	mov	r2,r3
100047c8:	183fb20e 	bge	r3,zero,10004694 <__alt_data_end+0xf8004694>
100047cc:	0005883a 	mov	r2,zero
100047d0:	003fb006 	br	10004694 <__alt_data_end+0xf8004694>
100047d4:	d9003617 	ldw	r4,216(sp)
100047d8:	000d883a 	mov	r6,zero
100047dc:	000f883a 	mov	r7,zero
100047e0:	980b883a 	mov	r5,r19
100047e4:	d8c03c15 	stw	r3,240(sp)
100047e8:	da003d15 	stw	r8,244(sp)
100047ec:	000ddc40 	call	1000ddc4 <__eqdf2>
100047f0:	d8c03c17 	ldw	r3,240(sp)
100047f4:	da003d17 	ldw	r8,244(sp)
100047f8:	103f9826 	beq	r2,zero,1000465c <__alt_data_end+0xf800465c>
100047fc:	00800044 	movi	r2,1
10004800:	10c7c83a 	sub	r3,r2,r3
10004804:	d8c02615 	stw	r3,152(sp)
10004808:	003f9506 	br	10004660 <__alt_data_end+0xf8004660>
1000480c:	d9002a17 	ldw	r4,168(sp)
10004810:	d8c03217 	ldw	r3,200(sp)
10004814:	20800044 	addi	r2,r4,1
10004818:	1885883a 	add	r2,r3,r2
1000481c:	d8802b15 	stw	r2,172(sp)
10004820:	103dbf0e 	bge	r2,zero,10003f20 <__alt_data_end+0xf8003f20>
10004824:	0005883a 	mov	r2,zero
10004828:	003dbd06 	br	10003f20 <__alt_data_end+0xf8003f20>
1000482c:	2000201e 	bne	r4,zero,100048b0 <___vfprintf_internal_r+0x222c>
10004830:	9480004c 	andi	r18,r18,1
10004834:	90001e1e 	bne	r18,zero,100048b0 <___vfprintf_internal_r+0x222c>
10004838:	00800044 	movi	r2,1
1000483c:	d8802b15 	stw	r2,172(sp)
10004840:	003db706 	br	10003f20 <__alt_data_end+0xf8003f20>
10004844:	00800b44 	movi	r2,45
10004848:	05adc83a 	sub	r22,zero,r22
1000484c:	d8802305 	stb	r2,140(sp)
10004850:	003f3f06 	br	10004550 <__alt_data_end+0xf8004550>
10004854:	0005883a 	mov	r2,zero
10004858:	003f5206 	br	100045a4 <__alt_data_end+0xf80045a4>
1000485c:	90a4703a 	and	r18,r18,r2
10004860:	903f4e26 	beq	r18,zero,1000459c <__alt_data_end+0xf800459c>
10004864:	003f4a06 	br	10004590 <__alt_data_end+0xf8004590>
10004868:	00800084 	movi	r2,2
1000486c:	10c5c83a 	sub	r2,r2,r3
10004870:	003f8406 	br	10004684 <__alt_data_end+0xf8004684>
10004874:	d9402e17 	ldw	r5,184(sp)
10004878:	d9002e17 	ldw	r4,184(sp)
1000487c:	ac400043 	ldbu	r17,1(r21)
10004880:	29400017 	ldw	r5,0(r5)
10004884:	20800104 	addi	r2,r4,4
10004888:	d8802e15 	stw	r2,184(sp)
1000488c:	d9402a15 	stw	r5,168(sp)
10004890:	182b883a 	mov	r21,r3
10004894:	283e7b0e 	bge	r5,zero,10004284 <__alt_data_end+0xf8004284>
10004898:	8c403fcc 	andi	r17,r17,255
1000489c:	017fffc4 	movi	r5,-1
100048a0:	8c40201c 	xori	r17,r17,128
100048a4:	d9402a15 	stw	r5,168(sp)
100048a8:	8c7fe004 	addi	r17,r17,-128
100048ac:	0037d706 	br	1000280c <__alt_data_end+0xf800280c>
100048b0:	d8c02a17 	ldw	r3,168(sp)
100048b4:	18c00084 	addi	r3,r3,2
100048b8:	d8c02b15 	stw	r3,172(sp)
100048bc:	1805883a 	mov	r2,r3
100048c0:	183d970e 	bge	r3,zero,10003f20 <__alt_data_end+0xf8003f20>
100048c4:	003fd706 	br	10004824 <__alt_data_end+0xf8004824>
100048c8:	0005883a 	mov	r2,zero
100048cc:	003f8f06 	br	1000470c <__alt_data_end+0xf800470c>
100048d0:	9080004c 	andi	r2,r18,1
100048d4:	103f821e 	bne	r2,zero,100046e0 <__alt_data_end+0xf80046e0>
100048d8:	d8802117 	ldw	r2,132(sp)
100048dc:	1405c83a 	sub	r2,r2,r16
100048e0:	d8803315 	stw	r2,204(sp)
100048e4:	b47ef426 	beq	r22,r17,100044b8 <__alt_data_end+0xf80044b8>
100048e8:	dd802617 	ldw	r22,152(sp)
100048ec:	003f1206 	br	10004538 <__alt_data_end+0xf8004538>
100048f0:	d8c02b03 	ldbu	r3,172(sp)
100048f4:	d8c02785 	stb	r3,158(sp)
100048f8:	0038df06 	br	10002c78 <__alt_data_end+0xf8002c78>
100048fc:	d8c02b03 	ldbu	r3,172(sp)
10004900:	d8c02785 	stb	r3,158(sp)
10004904:	0038aa06 	br	10002bb0 <__alt_data_end+0xf8002bb0>
10004908:	d8c02b03 	ldbu	r3,172(sp)
1000490c:	d8c02785 	stb	r3,158(sp)
10004910:	003a4306 	br	10003220 <__alt_data_end+0xf8003220>
10004914:	d8c02b03 	ldbu	r3,172(sp)
10004918:	d8c02785 	stb	r3,158(sp)
1000491c:	003af506 	br	100034f4 <__alt_data_end+0xf80034f4>
10004920:	0005883a 	mov	r2,zero
10004924:	003d7b06 	br	10003f14 <__alt_data_end+0xf8003f14>
10004928:	d8802344 	addi	r2,sp,141
1000492c:	003f1006 	br	10004570 <__alt_data_end+0xf8004570>
10004930:	d8c02b03 	ldbu	r3,172(sp)
10004934:	d8c02785 	stb	r3,158(sp)
10004938:	0038fd06 	br	10002d30 <__alt_data_end+0xf8002d30>
1000493c:	d8c02b03 	ldbu	r3,172(sp)
10004940:	d8c02785 	stb	r3,158(sp)
10004944:	003a9706 	br	100033a4 <__alt_data_end+0xf80033a4>
10004948:	d8c02b03 	ldbu	r3,172(sp)
1000494c:	d8c02785 	stb	r3,158(sp)
10004950:	003a1806 	br	100031b4 <__alt_data_end+0xf80031b4>
10004954:	d8c02b03 	ldbu	r3,172(sp)
10004958:	d8c02785 	stb	r3,158(sp)
1000495c:	003abe06 	br	10003458 <__alt_data_end+0xf8003458>

10004960 <__vfprintf_internal>:
10004960:	00840074 	movhi	r2,4097
10004964:	10905704 	addi	r2,r2,16732
10004968:	300f883a 	mov	r7,r6
1000496c:	280d883a 	mov	r6,r5
10004970:	200b883a 	mov	r5,r4
10004974:	11000017 	ldw	r4,0(r2)
10004978:	00026841 	jmpi	10002684 <___vfprintf_internal_r>

1000497c <__sbprintf>:
1000497c:	2880030b 	ldhu	r2,12(r5)
10004980:	2ac01917 	ldw	r11,100(r5)
10004984:	2a80038b 	ldhu	r10,14(r5)
10004988:	2a400717 	ldw	r9,28(r5)
1000498c:	2a000917 	ldw	r8,36(r5)
10004990:	defee204 	addi	sp,sp,-1144
10004994:	00c10004 	movi	r3,1024
10004998:	dc011a15 	stw	r16,1128(sp)
1000499c:	10bfff4c 	andi	r2,r2,65533
100049a0:	2821883a 	mov	r16,r5
100049a4:	d8cb883a 	add	r5,sp,r3
100049a8:	dc811c15 	stw	r18,1136(sp)
100049ac:	dc411b15 	stw	r17,1132(sp)
100049b0:	dfc11d15 	stw	ra,1140(sp)
100049b4:	2025883a 	mov	r18,r4
100049b8:	d881030d 	sth	r2,1036(sp)
100049bc:	dac11915 	stw	r11,1124(sp)
100049c0:	da81038d 	sth	r10,1038(sp)
100049c4:	da410715 	stw	r9,1052(sp)
100049c8:	da010915 	stw	r8,1060(sp)
100049cc:	dec10015 	stw	sp,1024(sp)
100049d0:	dec10415 	stw	sp,1040(sp)
100049d4:	d8c10215 	stw	r3,1032(sp)
100049d8:	d8c10515 	stw	r3,1044(sp)
100049dc:	d8010615 	stw	zero,1048(sp)
100049e0:	00026840 	call	10002684 <___vfprintf_internal_r>
100049e4:	1023883a 	mov	r17,r2
100049e8:	10000416 	blt	r2,zero,100049fc <__sbprintf+0x80>
100049ec:	d9410004 	addi	r5,sp,1024
100049f0:	9009883a 	mov	r4,r18
100049f4:	00066580 	call	10006658 <_fflush_r>
100049f8:	10000d1e 	bne	r2,zero,10004a30 <__sbprintf+0xb4>
100049fc:	d881030b 	ldhu	r2,1036(sp)
10004a00:	1080100c 	andi	r2,r2,64
10004a04:	10000326 	beq	r2,zero,10004a14 <__sbprintf+0x98>
10004a08:	8080030b 	ldhu	r2,12(r16)
10004a0c:	10801014 	ori	r2,r2,64
10004a10:	8080030d 	sth	r2,12(r16)
10004a14:	8805883a 	mov	r2,r17
10004a18:	dfc11d17 	ldw	ra,1140(sp)
10004a1c:	dc811c17 	ldw	r18,1136(sp)
10004a20:	dc411b17 	ldw	r17,1132(sp)
10004a24:	dc011a17 	ldw	r16,1128(sp)
10004a28:	dec11e04 	addi	sp,sp,1144
10004a2c:	f800283a 	ret
10004a30:	047fffc4 	movi	r17,-1
10004a34:	003ff106 	br	100049fc <__alt_data_end+0xf80049fc>

10004a38 <__swsetup_r>:
10004a38:	00840074 	movhi	r2,4097
10004a3c:	defffd04 	addi	sp,sp,-12
10004a40:	10905704 	addi	r2,r2,16732
10004a44:	dc400115 	stw	r17,4(sp)
10004a48:	2023883a 	mov	r17,r4
10004a4c:	11000017 	ldw	r4,0(r2)
10004a50:	dc000015 	stw	r16,0(sp)
10004a54:	dfc00215 	stw	ra,8(sp)
10004a58:	2821883a 	mov	r16,r5
10004a5c:	20000226 	beq	r4,zero,10004a68 <__swsetup_r+0x30>
10004a60:	20800e17 	ldw	r2,56(r4)
10004a64:	10003126 	beq	r2,zero,10004b2c <__swsetup_r+0xf4>
10004a68:	8080030b 	ldhu	r2,12(r16)
10004a6c:	10c0020c 	andi	r3,r2,8
10004a70:	1009883a 	mov	r4,r2
10004a74:	18000f26 	beq	r3,zero,10004ab4 <__swsetup_r+0x7c>
10004a78:	80c00417 	ldw	r3,16(r16)
10004a7c:	18001526 	beq	r3,zero,10004ad4 <__swsetup_r+0x9c>
10004a80:	1100004c 	andi	r4,r2,1
10004a84:	20001c1e 	bne	r4,zero,10004af8 <__swsetup_r+0xc0>
10004a88:	1080008c 	andi	r2,r2,2
10004a8c:	1000291e 	bne	r2,zero,10004b34 <__swsetup_r+0xfc>
10004a90:	80800517 	ldw	r2,20(r16)
10004a94:	80800215 	stw	r2,8(r16)
10004a98:	18001c26 	beq	r3,zero,10004b0c <__swsetup_r+0xd4>
10004a9c:	0005883a 	mov	r2,zero
10004aa0:	dfc00217 	ldw	ra,8(sp)
10004aa4:	dc400117 	ldw	r17,4(sp)
10004aa8:	dc000017 	ldw	r16,0(sp)
10004aac:	dec00304 	addi	sp,sp,12
10004ab0:	f800283a 	ret
10004ab4:	2080040c 	andi	r2,r4,16
10004ab8:	10002e26 	beq	r2,zero,10004b74 <__swsetup_r+0x13c>
10004abc:	2080010c 	andi	r2,r4,4
10004ac0:	10001e1e 	bne	r2,zero,10004b3c <__swsetup_r+0x104>
10004ac4:	80c00417 	ldw	r3,16(r16)
10004ac8:	20800214 	ori	r2,r4,8
10004acc:	8080030d 	sth	r2,12(r16)
10004ad0:	183feb1e 	bne	r3,zero,10004a80 <__alt_data_end+0xf8004a80>
10004ad4:	1100a00c 	andi	r4,r2,640
10004ad8:	01408004 	movi	r5,512
10004adc:	217fe826 	beq	r4,r5,10004a80 <__alt_data_end+0xf8004a80>
10004ae0:	800b883a 	mov	r5,r16
10004ae4:	8809883a 	mov	r4,r17
10004ae8:	00075f40 	call	100075f4 <__smakebuf_r>
10004aec:	8080030b 	ldhu	r2,12(r16)
10004af0:	80c00417 	ldw	r3,16(r16)
10004af4:	003fe206 	br	10004a80 <__alt_data_end+0xf8004a80>
10004af8:	80800517 	ldw	r2,20(r16)
10004afc:	80000215 	stw	zero,8(r16)
10004b00:	0085c83a 	sub	r2,zero,r2
10004b04:	80800615 	stw	r2,24(r16)
10004b08:	183fe41e 	bne	r3,zero,10004a9c <__alt_data_end+0xf8004a9c>
10004b0c:	80c0030b 	ldhu	r3,12(r16)
10004b10:	0005883a 	mov	r2,zero
10004b14:	1900200c 	andi	r4,r3,128
10004b18:	203fe126 	beq	r4,zero,10004aa0 <__alt_data_end+0xf8004aa0>
10004b1c:	18c01014 	ori	r3,r3,64
10004b20:	80c0030d 	sth	r3,12(r16)
10004b24:	00bfffc4 	movi	r2,-1
10004b28:	003fdd06 	br	10004aa0 <__alt_data_end+0xf8004aa0>
10004b2c:	0006a440 	call	10006a44 <__sinit>
10004b30:	003fcd06 	br	10004a68 <__alt_data_end+0xf8004a68>
10004b34:	0005883a 	mov	r2,zero
10004b38:	003fd606 	br	10004a94 <__alt_data_end+0xf8004a94>
10004b3c:	81400c17 	ldw	r5,48(r16)
10004b40:	28000626 	beq	r5,zero,10004b5c <__swsetup_r+0x124>
10004b44:	80801004 	addi	r2,r16,64
10004b48:	28800326 	beq	r5,r2,10004b58 <__swsetup_r+0x120>
10004b4c:	8809883a 	mov	r4,r17
10004b50:	0006bb80 	call	10006bb8 <_free_r>
10004b54:	8100030b 	ldhu	r4,12(r16)
10004b58:	80000c15 	stw	zero,48(r16)
10004b5c:	80c00417 	ldw	r3,16(r16)
10004b60:	00bff6c4 	movi	r2,-37
10004b64:	1108703a 	and	r4,r2,r4
10004b68:	80000115 	stw	zero,4(r16)
10004b6c:	80c00015 	stw	r3,0(r16)
10004b70:	003fd506 	br	10004ac8 <__alt_data_end+0xf8004ac8>
10004b74:	00800244 	movi	r2,9
10004b78:	88800015 	stw	r2,0(r17)
10004b7c:	20801014 	ori	r2,r4,64
10004b80:	8080030d 	sth	r2,12(r16)
10004b84:	00bfffc4 	movi	r2,-1
10004b88:	003fc506 	br	10004aa0 <__alt_data_end+0xf8004aa0>

10004b8c <quorem>:
10004b8c:	defff204 	addi	sp,sp,-56
10004b90:	ddc00b15 	stw	r23,44(sp)
10004b94:	20800417 	ldw	r2,16(r4)
10004b98:	2dc00417 	ldw	r23,16(r5)
10004b9c:	dfc00d15 	stw	ra,52(sp)
10004ba0:	df000c15 	stw	fp,48(sp)
10004ba4:	dd800a15 	stw	r22,40(sp)
10004ba8:	dd400915 	stw	r21,36(sp)
10004bac:	dd000815 	stw	r20,32(sp)
10004bb0:	dcc00715 	stw	r19,28(sp)
10004bb4:	dc800615 	stw	r18,24(sp)
10004bb8:	dc400515 	stw	r17,20(sp)
10004bbc:	dc000415 	stw	r16,16(sp)
10004bc0:	15c07a16 	blt	r2,r23,10004dac <quorem+0x220>
10004bc4:	bdffffc4 	addi	r23,r23,-1
10004bc8:	bde9883a 	add	r20,r23,r23
10004bcc:	28c00504 	addi	r3,r5,20
10004bd0:	a529883a 	add	r20,r20,r20
10004bd4:	1d39883a 	add	fp,r3,r20
10004bd8:	24c00504 	addi	r19,r4,20
10004bdc:	d9400215 	stw	r5,8(sp)
10004be0:	9d29883a 	add	r20,r19,r20
10004be4:	e1400017 	ldw	r5,0(fp)
10004be8:	d9000015 	stw	r4,0(sp)
10004bec:	a1000017 	ldw	r4,0(r20)
10004bf0:	29400044 	addi	r5,r5,1
10004bf4:	d8c00115 	stw	r3,4(sp)
10004bf8:	dd000315 	stw	r20,12(sp)
10004bfc:	000ca640 	call	1000ca64 <__udivsi3>
10004c00:	1025883a 	mov	r18,r2
10004c04:	10003026 	beq	r2,zero,10004cc8 <quorem+0x13c>
10004c08:	dc400117 	ldw	r17,4(sp)
10004c0c:	9829883a 	mov	r20,r19
10004c10:	002d883a 	mov	r22,zero
10004c14:	0021883a 	mov	r16,zero
10004c18:	8d400017 	ldw	r21,0(r17)
10004c1c:	900b883a 	mov	r5,r18
10004c20:	8c400104 	addi	r17,r17,4
10004c24:	a93fffcc 	andi	r4,r21,65535
10004c28:	000cb200 	call	1000cb20 <__mulsi3>
10004c2c:	a808d43a 	srli	r4,r21,16
10004c30:	900b883a 	mov	r5,r18
10004c34:	15ad883a 	add	r22,r2,r22
10004c38:	000cb200 	call	1000cb20 <__mulsi3>
10004c3c:	a1000017 	ldw	r4,0(r20)
10004c40:	b00cd43a 	srli	r6,r22,16
10004c44:	b0ffffcc 	andi	r3,r22,65535
10004c48:	217fffcc 	andi	r5,r4,65535
10004c4c:	2c21883a 	add	r16,r5,r16
10004c50:	80c7c83a 	sub	r3,r16,r3
10004c54:	2008d43a 	srli	r4,r4,16
10004c58:	1185883a 	add	r2,r2,r6
10004c5c:	1821d43a 	srai	r16,r3,16
10004c60:	117fffcc 	andi	r5,r2,65535
10004c64:	2149c83a 	sub	r4,r4,r5
10004c68:	2421883a 	add	r16,r4,r16
10004c6c:	8008943a 	slli	r4,r16,16
10004c70:	18ffffcc 	andi	r3,r3,65535
10004c74:	102cd43a 	srli	r22,r2,16
10004c78:	20c8b03a 	or	r4,r4,r3
10004c7c:	a1000015 	stw	r4,0(r20)
10004c80:	8021d43a 	srai	r16,r16,16
10004c84:	a5000104 	addi	r20,r20,4
10004c88:	e47fe32e 	bgeu	fp,r17,10004c18 <__alt_data_end+0xf8004c18>
10004c8c:	d8c00317 	ldw	r3,12(sp)
10004c90:	18800017 	ldw	r2,0(r3)
10004c94:	10000c1e 	bne	r2,zero,10004cc8 <quorem+0x13c>
10004c98:	18bfff04 	addi	r2,r3,-4
10004c9c:	9880082e 	bgeu	r19,r2,10004cc0 <quorem+0x134>
10004ca0:	18ffff17 	ldw	r3,-4(r3)
10004ca4:	18000326 	beq	r3,zero,10004cb4 <quorem+0x128>
10004ca8:	00000506 	br	10004cc0 <quorem+0x134>
10004cac:	10c00017 	ldw	r3,0(r2)
10004cb0:	1800031e 	bne	r3,zero,10004cc0 <quorem+0x134>
10004cb4:	10bfff04 	addi	r2,r2,-4
10004cb8:	bdffffc4 	addi	r23,r23,-1
10004cbc:	98bffb36 	bltu	r19,r2,10004cac <__alt_data_end+0xf8004cac>
10004cc0:	d8c00017 	ldw	r3,0(sp)
10004cc4:	1dc00415 	stw	r23,16(r3)
10004cc8:	d9400217 	ldw	r5,8(sp)
10004ccc:	d9000017 	ldw	r4,0(sp)
10004cd0:	0008df00 	call	10008df0 <__mcmp>
10004cd4:	10002816 	blt	r2,zero,10004d78 <quorem+0x1ec>
10004cd8:	dc400117 	ldw	r17,4(sp)
10004cdc:	94800044 	addi	r18,r18,1
10004ce0:	980d883a 	mov	r6,r19
10004ce4:	0007883a 	mov	r3,zero
10004ce8:	31000017 	ldw	r4,0(r6)
10004cec:	89400017 	ldw	r5,0(r17)
10004cf0:	31800104 	addi	r6,r6,4
10004cf4:	20bfffcc 	andi	r2,r4,65535
10004cf8:	10c7883a 	add	r3,r2,r3
10004cfc:	28bfffcc 	andi	r2,r5,65535
10004d00:	1885c83a 	sub	r2,r3,r2
10004d04:	280ad43a 	srli	r5,r5,16
10004d08:	2008d43a 	srli	r4,r4,16
10004d0c:	1007d43a 	srai	r3,r2,16
10004d10:	10bfffcc 	andi	r2,r2,65535
10004d14:	2149c83a 	sub	r4,r4,r5
10004d18:	20c9883a 	add	r4,r4,r3
10004d1c:	200a943a 	slli	r5,r4,16
10004d20:	8c400104 	addi	r17,r17,4
10004d24:	2007d43a 	srai	r3,r4,16
10004d28:	2884b03a 	or	r2,r5,r2
10004d2c:	30bfff15 	stw	r2,-4(r6)
10004d30:	e47fed2e 	bgeu	fp,r17,10004ce8 <__alt_data_end+0xf8004ce8>
10004d34:	bdc5883a 	add	r2,r23,r23
10004d38:	1085883a 	add	r2,r2,r2
10004d3c:	9887883a 	add	r3,r19,r2
10004d40:	18800017 	ldw	r2,0(r3)
10004d44:	10000c1e 	bne	r2,zero,10004d78 <quorem+0x1ec>
10004d48:	18bfff04 	addi	r2,r3,-4
10004d4c:	9880082e 	bgeu	r19,r2,10004d70 <quorem+0x1e4>
10004d50:	18ffff17 	ldw	r3,-4(r3)
10004d54:	18000326 	beq	r3,zero,10004d64 <quorem+0x1d8>
10004d58:	00000506 	br	10004d70 <quorem+0x1e4>
10004d5c:	10c00017 	ldw	r3,0(r2)
10004d60:	1800031e 	bne	r3,zero,10004d70 <quorem+0x1e4>
10004d64:	10bfff04 	addi	r2,r2,-4
10004d68:	bdffffc4 	addi	r23,r23,-1
10004d6c:	98bffb36 	bltu	r19,r2,10004d5c <__alt_data_end+0xf8004d5c>
10004d70:	d8c00017 	ldw	r3,0(sp)
10004d74:	1dc00415 	stw	r23,16(r3)
10004d78:	9005883a 	mov	r2,r18
10004d7c:	dfc00d17 	ldw	ra,52(sp)
10004d80:	df000c17 	ldw	fp,48(sp)
10004d84:	ddc00b17 	ldw	r23,44(sp)
10004d88:	dd800a17 	ldw	r22,40(sp)
10004d8c:	dd400917 	ldw	r21,36(sp)
10004d90:	dd000817 	ldw	r20,32(sp)
10004d94:	dcc00717 	ldw	r19,28(sp)
10004d98:	dc800617 	ldw	r18,24(sp)
10004d9c:	dc400517 	ldw	r17,20(sp)
10004da0:	dc000417 	ldw	r16,16(sp)
10004da4:	dec00e04 	addi	sp,sp,56
10004da8:	f800283a 	ret
10004dac:	0005883a 	mov	r2,zero
10004db0:	003ff206 	br	10004d7c <__alt_data_end+0xf8004d7c>

10004db4 <_dtoa_r>:
10004db4:	20801017 	ldw	r2,64(r4)
10004db8:	deffde04 	addi	sp,sp,-136
10004dbc:	df002015 	stw	fp,128(sp)
10004dc0:	dcc01b15 	stw	r19,108(sp)
10004dc4:	dc801a15 	stw	r18,104(sp)
10004dc8:	dc401915 	stw	r17,100(sp)
10004dcc:	dc001815 	stw	r16,96(sp)
10004dd0:	dfc02115 	stw	ra,132(sp)
10004dd4:	ddc01f15 	stw	r23,124(sp)
10004dd8:	dd801e15 	stw	r22,120(sp)
10004ddc:	dd401d15 	stw	r21,116(sp)
10004de0:	dd001c15 	stw	r20,112(sp)
10004de4:	d9c00315 	stw	r7,12(sp)
10004de8:	2039883a 	mov	fp,r4
10004dec:	3023883a 	mov	r17,r6
10004df0:	2825883a 	mov	r18,r5
10004df4:	dc002417 	ldw	r16,144(sp)
10004df8:	3027883a 	mov	r19,r6
10004dfc:	10000826 	beq	r2,zero,10004e20 <_dtoa_r+0x6c>
10004e00:	21801117 	ldw	r6,68(r4)
10004e04:	00c00044 	movi	r3,1
10004e08:	100b883a 	mov	r5,r2
10004e0c:	1986983a 	sll	r3,r3,r6
10004e10:	11800115 	stw	r6,4(r2)
10004e14:	10c00215 	stw	r3,8(r2)
10004e18:	00085140 	call	10008514 <_Bfree>
10004e1c:	e0001015 	stw	zero,64(fp)
10004e20:	88002e16 	blt	r17,zero,10004edc <_dtoa_r+0x128>
10004e24:	80000015 	stw	zero,0(r16)
10004e28:	889ffc2c 	andhi	r2,r17,32752
10004e2c:	00dffc34 	movhi	r3,32752
10004e30:	10c01c26 	beq	r2,r3,10004ea4 <_dtoa_r+0xf0>
10004e34:	000d883a 	mov	r6,zero
10004e38:	000f883a 	mov	r7,zero
10004e3c:	9009883a 	mov	r4,r18
10004e40:	980b883a 	mov	r5,r19
10004e44:	000ddc40 	call	1000ddc4 <__eqdf2>
10004e48:	10002b1e 	bne	r2,zero,10004ef8 <_dtoa_r+0x144>
10004e4c:	d9c02317 	ldw	r7,140(sp)
10004e50:	00800044 	movi	r2,1
10004e54:	38800015 	stw	r2,0(r7)
10004e58:	d8802517 	ldw	r2,148(sp)
10004e5c:	10019e26 	beq	r2,zero,100054d8 <_dtoa_r+0x724>
10004e60:	d8c02517 	ldw	r3,148(sp)
10004e64:	00840074 	movhi	r2,4097
10004e68:	1088fb44 	addi	r2,r2,9197
10004e6c:	18800015 	stw	r2,0(r3)
10004e70:	10bfffc4 	addi	r2,r2,-1
10004e74:	dfc02117 	ldw	ra,132(sp)
10004e78:	df002017 	ldw	fp,128(sp)
10004e7c:	ddc01f17 	ldw	r23,124(sp)
10004e80:	dd801e17 	ldw	r22,120(sp)
10004e84:	dd401d17 	ldw	r21,116(sp)
10004e88:	dd001c17 	ldw	r20,112(sp)
10004e8c:	dcc01b17 	ldw	r19,108(sp)
10004e90:	dc801a17 	ldw	r18,104(sp)
10004e94:	dc401917 	ldw	r17,100(sp)
10004e98:	dc001817 	ldw	r16,96(sp)
10004e9c:	dec02204 	addi	sp,sp,136
10004ea0:	f800283a 	ret
10004ea4:	d8c02317 	ldw	r3,140(sp)
10004ea8:	0089c3c4 	movi	r2,9999
10004eac:	18800015 	stw	r2,0(r3)
10004eb0:	90017726 	beq	r18,zero,10005490 <_dtoa_r+0x6dc>
10004eb4:	00840074 	movhi	r2,4097
10004eb8:	10890704 	addi	r2,r2,9244
10004ebc:	d9002517 	ldw	r4,148(sp)
10004ec0:	203fec26 	beq	r4,zero,10004e74 <__alt_data_end+0xf8004e74>
10004ec4:	10c000c7 	ldb	r3,3(r2)
10004ec8:	1801781e 	bne	r3,zero,100054ac <_dtoa_r+0x6f8>
10004ecc:	10c000c4 	addi	r3,r2,3
10004ed0:	d9802517 	ldw	r6,148(sp)
10004ed4:	30c00015 	stw	r3,0(r6)
10004ed8:	003fe606 	br	10004e74 <__alt_data_end+0xf8004e74>
10004edc:	04e00034 	movhi	r19,32768
10004ee0:	9cffffc4 	addi	r19,r19,-1
10004ee4:	00800044 	movi	r2,1
10004ee8:	8ce6703a 	and	r19,r17,r19
10004eec:	80800015 	stw	r2,0(r16)
10004ef0:	9823883a 	mov	r17,r19
10004ef4:	003fcc06 	br	10004e28 <__alt_data_end+0xf8004e28>
10004ef8:	d8800204 	addi	r2,sp,8
10004efc:	d8800015 	stw	r2,0(sp)
10004f00:	d9c00104 	addi	r7,sp,4
10004f04:	900b883a 	mov	r5,r18
10004f08:	980d883a 	mov	r6,r19
10004f0c:	e009883a 	mov	r4,fp
10004f10:	8820d53a 	srli	r16,r17,20
10004f14:	00091bc0 	call	100091bc <__d2b>
10004f18:	d8800915 	stw	r2,36(sp)
10004f1c:	8001651e 	bne	r16,zero,100054b4 <_dtoa_r+0x700>
10004f20:	dd800217 	ldw	r22,8(sp)
10004f24:	dc000117 	ldw	r16,4(sp)
10004f28:	00800804 	movi	r2,32
10004f2c:	b421883a 	add	r16,r22,r16
10004f30:	80c10c84 	addi	r3,r16,1074
10004f34:	10c2d10e 	bge	r2,r3,10005a7c <_dtoa_r+0xcc8>
10004f38:	00801004 	movi	r2,64
10004f3c:	81010484 	addi	r4,r16,1042
10004f40:	10c7c83a 	sub	r3,r2,r3
10004f44:	9108d83a 	srl	r4,r18,r4
10004f48:	88e2983a 	sll	r17,r17,r3
10004f4c:	2448b03a 	or	r4,r4,r17
10004f50:	000f2e00 	call	1000f2e0 <__floatunsidf>
10004f54:	017f8434 	movhi	r5,65040
10004f58:	01800044 	movi	r6,1
10004f5c:	1009883a 	mov	r4,r2
10004f60:	194b883a 	add	r5,r3,r5
10004f64:	843fffc4 	addi	r16,r16,-1
10004f68:	d9801115 	stw	r6,68(sp)
10004f6c:	000d883a 	mov	r6,zero
10004f70:	01cffe34 	movhi	r7,16376
10004f74:	000e8880 	call	1000e888 <__subdf3>
10004f78:	0198dbf4 	movhi	r6,25455
10004f7c:	01cff4f4 	movhi	r7,16339
10004f80:	3190d844 	addi	r6,r6,17249
10004f84:	39e1e9c4 	addi	r7,r7,-30809
10004f88:	1009883a 	mov	r4,r2
10004f8c:	180b883a 	mov	r5,r3
10004f90:	000e01c0 	call	1000e01c <__muldf3>
10004f94:	01a2d874 	movhi	r6,35681
10004f98:	01cff1f4 	movhi	r7,16327
10004f9c:	31b22cc4 	addi	r6,r6,-14157
10004fa0:	39e28a04 	addi	r7,r7,-30168
10004fa4:	180b883a 	mov	r5,r3
10004fa8:	1009883a 	mov	r4,r2
10004fac:	000cb480 	call	1000cb48 <__adddf3>
10004fb0:	8009883a 	mov	r4,r16
10004fb4:	1029883a 	mov	r20,r2
10004fb8:	1823883a 	mov	r17,r3
10004fbc:	000f2040 	call	1000f204 <__floatsidf>
10004fc0:	019427f4 	movhi	r6,20639
10004fc4:	01cff4f4 	movhi	r7,16339
10004fc8:	319e7ec4 	addi	r6,r6,31227
10004fcc:	39d104c4 	addi	r7,r7,17427
10004fd0:	1009883a 	mov	r4,r2
10004fd4:	180b883a 	mov	r5,r3
10004fd8:	000e01c0 	call	1000e01c <__muldf3>
10004fdc:	100d883a 	mov	r6,r2
10004fe0:	180f883a 	mov	r7,r3
10004fe4:	a009883a 	mov	r4,r20
10004fe8:	880b883a 	mov	r5,r17
10004fec:	000cb480 	call	1000cb48 <__adddf3>
10004ff0:	1009883a 	mov	r4,r2
10004ff4:	180b883a 	mov	r5,r3
10004ff8:	1029883a 	mov	r20,r2
10004ffc:	1823883a 	mov	r17,r3
10005000:	000f1840 	call	1000f184 <__fixdfsi>
10005004:	000d883a 	mov	r6,zero
10005008:	000f883a 	mov	r7,zero
1000500c:	a009883a 	mov	r4,r20
10005010:	880b883a 	mov	r5,r17
10005014:	d8800515 	stw	r2,20(sp)
10005018:	000df280 	call	1000df28 <__ledf2>
1000501c:	10028716 	blt	r2,zero,10005a3c <_dtoa_r+0xc88>
10005020:	d8c00517 	ldw	r3,20(sp)
10005024:	00800584 	movi	r2,22
10005028:	10c27536 	bltu	r2,r3,10005a00 <_dtoa_r+0xc4c>
1000502c:	180490fa 	slli	r2,r3,3
10005030:	00c40074 	movhi	r3,4097
10005034:	18c92304 	addi	r3,r3,9356
10005038:	1885883a 	add	r2,r3,r2
1000503c:	11000017 	ldw	r4,0(r2)
10005040:	11400117 	ldw	r5,4(r2)
10005044:	900d883a 	mov	r6,r18
10005048:	980f883a 	mov	r7,r19
1000504c:	000de4c0 	call	1000de4c <__gedf2>
10005050:	00828d0e 	bge	zero,r2,10005a88 <_dtoa_r+0xcd4>
10005054:	d9000517 	ldw	r4,20(sp)
10005058:	d8000e15 	stw	zero,56(sp)
1000505c:	213fffc4 	addi	r4,r4,-1
10005060:	d9000515 	stw	r4,20(sp)
10005064:	b42dc83a 	sub	r22,r22,r16
10005068:	b5bfffc4 	addi	r22,r22,-1
1000506c:	b0026f16 	blt	r22,zero,10005a2c <_dtoa_r+0xc78>
10005070:	d8000815 	stw	zero,32(sp)
10005074:	d9c00517 	ldw	r7,20(sp)
10005078:	38026416 	blt	r7,zero,10005a0c <_dtoa_r+0xc58>
1000507c:	b1ed883a 	add	r22,r22,r7
10005080:	d9c00d15 	stw	r7,52(sp)
10005084:	d8000a15 	stw	zero,40(sp)
10005088:	d9800317 	ldw	r6,12(sp)
1000508c:	00800244 	movi	r2,9
10005090:	11811436 	bltu	r2,r6,100054e4 <_dtoa_r+0x730>
10005094:	00800144 	movi	r2,5
10005098:	1184e10e 	bge	r2,r6,10006420 <_dtoa_r+0x166c>
1000509c:	31bfff04 	addi	r6,r6,-4
100050a0:	d9800315 	stw	r6,12(sp)
100050a4:	0023883a 	mov	r17,zero
100050a8:	d9800317 	ldw	r6,12(sp)
100050ac:	008000c4 	movi	r2,3
100050b0:	30836726 	beq	r6,r2,10005e50 <_dtoa_r+0x109c>
100050b4:	1183410e 	bge	r2,r6,10005dbc <_dtoa_r+0x1008>
100050b8:	d9c00317 	ldw	r7,12(sp)
100050bc:	00800104 	movi	r2,4
100050c0:	38827c26 	beq	r7,r2,10005ab4 <_dtoa_r+0xd00>
100050c4:	00800144 	movi	r2,5
100050c8:	3884c41e 	bne	r7,r2,100063dc <_dtoa_r+0x1628>
100050cc:	00800044 	movi	r2,1
100050d0:	d8800b15 	stw	r2,44(sp)
100050d4:	d8c00517 	ldw	r3,20(sp)
100050d8:	d9002217 	ldw	r4,136(sp)
100050dc:	1907883a 	add	r3,r3,r4
100050e0:	19800044 	addi	r6,r3,1
100050e4:	d8c00c15 	stw	r3,48(sp)
100050e8:	d9800615 	stw	r6,24(sp)
100050ec:	0183a40e 	bge	zero,r6,10005f80 <_dtoa_r+0x11cc>
100050f0:	d9800617 	ldw	r6,24(sp)
100050f4:	3021883a 	mov	r16,r6
100050f8:	e0001115 	stw	zero,68(fp)
100050fc:	008005c4 	movi	r2,23
10005100:	1184c92e 	bgeu	r2,r6,10006428 <_dtoa_r+0x1674>
10005104:	00c00044 	movi	r3,1
10005108:	00800104 	movi	r2,4
1000510c:	1085883a 	add	r2,r2,r2
10005110:	11000504 	addi	r4,r2,20
10005114:	180b883a 	mov	r5,r3
10005118:	18c00044 	addi	r3,r3,1
1000511c:	313ffb2e 	bgeu	r6,r4,1000510c <__alt_data_end+0xf800510c>
10005120:	e1401115 	stw	r5,68(fp)
10005124:	e009883a 	mov	r4,fp
10005128:	000846c0 	call	1000846c <_Balloc>
1000512c:	d8800715 	stw	r2,28(sp)
10005130:	e0801015 	stw	r2,64(fp)
10005134:	00800384 	movi	r2,14
10005138:	1400f736 	bltu	r2,r16,10005518 <_dtoa_r+0x764>
1000513c:	8800f626 	beq	r17,zero,10005518 <_dtoa_r+0x764>
10005140:	d9c00517 	ldw	r7,20(sp)
10005144:	01c39a0e 	bge	zero,r7,10005fb0 <_dtoa_r+0x11fc>
10005148:	388003cc 	andi	r2,r7,15
1000514c:	100490fa 	slli	r2,r2,3
10005150:	382bd13a 	srai	r21,r7,4
10005154:	00c40074 	movhi	r3,4097
10005158:	18c92304 	addi	r3,r3,9356
1000515c:	1885883a 	add	r2,r3,r2
10005160:	a8c0040c 	andi	r3,r21,16
10005164:	12400017 	ldw	r9,0(r2)
10005168:	12000117 	ldw	r8,4(r2)
1000516c:	18037926 	beq	r3,zero,10005f54 <_dtoa_r+0x11a0>
10005170:	00840074 	movhi	r2,4097
10005174:	10891904 	addi	r2,r2,9316
10005178:	11800817 	ldw	r6,32(r2)
1000517c:	11c00917 	ldw	r7,36(r2)
10005180:	9009883a 	mov	r4,r18
10005184:	980b883a 	mov	r5,r19
10005188:	da001715 	stw	r8,92(sp)
1000518c:	da401615 	stw	r9,88(sp)
10005190:	000d3f40 	call	1000d3f4 <__divdf3>
10005194:	da001717 	ldw	r8,92(sp)
10005198:	da401617 	ldw	r9,88(sp)
1000519c:	ad4003cc 	andi	r21,r21,15
100051a0:	040000c4 	movi	r16,3
100051a4:	1023883a 	mov	r17,r2
100051a8:	1829883a 	mov	r20,r3
100051ac:	a8001126 	beq	r21,zero,100051f4 <_dtoa_r+0x440>
100051b0:	05c40074 	movhi	r23,4097
100051b4:	bdc91904 	addi	r23,r23,9316
100051b8:	4805883a 	mov	r2,r9
100051bc:	4007883a 	mov	r3,r8
100051c0:	a980004c 	andi	r6,r21,1
100051c4:	1009883a 	mov	r4,r2
100051c8:	a82bd07a 	srai	r21,r21,1
100051cc:	180b883a 	mov	r5,r3
100051d0:	30000426 	beq	r6,zero,100051e4 <_dtoa_r+0x430>
100051d4:	b9800017 	ldw	r6,0(r23)
100051d8:	b9c00117 	ldw	r7,4(r23)
100051dc:	84000044 	addi	r16,r16,1
100051e0:	000e01c0 	call	1000e01c <__muldf3>
100051e4:	bdc00204 	addi	r23,r23,8
100051e8:	a83ff51e 	bne	r21,zero,100051c0 <__alt_data_end+0xf80051c0>
100051ec:	1013883a 	mov	r9,r2
100051f0:	1811883a 	mov	r8,r3
100051f4:	480d883a 	mov	r6,r9
100051f8:	400f883a 	mov	r7,r8
100051fc:	8809883a 	mov	r4,r17
10005200:	a00b883a 	mov	r5,r20
10005204:	000d3f40 	call	1000d3f4 <__divdf3>
10005208:	d8800f15 	stw	r2,60(sp)
1000520c:	d8c01015 	stw	r3,64(sp)
10005210:	d8c00e17 	ldw	r3,56(sp)
10005214:	18000626 	beq	r3,zero,10005230 <_dtoa_r+0x47c>
10005218:	d9000f17 	ldw	r4,60(sp)
1000521c:	d9401017 	ldw	r5,64(sp)
10005220:	000d883a 	mov	r6,zero
10005224:	01cffc34 	movhi	r7,16368
10005228:	000df280 	call	1000df28 <__ledf2>
1000522c:	10040b16 	blt	r2,zero,1000625c <_dtoa_r+0x14a8>
10005230:	8009883a 	mov	r4,r16
10005234:	000f2040 	call	1000f204 <__floatsidf>
10005238:	d9800f17 	ldw	r6,60(sp)
1000523c:	d9c01017 	ldw	r7,64(sp)
10005240:	1009883a 	mov	r4,r2
10005244:	180b883a 	mov	r5,r3
10005248:	000e01c0 	call	1000e01c <__muldf3>
1000524c:	000d883a 	mov	r6,zero
10005250:	01d00734 	movhi	r7,16412
10005254:	1009883a 	mov	r4,r2
10005258:	180b883a 	mov	r5,r3
1000525c:	000cb480 	call	1000cb48 <__adddf3>
10005260:	1021883a 	mov	r16,r2
10005264:	d8800617 	ldw	r2,24(sp)
10005268:	047f3034 	movhi	r17,64704
1000526c:	1c63883a 	add	r17,r3,r17
10005270:	10031826 	beq	r2,zero,10005ed4 <_dtoa_r+0x1120>
10005274:	d8c00517 	ldw	r3,20(sp)
10005278:	db000617 	ldw	r12,24(sp)
1000527c:	d8c01315 	stw	r3,76(sp)
10005280:	d9000b17 	ldw	r4,44(sp)
10005284:	20038f26 	beq	r4,zero,100060c4 <_dtoa_r+0x1310>
10005288:	60bfffc4 	addi	r2,r12,-1
1000528c:	100490fa 	slli	r2,r2,3
10005290:	00c40074 	movhi	r3,4097
10005294:	18c92304 	addi	r3,r3,9356
10005298:	1885883a 	add	r2,r3,r2
1000529c:	11800017 	ldw	r6,0(r2)
100052a0:	11c00117 	ldw	r7,4(r2)
100052a4:	d8800717 	ldw	r2,28(sp)
100052a8:	0009883a 	mov	r4,zero
100052ac:	014ff834 	movhi	r5,16352
100052b0:	db001615 	stw	r12,88(sp)
100052b4:	15c00044 	addi	r23,r2,1
100052b8:	000d3f40 	call	1000d3f4 <__divdf3>
100052bc:	800d883a 	mov	r6,r16
100052c0:	880f883a 	mov	r7,r17
100052c4:	1009883a 	mov	r4,r2
100052c8:	180b883a 	mov	r5,r3
100052cc:	000e8880 	call	1000e888 <__subdf3>
100052d0:	d9401017 	ldw	r5,64(sp)
100052d4:	d9000f17 	ldw	r4,60(sp)
100052d8:	102b883a 	mov	r21,r2
100052dc:	d8c01215 	stw	r3,72(sp)
100052e0:	000f1840 	call	1000f184 <__fixdfsi>
100052e4:	1009883a 	mov	r4,r2
100052e8:	1029883a 	mov	r20,r2
100052ec:	000f2040 	call	1000f204 <__floatsidf>
100052f0:	d9000f17 	ldw	r4,60(sp)
100052f4:	d9401017 	ldw	r5,64(sp)
100052f8:	100d883a 	mov	r6,r2
100052fc:	180f883a 	mov	r7,r3
10005300:	000e8880 	call	1000e888 <__subdf3>
10005304:	1823883a 	mov	r17,r3
10005308:	d8c00717 	ldw	r3,28(sp)
1000530c:	d9401217 	ldw	r5,72(sp)
10005310:	a2000c04 	addi	r8,r20,48
10005314:	1021883a 	mov	r16,r2
10005318:	1a000005 	stb	r8,0(r3)
1000531c:	800d883a 	mov	r6,r16
10005320:	880f883a 	mov	r7,r17
10005324:	a809883a 	mov	r4,r21
10005328:	4029883a 	mov	r20,r8
1000532c:	000de4c0 	call	1000de4c <__gedf2>
10005330:	00841d16 	blt	zero,r2,100063a8 <_dtoa_r+0x15f4>
10005334:	800d883a 	mov	r6,r16
10005338:	880f883a 	mov	r7,r17
1000533c:	0009883a 	mov	r4,zero
10005340:	014ffc34 	movhi	r5,16368
10005344:	000e8880 	call	1000e888 <__subdf3>
10005348:	d9401217 	ldw	r5,72(sp)
1000534c:	100d883a 	mov	r6,r2
10005350:	180f883a 	mov	r7,r3
10005354:	a809883a 	mov	r4,r21
10005358:	000de4c0 	call	1000de4c <__gedf2>
1000535c:	db001617 	ldw	r12,88(sp)
10005360:	00840e16 	blt	zero,r2,1000639c <_dtoa_r+0x15e8>
10005364:	00800044 	movi	r2,1
10005368:	13006b0e 	bge	r2,r12,10005518 <_dtoa_r+0x764>
1000536c:	d9000717 	ldw	r4,28(sp)
10005370:	dd800f15 	stw	r22,60(sp)
10005374:	dcc01015 	stw	r19,64(sp)
10005378:	2319883a 	add	r12,r4,r12
1000537c:	dcc01217 	ldw	r19,72(sp)
10005380:	602d883a 	mov	r22,r12
10005384:	dc801215 	stw	r18,72(sp)
10005388:	b825883a 	mov	r18,r23
1000538c:	00000906 	br	100053b4 <_dtoa_r+0x600>
10005390:	000e8880 	call	1000e888 <__subdf3>
10005394:	a80d883a 	mov	r6,r21
10005398:	980f883a 	mov	r7,r19
1000539c:	1009883a 	mov	r4,r2
100053a0:	180b883a 	mov	r5,r3
100053a4:	000df280 	call	1000df28 <__ledf2>
100053a8:	1003e816 	blt	r2,zero,1000634c <_dtoa_r+0x1598>
100053ac:	b825883a 	mov	r18,r23
100053b0:	bd83e926 	beq	r23,r22,10006358 <_dtoa_r+0x15a4>
100053b4:	a809883a 	mov	r4,r21
100053b8:	980b883a 	mov	r5,r19
100053bc:	000d883a 	mov	r6,zero
100053c0:	01d00934 	movhi	r7,16420
100053c4:	000e01c0 	call	1000e01c <__muldf3>
100053c8:	000d883a 	mov	r6,zero
100053cc:	01d00934 	movhi	r7,16420
100053d0:	8009883a 	mov	r4,r16
100053d4:	880b883a 	mov	r5,r17
100053d8:	102b883a 	mov	r21,r2
100053dc:	1827883a 	mov	r19,r3
100053e0:	000e01c0 	call	1000e01c <__muldf3>
100053e4:	180b883a 	mov	r5,r3
100053e8:	1009883a 	mov	r4,r2
100053ec:	1821883a 	mov	r16,r3
100053f0:	1023883a 	mov	r17,r2
100053f4:	000f1840 	call	1000f184 <__fixdfsi>
100053f8:	1009883a 	mov	r4,r2
100053fc:	1029883a 	mov	r20,r2
10005400:	000f2040 	call	1000f204 <__floatsidf>
10005404:	8809883a 	mov	r4,r17
10005408:	800b883a 	mov	r5,r16
1000540c:	100d883a 	mov	r6,r2
10005410:	180f883a 	mov	r7,r3
10005414:	000e8880 	call	1000e888 <__subdf3>
10005418:	a5000c04 	addi	r20,r20,48
1000541c:	a80d883a 	mov	r6,r21
10005420:	980f883a 	mov	r7,r19
10005424:	1009883a 	mov	r4,r2
10005428:	180b883a 	mov	r5,r3
1000542c:	95000005 	stb	r20,0(r18)
10005430:	1021883a 	mov	r16,r2
10005434:	1823883a 	mov	r17,r3
10005438:	000df280 	call	1000df28 <__ledf2>
1000543c:	bdc00044 	addi	r23,r23,1
10005440:	800d883a 	mov	r6,r16
10005444:	880f883a 	mov	r7,r17
10005448:	0009883a 	mov	r4,zero
1000544c:	014ffc34 	movhi	r5,16368
10005450:	103fcf0e 	bge	r2,zero,10005390 <__alt_data_end+0xf8005390>
10005454:	d8c01317 	ldw	r3,76(sp)
10005458:	d8c00515 	stw	r3,20(sp)
1000545c:	d9400917 	ldw	r5,36(sp)
10005460:	e009883a 	mov	r4,fp
10005464:	00085140 	call	10008514 <_Bfree>
10005468:	d9000517 	ldw	r4,20(sp)
1000546c:	d9802317 	ldw	r6,140(sp)
10005470:	d9c02517 	ldw	r7,148(sp)
10005474:	b8000005 	stb	zero,0(r23)
10005478:	20800044 	addi	r2,r4,1
1000547c:	30800015 	stw	r2,0(r6)
10005480:	3802aa26 	beq	r7,zero,10005f2c <_dtoa_r+0x1178>
10005484:	3dc00015 	stw	r23,0(r7)
10005488:	d8800717 	ldw	r2,28(sp)
1000548c:	003e7906 	br	10004e74 <__alt_data_end+0xf8004e74>
10005490:	00800434 	movhi	r2,16
10005494:	10bfffc4 	addi	r2,r2,-1
10005498:	88a2703a 	and	r17,r17,r2
1000549c:	883e851e 	bne	r17,zero,10004eb4 <__alt_data_end+0xf8004eb4>
100054a0:	00840074 	movhi	r2,4097
100054a4:	10890404 	addi	r2,r2,9232
100054a8:	003e8406 	br	10004ebc <__alt_data_end+0xf8004ebc>
100054ac:	10c00204 	addi	r3,r2,8
100054b0:	003e8706 	br	10004ed0 <__alt_data_end+0xf8004ed0>
100054b4:	01400434 	movhi	r5,16
100054b8:	297fffc4 	addi	r5,r5,-1
100054bc:	994a703a 	and	r5,r19,r5
100054c0:	9009883a 	mov	r4,r18
100054c4:	843f0044 	addi	r16,r16,-1023
100054c8:	294ffc34 	orhi	r5,r5,16368
100054cc:	dd800217 	ldw	r22,8(sp)
100054d0:	d8001115 	stw	zero,68(sp)
100054d4:	003ea506 	br	10004f6c <__alt_data_end+0xf8004f6c>
100054d8:	00840074 	movhi	r2,4097
100054dc:	1088fb04 	addi	r2,r2,9196
100054e0:	003e6406 	br	10004e74 <__alt_data_end+0xf8004e74>
100054e4:	e0001115 	stw	zero,68(fp)
100054e8:	000b883a 	mov	r5,zero
100054ec:	e009883a 	mov	r4,fp
100054f0:	000846c0 	call	1000846c <_Balloc>
100054f4:	01bfffc4 	movi	r6,-1
100054f8:	01c00044 	movi	r7,1
100054fc:	d8800715 	stw	r2,28(sp)
10005500:	d9800c15 	stw	r6,48(sp)
10005504:	e0801015 	stw	r2,64(fp)
10005508:	d8000315 	stw	zero,12(sp)
1000550c:	d9c00b15 	stw	r7,44(sp)
10005510:	d9800615 	stw	r6,24(sp)
10005514:	d8002215 	stw	zero,136(sp)
10005518:	d8800117 	ldw	r2,4(sp)
1000551c:	10008916 	blt	r2,zero,10005744 <_dtoa_r+0x990>
10005520:	d9000517 	ldw	r4,20(sp)
10005524:	00c00384 	movi	r3,14
10005528:	19008616 	blt	r3,r4,10005744 <_dtoa_r+0x990>
1000552c:	200490fa 	slli	r2,r4,3
10005530:	00c40074 	movhi	r3,4097
10005534:	d9802217 	ldw	r6,136(sp)
10005538:	18c92304 	addi	r3,r3,9356
1000553c:	1885883a 	add	r2,r3,r2
10005540:	14000017 	ldw	r16,0(r2)
10005544:	14400117 	ldw	r17,4(r2)
10005548:	30016316 	blt	r6,zero,10005ad8 <_dtoa_r+0xd24>
1000554c:	800d883a 	mov	r6,r16
10005550:	880f883a 	mov	r7,r17
10005554:	9009883a 	mov	r4,r18
10005558:	980b883a 	mov	r5,r19
1000555c:	000d3f40 	call	1000d3f4 <__divdf3>
10005560:	180b883a 	mov	r5,r3
10005564:	1009883a 	mov	r4,r2
10005568:	000f1840 	call	1000f184 <__fixdfsi>
1000556c:	1009883a 	mov	r4,r2
10005570:	102b883a 	mov	r21,r2
10005574:	000f2040 	call	1000f204 <__floatsidf>
10005578:	800d883a 	mov	r6,r16
1000557c:	880f883a 	mov	r7,r17
10005580:	1009883a 	mov	r4,r2
10005584:	180b883a 	mov	r5,r3
10005588:	000e01c0 	call	1000e01c <__muldf3>
1000558c:	100d883a 	mov	r6,r2
10005590:	180f883a 	mov	r7,r3
10005594:	9009883a 	mov	r4,r18
10005598:	980b883a 	mov	r5,r19
1000559c:	000e8880 	call	1000e888 <__subdf3>
100055a0:	d9c00717 	ldw	r7,28(sp)
100055a4:	1009883a 	mov	r4,r2
100055a8:	a8800c04 	addi	r2,r21,48
100055ac:	38800005 	stb	r2,0(r7)
100055b0:	3dc00044 	addi	r23,r7,1
100055b4:	d9c00617 	ldw	r7,24(sp)
100055b8:	01800044 	movi	r6,1
100055bc:	180b883a 	mov	r5,r3
100055c0:	2005883a 	mov	r2,r4
100055c4:	39803826 	beq	r7,r6,100056a8 <_dtoa_r+0x8f4>
100055c8:	000d883a 	mov	r6,zero
100055cc:	01d00934 	movhi	r7,16420
100055d0:	000e01c0 	call	1000e01c <__muldf3>
100055d4:	000d883a 	mov	r6,zero
100055d8:	000f883a 	mov	r7,zero
100055dc:	1009883a 	mov	r4,r2
100055e0:	180b883a 	mov	r5,r3
100055e4:	1025883a 	mov	r18,r2
100055e8:	1827883a 	mov	r19,r3
100055ec:	000ddc40 	call	1000ddc4 <__eqdf2>
100055f0:	103f9a26 	beq	r2,zero,1000545c <__alt_data_end+0xf800545c>
100055f4:	d9c00617 	ldw	r7,24(sp)
100055f8:	d8c00717 	ldw	r3,28(sp)
100055fc:	b829883a 	mov	r20,r23
10005600:	38bfffc4 	addi	r2,r7,-1
10005604:	18ad883a 	add	r22,r3,r2
10005608:	00000a06 	br	10005634 <_dtoa_r+0x880>
1000560c:	000e01c0 	call	1000e01c <__muldf3>
10005610:	000d883a 	mov	r6,zero
10005614:	000f883a 	mov	r7,zero
10005618:	1009883a 	mov	r4,r2
1000561c:	180b883a 	mov	r5,r3
10005620:	1025883a 	mov	r18,r2
10005624:	1827883a 	mov	r19,r3
10005628:	b829883a 	mov	r20,r23
1000562c:	000ddc40 	call	1000ddc4 <__eqdf2>
10005630:	103f8a26 	beq	r2,zero,1000545c <__alt_data_end+0xf800545c>
10005634:	800d883a 	mov	r6,r16
10005638:	880f883a 	mov	r7,r17
1000563c:	9009883a 	mov	r4,r18
10005640:	980b883a 	mov	r5,r19
10005644:	000d3f40 	call	1000d3f4 <__divdf3>
10005648:	180b883a 	mov	r5,r3
1000564c:	1009883a 	mov	r4,r2
10005650:	000f1840 	call	1000f184 <__fixdfsi>
10005654:	1009883a 	mov	r4,r2
10005658:	102b883a 	mov	r21,r2
1000565c:	000f2040 	call	1000f204 <__floatsidf>
10005660:	800d883a 	mov	r6,r16
10005664:	880f883a 	mov	r7,r17
10005668:	1009883a 	mov	r4,r2
1000566c:	180b883a 	mov	r5,r3
10005670:	000e01c0 	call	1000e01c <__muldf3>
10005674:	100d883a 	mov	r6,r2
10005678:	180f883a 	mov	r7,r3
1000567c:	9009883a 	mov	r4,r18
10005680:	980b883a 	mov	r5,r19
10005684:	000e8880 	call	1000e888 <__subdf3>
10005688:	aa000c04 	addi	r8,r21,48
1000568c:	a2000005 	stb	r8,0(r20)
10005690:	000d883a 	mov	r6,zero
10005694:	01d00934 	movhi	r7,16420
10005698:	1009883a 	mov	r4,r2
1000569c:	180b883a 	mov	r5,r3
100056a0:	a5c00044 	addi	r23,r20,1
100056a4:	b53fd91e 	bne	r22,r20,1000560c <__alt_data_end+0xf800560c>
100056a8:	100d883a 	mov	r6,r2
100056ac:	180f883a 	mov	r7,r3
100056b0:	1009883a 	mov	r4,r2
100056b4:	180b883a 	mov	r5,r3
100056b8:	000cb480 	call	1000cb48 <__adddf3>
100056bc:	100d883a 	mov	r6,r2
100056c0:	180f883a 	mov	r7,r3
100056c4:	8009883a 	mov	r4,r16
100056c8:	880b883a 	mov	r5,r17
100056cc:	1027883a 	mov	r19,r2
100056d0:	1825883a 	mov	r18,r3
100056d4:	000df280 	call	1000df28 <__ledf2>
100056d8:	10000816 	blt	r2,zero,100056fc <_dtoa_r+0x948>
100056dc:	980d883a 	mov	r6,r19
100056e0:	900f883a 	mov	r7,r18
100056e4:	8009883a 	mov	r4,r16
100056e8:	880b883a 	mov	r5,r17
100056ec:	000ddc40 	call	1000ddc4 <__eqdf2>
100056f0:	103f5a1e 	bne	r2,zero,1000545c <__alt_data_end+0xf800545c>
100056f4:	ad40004c 	andi	r21,r21,1
100056f8:	a83f5826 	beq	r21,zero,1000545c <__alt_data_end+0xf800545c>
100056fc:	bd3fffc3 	ldbu	r20,-1(r23)
10005700:	b8bfffc4 	addi	r2,r23,-1
10005704:	1007883a 	mov	r3,r2
10005708:	01400e44 	movi	r5,57
1000570c:	d9800717 	ldw	r6,28(sp)
10005710:	00000506 	br	10005728 <_dtoa_r+0x974>
10005714:	18ffffc4 	addi	r3,r3,-1
10005718:	11824726 	beq	r2,r6,10006038 <_dtoa_r+0x1284>
1000571c:	1d000003 	ldbu	r20,0(r3)
10005720:	102f883a 	mov	r23,r2
10005724:	10bfffc4 	addi	r2,r2,-1
10005728:	a1003fcc 	andi	r4,r20,255
1000572c:	2100201c 	xori	r4,r4,128
10005730:	213fe004 	addi	r4,r4,-128
10005734:	217ff726 	beq	r4,r5,10005714 <__alt_data_end+0xf8005714>
10005738:	a2000044 	addi	r8,r20,1
1000573c:	12000005 	stb	r8,0(r2)
10005740:	003f4606 	br	1000545c <__alt_data_end+0xf800545c>
10005744:	d9000b17 	ldw	r4,44(sp)
10005748:	2000c826 	beq	r4,zero,10005a6c <_dtoa_r+0xcb8>
1000574c:	d9800317 	ldw	r6,12(sp)
10005750:	00c00044 	movi	r3,1
10005754:	1980f90e 	bge	r3,r6,10005b3c <_dtoa_r+0xd88>
10005758:	d8800617 	ldw	r2,24(sp)
1000575c:	d8c00a17 	ldw	r3,40(sp)
10005760:	157fffc4 	addi	r21,r2,-1
10005764:	1d41f316 	blt	r3,r21,10005f34 <_dtoa_r+0x1180>
10005768:	1d6bc83a 	sub	r21,r3,r21
1000576c:	d9c00617 	ldw	r7,24(sp)
10005770:	3802aa16 	blt	r7,zero,1000621c <_dtoa_r+0x1468>
10005774:	dd000817 	ldw	r20,32(sp)
10005778:	d8800617 	ldw	r2,24(sp)
1000577c:	d8c00817 	ldw	r3,32(sp)
10005780:	01400044 	movi	r5,1
10005784:	e009883a 	mov	r4,fp
10005788:	1887883a 	add	r3,r3,r2
1000578c:	d8c00815 	stw	r3,32(sp)
10005790:	b0ad883a 	add	r22,r22,r2
10005794:	00088a00 	call	100088a0 <__i2b>
10005798:	1023883a 	mov	r17,r2
1000579c:	a0000826 	beq	r20,zero,100057c0 <_dtoa_r+0xa0c>
100057a0:	0580070e 	bge	zero,r22,100057c0 <_dtoa_r+0xa0c>
100057a4:	a005883a 	mov	r2,r20
100057a8:	b500b916 	blt	r22,r20,10005a90 <_dtoa_r+0xcdc>
100057ac:	d9000817 	ldw	r4,32(sp)
100057b0:	a0a9c83a 	sub	r20,r20,r2
100057b4:	b0adc83a 	sub	r22,r22,r2
100057b8:	2089c83a 	sub	r4,r4,r2
100057bc:	d9000815 	stw	r4,32(sp)
100057c0:	d9800a17 	ldw	r6,40(sp)
100057c4:	0181810e 	bge	zero,r6,10005dcc <_dtoa_r+0x1018>
100057c8:	d9c00b17 	ldw	r7,44(sp)
100057cc:	3800b326 	beq	r7,zero,10005a9c <_dtoa_r+0xce8>
100057d0:	a800b226 	beq	r21,zero,10005a9c <_dtoa_r+0xce8>
100057d4:	880b883a 	mov	r5,r17
100057d8:	a80d883a 	mov	r6,r21
100057dc:	e009883a 	mov	r4,fp
100057e0:	0008b680 	call	10008b68 <__pow5mult>
100057e4:	d9800917 	ldw	r6,36(sp)
100057e8:	100b883a 	mov	r5,r2
100057ec:	e009883a 	mov	r4,fp
100057f0:	1023883a 	mov	r17,r2
100057f4:	00088dc0 	call	100088dc <__multiply>
100057f8:	1021883a 	mov	r16,r2
100057fc:	d8800a17 	ldw	r2,40(sp)
10005800:	d9400917 	ldw	r5,36(sp)
10005804:	e009883a 	mov	r4,fp
10005808:	1545c83a 	sub	r2,r2,r21
1000580c:	d8800a15 	stw	r2,40(sp)
10005810:	00085140 	call	10008514 <_Bfree>
10005814:	d8c00a17 	ldw	r3,40(sp)
10005818:	18009f1e 	bne	r3,zero,10005a98 <_dtoa_r+0xce4>
1000581c:	05c00044 	movi	r23,1
10005820:	e009883a 	mov	r4,fp
10005824:	b80b883a 	mov	r5,r23
10005828:	00088a00 	call	100088a0 <__i2b>
1000582c:	d9000d17 	ldw	r4,52(sp)
10005830:	102b883a 	mov	r21,r2
10005834:	2000ce26 	beq	r4,zero,10005b70 <_dtoa_r+0xdbc>
10005838:	200d883a 	mov	r6,r4
1000583c:	100b883a 	mov	r5,r2
10005840:	e009883a 	mov	r4,fp
10005844:	0008b680 	call	10008b68 <__pow5mult>
10005848:	d9800317 	ldw	r6,12(sp)
1000584c:	102b883a 	mov	r21,r2
10005850:	b981810e 	bge	r23,r6,10005e58 <_dtoa_r+0x10a4>
10005854:	0027883a 	mov	r19,zero
10005858:	a8800417 	ldw	r2,16(r21)
1000585c:	05c00804 	movi	r23,32
10005860:	10800104 	addi	r2,r2,4
10005864:	1085883a 	add	r2,r2,r2
10005868:	1085883a 	add	r2,r2,r2
1000586c:	a885883a 	add	r2,r21,r2
10005870:	11000017 	ldw	r4,0(r2)
10005874:	00087880 	call	10008788 <__hi0bits>
10005878:	b885c83a 	sub	r2,r23,r2
1000587c:	1585883a 	add	r2,r2,r22
10005880:	108007cc 	andi	r2,r2,31
10005884:	1000b326 	beq	r2,zero,10005b54 <_dtoa_r+0xda0>
10005888:	00c00804 	movi	r3,32
1000588c:	1887c83a 	sub	r3,r3,r2
10005890:	01000104 	movi	r4,4
10005894:	20c2cd0e 	bge	r4,r3,100063cc <_dtoa_r+0x1618>
10005898:	00c00704 	movi	r3,28
1000589c:	1885c83a 	sub	r2,r3,r2
100058a0:	d8c00817 	ldw	r3,32(sp)
100058a4:	a0a9883a 	add	r20,r20,r2
100058a8:	b0ad883a 	add	r22,r22,r2
100058ac:	1887883a 	add	r3,r3,r2
100058b0:	d8c00815 	stw	r3,32(sp)
100058b4:	d9800817 	ldw	r6,32(sp)
100058b8:	0180040e 	bge	zero,r6,100058cc <_dtoa_r+0xb18>
100058bc:	800b883a 	mov	r5,r16
100058c0:	e009883a 	mov	r4,fp
100058c4:	0008ca80 	call	10008ca8 <__lshift>
100058c8:	1021883a 	mov	r16,r2
100058cc:	0580050e 	bge	zero,r22,100058e4 <_dtoa_r+0xb30>
100058d0:	a80b883a 	mov	r5,r21
100058d4:	b00d883a 	mov	r6,r22
100058d8:	e009883a 	mov	r4,fp
100058dc:	0008ca80 	call	10008ca8 <__lshift>
100058e0:	102b883a 	mov	r21,r2
100058e4:	d9c00e17 	ldw	r7,56(sp)
100058e8:	3801211e 	bne	r7,zero,10005d70 <_dtoa_r+0xfbc>
100058ec:	d9800617 	ldw	r6,24(sp)
100058f0:	0181380e 	bge	zero,r6,10005dd4 <_dtoa_r+0x1020>
100058f4:	d8c00b17 	ldw	r3,44(sp)
100058f8:	1800ab1e 	bne	r3,zero,10005ba8 <_dtoa_r+0xdf4>
100058fc:	dc800717 	ldw	r18,28(sp)
10005900:	dcc00617 	ldw	r19,24(sp)
10005904:	9029883a 	mov	r20,r18
10005908:	00000206 	br	10005914 <_dtoa_r+0xb60>
1000590c:	000853c0 	call	1000853c <__multadd>
10005910:	1021883a 	mov	r16,r2
10005914:	a80b883a 	mov	r5,r21
10005918:	8009883a 	mov	r4,r16
1000591c:	0004b8c0 	call	10004b8c <quorem>
10005920:	10800c04 	addi	r2,r2,48
10005924:	90800005 	stb	r2,0(r18)
10005928:	94800044 	addi	r18,r18,1
1000592c:	9507c83a 	sub	r3,r18,r20
10005930:	000f883a 	mov	r7,zero
10005934:	01800284 	movi	r6,10
10005938:	800b883a 	mov	r5,r16
1000593c:	e009883a 	mov	r4,fp
10005940:	1cfff216 	blt	r3,r19,1000590c <__alt_data_end+0xf800590c>
10005944:	1011883a 	mov	r8,r2
10005948:	d8800617 	ldw	r2,24(sp)
1000594c:	0082370e 	bge	zero,r2,1000622c <_dtoa_r+0x1478>
10005950:	d9000717 	ldw	r4,28(sp)
10005954:	0025883a 	mov	r18,zero
10005958:	20af883a 	add	r23,r4,r2
1000595c:	01800044 	movi	r6,1
10005960:	800b883a 	mov	r5,r16
10005964:	e009883a 	mov	r4,fp
10005968:	da001715 	stw	r8,92(sp)
1000596c:	0008ca80 	call	10008ca8 <__lshift>
10005970:	a80b883a 	mov	r5,r21
10005974:	1009883a 	mov	r4,r2
10005978:	d8800915 	stw	r2,36(sp)
1000597c:	0008df00 	call	10008df0 <__mcmp>
10005980:	da001717 	ldw	r8,92(sp)
10005984:	0081800e 	bge	zero,r2,10005f88 <_dtoa_r+0x11d4>
10005988:	b93fffc3 	ldbu	r4,-1(r23)
1000598c:	b8bfffc4 	addi	r2,r23,-1
10005990:	1007883a 	mov	r3,r2
10005994:	01800e44 	movi	r6,57
10005998:	d9c00717 	ldw	r7,28(sp)
1000599c:	00000506 	br	100059b4 <_dtoa_r+0xc00>
100059a0:	18ffffc4 	addi	r3,r3,-1
100059a4:	11c12326 	beq	r2,r7,10005e34 <_dtoa_r+0x1080>
100059a8:	19000003 	ldbu	r4,0(r3)
100059ac:	102f883a 	mov	r23,r2
100059b0:	10bfffc4 	addi	r2,r2,-1
100059b4:	21403fcc 	andi	r5,r4,255
100059b8:	2940201c 	xori	r5,r5,128
100059bc:	297fe004 	addi	r5,r5,-128
100059c0:	29bff726 	beq	r5,r6,100059a0 <__alt_data_end+0xf80059a0>
100059c4:	21000044 	addi	r4,r4,1
100059c8:	11000005 	stb	r4,0(r2)
100059cc:	a80b883a 	mov	r5,r21
100059d0:	e009883a 	mov	r4,fp
100059d4:	00085140 	call	10008514 <_Bfree>
100059d8:	883ea026 	beq	r17,zero,1000545c <__alt_data_end+0xf800545c>
100059dc:	90000426 	beq	r18,zero,100059f0 <_dtoa_r+0xc3c>
100059e0:	94400326 	beq	r18,r17,100059f0 <_dtoa_r+0xc3c>
100059e4:	900b883a 	mov	r5,r18
100059e8:	e009883a 	mov	r4,fp
100059ec:	00085140 	call	10008514 <_Bfree>
100059f0:	880b883a 	mov	r5,r17
100059f4:	e009883a 	mov	r4,fp
100059f8:	00085140 	call	10008514 <_Bfree>
100059fc:	003e9706 	br	1000545c <__alt_data_end+0xf800545c>
10005a00:	01800044 	movi	r6,1
10005a04:	d9800e15 	stw	r6,56(sp)
10005a08:	003d9606 	br	10005064 <__alt_data_end+0xf8005064>
10005a0c:	d8800817 	ldw	r2,32(sp)
10005a10:	d8c00517 	ldw	r3,20(sp)
10005a14:	d8000d15 	stw	zero,52(sp)
10005a18:	10c5c83a 	sub	r2,r2,r3
10005a1c:	00c9c83a 	sub	r4,zero,r3
10005a20:	d8800815 	stw	r2,32(sp)
10005a24:	d9000a15 	stw	r4,40(sp)
10005a28:	003d9706 	br	10005088 <__alt_data_end+0xf8005088>
10005a2c:	05adc83a 	sub	r22,zero,r22
10005a30:	dd800815 	stw	r22,32(sp)
10005a34:	002d883a 	mov	r22,zero
10005a38:	003d8e06 	br	10005074 <__alt_data_end+0xf8005074>
10005a3c:	d9000517 	ldw	r4,20(sp)
10005a40:	000f2040 	call	1000f204 <__floatsidf>
10005a44:	100d883a 	mov	r6,r2
10005a48:	180f883a 	mov	r7,r3
10005a4c:	a009883a 	mov	r4,r20
10005a50:	880b883a 	mov	r5,r17
10005a54:	000ddc40 	call	1000ddc4 <__eqdf2>
10005a58:	103d7126 	beq	r2,zero,10005020 <__alt_data_end+0xf8005020>
10005a5c:	d9c00517 	ldw	r7,20(sp)
10005a60:	39ffffc4 	addi	r7,r7,-1
10005a64:	d9c00515 	stw	r7,20(sp)
10005a68:	003d6d06 	br	10005020 <__alt_data_end+0xf8005020>
10005a6c:	dd400a17 	ldw	r21,40(sp)
10005a70:	dd000817 	ldw	r20,32(sp)
10005a74:	0023883a 	mov	r17,zero
10005a78:	003f4806 	br	1000579c <__alt_data_end+0xf800579c>
10005a7c:	10e3c83a 	sub	r17,r2,r3
10005a80:	9448983a 	sll	r4,r18,r17
10005a84:	003d3206 	br	10004f50 <__alt_data_end+0xf8004f50>
10005a88:	d8000e15 	stw	zero,56(sp)
10005a8c:	003d7506 	br	10005064 <__alt_data_end+0xf8005064>
10005a90:	b005883a 	mov	r2,r22
10005a94:	003f4506 	br	100057ac <__alt_data_end+0xf80057ac>
10005a98:	dc000915 	stw	r16,36(sp)
10005a9c:	d9800a17 	ldw	r6,40(sp)
10005aa0:	d9400917 	ldw	r5,36(sp)
10005aa4:	e009883a 	mov	r4,fp
10005aa8:	0008b680 	call	10008b68 <__pow5mult>
10005aac:	1021883a 	mov	r16,r2
10005ab0:	003f5a06 	br	1000581c <__alt_data_end+0xf800581c>
10005ab4:	01c00044 	movi	r7,1
10005ab8:	d9c00b15 	stw	r7,44(sp)
10005abc:	d8802217 	ldw	r2,136(sp)
10005ac0:	0081280e 	bge	zero,r2,10005f64 <_dtoa_r+0x11b0>
10005ac4:	100d883a 	mov	r6,r2
10005ac8:	1021883a 	mov	r16,r2
10005acc:	d8800c15 	stw	r2,48(sp)
10005ad0:	d8800615 	stw	r2,24(sp)
10005ad4:	003d8806 	br	100050f8 <__alt_data_end+0xf80050f8>
10005ad8:	d8800617 	ldw	r2,24(sp)
10005adc:	00be9b16 	blt	zero,r2,1000554c <__alt_data_end+0xf800554c>
10005ae0:	10010f1e 	bne	r2,zero,10005f20 <_dtoa_r+0x116c>
10005ae4:	880b883a 	mov	r5,r17
10005ae8:	000d883a 	mov	r6,zero
10005aec:	01d00534 	movhi	r7,16404
10005af0:	8009883a 	mov	r4,r16
10005af4:	000e01c0 	call	1000e01c <__muldf3>
10005af8:	900d883a 	mov	r6,r18
10005afc:	980f883a 	mov	r7,r19
10005b00:	1009883a 	mov	r4,r2
10005b04:	180b883a 	mov	r5,r3
10005b08:	000de4c0 	call	1000de4c <__gedf2>
10005b0c:	002b883a 	mov	r21,zero
10005b10:	0023883a 	mov	r17,zero
10005b14:	1000bf16 	blt	r2,zero,10005e14 <_dtoa_r+0x1060>
10005b18:	d9802217 	ldw	r6,136(sp)
10005b1c:	ddc00717 	ldw	r23,28(sp)
10005b20:	018c303a 	nor	r6,zero,r6
10005b24:	d9800515 	stw	r6,20(sp)
10005b28:	a80b883a 	mov	r5,r21
10005b2c:	e009883a 	mov	r4,fp
10005b30:	00085140 	call	10008514 <_Bfree>
10005b34:	883e4926 	beq	r17,zero,1000545c <__alt_data_end+0xf800545c>
10005b38:	003fad06 	br	100059f0 <__alt_data_end+0xf80059f0>
10005b3c:	d9c01117 	ldw	r7,68(sp)
10005b40:	3801bc26 	beq	r7,zero,10006234 <_dtoa_r+0x1480>
10005b44:	10810cc4 	addi	r2,r2,1075
10005b48:	dd400a17 	ldw	r21,40(sp)
10005b4c:	dd000817 	ldw	r20,32(sp)
10005b50:	003f0a06 	br	1000577c <__alt_data_end+0xf800577c>
10005b54:	00800704 	movi	r2,28
10005b58:	d9000817 	ldw	r4,32(sp)
10005b5c:	a0a9883a 	add	r20,r20,r2
10005b60:	b0ad883a 	add	r22,r22,r2
10005b64:	2089883a 	add	r4,r4,r2
10005b68:	d9000815 	stw	r4,32(sp)
10005b6c:	003f5106 	br	100058b4 <__alt_data_end+0xf80058b4>
10005b70:	d8c00317 	ldw	r3,12(sp)
10005b74:	b8c1fc0e 	bge	r23,r3,10006368 <_dtoa_r+0x15b4>
10005b78:	0027883a 	mov	r19,zero
10005b7c:	b805883a 	mov	r2,r23
10005b80:	003f3e06 	br	1000587c <__alt_data_end+0xf800587c>
10005b84:	880b883a 	mov	r5,r17
10005b88:	e009883a 	mov	r4,fp
10005b8c:	000f883a 	mov	r7,zero
10005b90:	01800284 	movi	r6,10
10005b94:	000853c0 	call	1000853c <__multadd>
10005b98:	d9000c17 	ldw	r4,48(sp)
10005b9c:	1023883a 	mov	r17,r2
10005ba0:	0102040e 	bge	zero,r4,100063b4 <_dtoa_r+0x1600>
10005ba4:	d9000615 	stw	r4,24(sp)
10005ba8:	0500050e 	bge	zero,r20,10005bc0 <_dtoa_r+0xe0c>
10005bac:	880b883a 	mov	r5,r17
10005bb0:	a00d883a 	mov	r6,r20
10005bb4:	e009883a 	mov	r4,fp
10005bb8:	0008ca80 	call	10008ca8 <__lshift>
10005bbc:	1023883a 	mov	r17,r2
10005bc0:	9801241e 	bne	r19,zero,10006054 <_dtoa_r+0x12a0>
10005bc4:	8829883a 	mov	r20,r17
10005bc8:	d9000617 	ldw	r4,24(sp)
10005bcc:	dcc00717 	ldw	r19,28(sp)
10005bd0:	9480004c 	andi	r18,r18,1
10005bd4:	20bfffc4 	addi	r2,r4,-1
10005bd8:	9885883a 	add	r2,r19,r2
10005bdc:	d8800415 	stw	r2,16(sp)
10005be0:	dc800615 	stw	r18,24(sp)
10005be4:	a80b883a 	mov	r5,r21
10005be8:	8009883a 	mov	r4,r16
10005bec:	0004b8c0 	call	10004b8c <quorem>
10005bf0:	880b883a 	mov	r5,r17
10005bf4:	8009883a 	mov	r4,r16
10005bf8:	102f883a 	mov	r23,r2
10005bfc:	0008df00 	call	10008df0 <__mcmp>
10005c00:	a80b883a 	mov	r5,r21
10005c04:	a00d883a 	mov	r6,r20
10005c08:	e009883a 	mov	r4,fp
10005c0c:	102d883a 	mov	r22,r2
10005c10:	0008e500 	call	10008e50 <__mdiff>
10005c14:	1007883a 	mov	r3,r2
10005c18:	10800317 	ldw	r2,12(r2)
10005c1c:	bc800c04 	addi	r18,r23,48
10005c20:	180b883a 	mov	r5,r3
10005c24:	10004e1e 	bne	r2,zero,10005d60 <_dtoa_r+0xfac>
10005c28:	8009883a 	mov	r4,r16
10005c2c:	d8c01615 	stw	r3,88(sp)
10005c30:	0008df00 	call	10008df0 <__mcmp>
10005c34:	d8c01617 	ldw	r3,88(sp)
10005c38:	e009883a 	mov	r4,fp
10005c3c:	d8801615 	stw	r2,88(sp)
10005c40:	180b883a 	mov	r5,r3
10005c44:	00085140 	call	10008514 <_Bfree>
10005c48:	d8801617 	ldw	r2,88(sp)
10005c4c:	1000041e 	bne	r2,zero,10005c60 <_dtoa_r+0xeac>
10005c50:	d9800317 	ldw	r6,12(sp)
10005c54:	3000021e 	bne	r6,zero,10005c60 <_dtoa_r+0xeac>
10005c58:	d8c00617 	ldw	r3,24(sp)
10005c5c:	18003726 	beq	r3,zero,10005d3c <_dtoa_r+0xf88>
10005c60:	b0002016 	blt	r22,zero,10005ce4 <_dtoa_r+0xf30>
10005c64:	b000041e 	bne	r22,zero,10005c78 <_dtoa_r+0xec4>
10005c68:	d9000317 	ldw	r4,12(sp)
10005c6c:	2000021e 	bne	r4,zero,10005c78 <_dtoa_r+0xec4>
10005c70:	d8c00617 	ldw	r3,24(sp)
10005c74:	18001b26 	beq	r3,zero,10005ce4 <_dtoa_r+0xf30>
10005c78:	00810716 	blt	zero,r2,10006098 <_dtoa_r+0x12e4>
10005c7c:	d8c00417 	ldw	r3,16(sp)
10005c80:	9d800044 	addi	r22,r19,1
10005c84:	9c800005 	stb	r18,0(r19)
10005c88:	b02f883a 	mov	r23,r22
10005c8c:	98c10626 	beq	r19,r3,100060a8 <_dtoa_r+0x12f4>
10005c90:	800b883a 	mov	r5,r16
10005c94:	000f883a 	mov	r7,zero
10005c98:	01800284 	movi	r6,10
10005c9c:	e009883a 	mov	r4,fp
10005ca0:	000853c0 	call	1000853c <__multadd>
10005ca4:	1021883a 	mov	r16,r2
10005ca8:	000f883a 	mov	r7,zero
10005cac:	01800284 	movi	r6,10
10005cb0:	880b883a 	mov	r5,r17
10005cb4:	e009883a 	mov	r4,fp
10005cb8:	8d002526 	beq	r17,r20,10005d50 <_dtoa_r+0xf9c>
10005cbc:	000853c0 	call	1000853c <__multadd>
10005cc0:	a00b883a 	mov	r5,r20
10005cc4:	000f883a 	mov	r7,zero
10005cc8:	01800284 	movi	r6,10
10005ccc:	e009883a 	mov	r4,fp
10005cd0:	1023883a 	mov	r17,r2
10005cd4:	000853c0 	call	1000853c <__multadd>
10005cd8:	1029883a 	mov	r20,r2
10005cdc:	b027883a 	mov	r19,r22
10005ce0:	003fc006 	br	10005be4 <__alt_data_end+0xf8005be4>
10005ce4:	9011883a 	mov	r8,r18
10005ce8:	00800e0e 	bge	zero,r2,10005d24 <_dtoa_r+0xf70>
10005cec:	800b883a 	mov	r5,r16
10005cf0:	01800044 	movi	r6,1
10005cf4:	e009883a 	mov	r4,fp
10005cf8:	da001715 	stw	r8,92(sp)
10005cfc:	0008ca80 	call	10008ca8 <__lshift>
10005d00:	a80b883a 	mov	r5,r21
10005d04:	1009883a 	mov	r4,r2
10005d08:	1021883a 	mov	r16,r2
10005d0c:	0008df00 	call	10008df0 <__mcmp>
10005d10:	da001717 	ldw	r8,92(sp)
10005d14:	0081960e 	bge	zero,r2,10006370 <_dtoa_r+0x15bc>
10005d18:	00800e44 	movi	r2,57
10005d1c:	40817026 	beq	r8,r2,100062e0 <_dtoa_r+0x152c>
10005d20:	ba000c44 	addi	r8,r23,49
10005d24:	8825883a 	mov	r18,r17
10005d28:	9dc00044 	addi	r23,r19,1
10005d2c:	9a000005 	stb	r8,0(r19)
10005d30:	a023883a 	mov	r17,r20
10005d34:	dc000915 	stw	r16,36(sp)
10005d38:	003f2406 	br	100059cc <__alt_data_end+0xf80059cc>
10005d3c:	00800e44 	movi	r2,57
10005d40:	9011883a 	mov	r8,r18
10005d44:	90816626 	beq	r18,r2,100062e0 <_dtoa_r+0x152c>
10005d48:	05bff516 	blt	zero,r22,10005d20 <__alt_data_end+0xf8005d20>
10005d4c:	003ff506 	br	10005d24 <__alt_data_end+0xf8005d24>
10005d50:	000853c0 	call	1000853c <__multadd>
10005d54:	1023883a 	mov	r17,r2
10005d58:	1029883a 	mov	r20,r2
10005d5c:	003fdf06 	br	10005cdc <__alt_data_end+0xf8005cdc>
10005d60:	e009883a 	mov	r4,fp
10005d64:	00085140 	call	10008514 <_Bfree>
10005d68:	00800044 	movi	r2,1
10005d6c:	003fbc06 	br	10005c60 <__alt_data_end+0xf8005c60>
10005d70:	a80b883a 	mov	r5,r21
10005d74:	8009883a 	mov	r4,r16
10005d78:	0008df00 	call	10008df0 <__mcmp>
10005d7c:	103edb0e 	bge	r2,zero,100058ec <__alt_data_end+0xf80058ec>
10005d80:	800b883a 	mov	r5,r16
10005d84:	000f883a 	mov	r7,zero
10005d88:	01800284 	movi	r6,10
10005d8c:	e009883a 	mov	r4,fp
10005d90:	000853c0 	call	1000853c <__multadd>
10005d94:	1021883a 	mov	r16,r2
10005d98:	d8800517 	ldw	r2,20(sp)
10005d9c:	d8c00b17 	ldw	r3,44(sp)
10005da0:	10bfffc4 	addi	r2,r2,-1
10005da4:	d8800515 	stw	r2,20(sp)
10005da8:	183f761e 	bne	r3,zero,10005b84 <__alt_data_end+0xf8005b84>
10005dac:	d9000c17 	ldw	r4,48(sp)
10005db0:	0101730e 	bge	zero,r4,10006380 <_dtoa_r+0x15cc>
10005db4:	d9000615 	stw	r4,24(sp)
10005db8:	003ed006 	br	100058fc <__alt_data_end+0xf80058fc>
10005dbc:	00800084 	movi	r2,2
10005dc0:	3081861e 	bne	r6,r2,100063dc <_dtoa_r+0x1628>
10005dc4:	d8000b15 	stw	zero,44(sp)
10005dc8:	003f3c06 	br	10005abc <__alt_data_end+0xf8005abc>
10005dcc:	dc000917 	ldw	r16,36(sp)
10005dd0:	003e9206 	br	1000581c <__alt_data_end+0xf800581c>
10005dd4:	d9c00317 	ldw	r7,12(sp)
10005dd8:	00800084 	movi	r2,2
10005ddc:	11fec50e 	bge	r2,r7,100058f4 <__alt_data_end+0xf80058f4>
10005de0:	d9000617 	ldw	r4,24(sp)
10005de4:	20013c1e 	bne	r4,zero,100062d8 <_dtoa_r+0x1524>
10005de8:	a80b883a 	mov	r5,r21
10005dec:	000f883a 	mov	r7,zero
10005df0:	01800144 	movi	r6,5
10005df4:	e009883a 	mov	r4,fp
10005df8:	000853c0 	call	1000853c <__multadd>
10005dfc:	100b883a 	mov	r5,r2
10005e00:	8009883a 	mov	r4,r16
10005e04:	102b883a 	mov	r21,r2
10005e08:	0008df00 	call	10008df0 <__mcmp>
10005e0c:	dc000915 	stw	r16,36(sp)
10005e10:	00bf410e 	bge	zero,r2,10005b18 <__alt_data_end+0xf8005b18>
10005e14:	d9c00717 	ldw	r7,28(sp)
10005e18:	00800c44 	movi	r2,49
10005e1c:	38800005 	stb	r2,0(r7)
10005e20:	d8800517 	ldw	r2,20(sp)
10005e24:	3dc00044 	addi	r23,r7,1
10005e28:	10800044 	addi	r2,r2,1
10005e2c:	d8800515 	stw	r2,20(sp)
10005e30:	003f3d06 	br	10005b28 <__alt_data_end+0xf8005b28>
10005e34:	d9800517 	ldw	r6,20(sp)
10005e38:	d9c00717 	ldw	r7,28(sp)
10005e3c:	00800c44 	movi	r2,49
10005e40:	31800044 	addi	r6,r6,1
10005e44:	d9800515 	stw	r6,20(sp)
10005e48:	38800005 	stb	r2,0(r7)
10005e4c:	003edf06 	br	100059cc <__alt_data_end+0xf80059cc>
10005e50:	d8000b15 	stw	zero,44(sp)
10005e54:	003c9f06 	br	100050d4 <__alt_data_end+0xf80050d4>
10005e58:	903e7e1e 	bne	r18,zero,10005854 <__alt_data_end+0xf8005854>
10005e5c:	00800434 	movhi	r2,16
10005e60:	10bfffc4 	addi	r2,r2,-1
10005e64:	9884703a 	and	r2,r19,r2
10005e68:	1000ea1e 	bne	r2,zero,10006214 <_dtoa_r+0x1460>
10005e6c:	9cdffc2c 	andhi	r19,r19,32752
10005e70:	9800e826 	beq	r19,zero,10006214 <_dtoa_r+0x1460>
10005e74:	d9c00817 	ldw	r7,32(sp)
10005e78:	b5800044 	addi	r22,r22,1
10005e7c:	04c00044 	movi	r19,1
10005e80:	39c00044 	addi	r7,r7,1
10005e84:	d9c00815 	stw	r7,32(sp)
10005e88:	d8800d17 	ldw	r2,52(sp)
10005e8c:	103e721e 	bne	r2,zero,10005858 <__alt_data_end+0xf8005858>
10005e90:	00800044 	movi	r2,1
10005e94:	003e7906 	br	1000587c <__alt_data_end+0xf800587c>
10005e98:	8009883a 	mov	r4,r16
10005e9c:	000f2040 	call	1000f204 <__floatsidf>
10005ea0:	d9800f17 	ldw	r6,60(sp)
10005ea4:	d9c01017 	ldw	r7,64(sp)
10005ea8:	1009883a 	mov	r4,r2
10005eac:	180b883a 	mov	r5,r3
10005eb0:	000e01c0 	call	1000e01c <__muldf3>
10005eb4:	000d883a 	mov	r6,zero
10005eb8:	01d00734 	movhi	r7,16412
10005ebc:	1009883a 	mov	r4,r2
10005ec0:	180b883a 	mov	r5,r3
10005ec4:	000cb480 	call	1000cb48 <__adddf3>
10005ec8:	047f3034 	movhi	r17,64704
10005ecc:	1021883a 	mov	r16,r2
10005ed0:	1c63883a 	add	r17,r3,r17
10005ed4:	d9000f17 	ldw	r4,60(sp)
10005ed8:	d9401017 	ldw	r5,64(sp)
10005edc:	000d883a 	mov	r6,zero
10005ee0:	01d00534 	movhi	r7,16404
10005ee4:	000e8880 	call	1000e888 <__subdf3>
10005ee8:	800d883a 	mov	r6,r16
10005eec:	880f883a 	mov	r7,r17
10005ef0:	1009883a 	mov	r4,r2
10005ef4:	180b883a 	mov	r5,r3
10005ef8:	102b883a 	mov	r21,r2
10005efc:	1829883a 	mov	r20,r3
10005f00:	000de4c0 	call	1000de4c <__gedf2>
10005f04:	00806c16 	blt	zero,r2,100060b8 <_dtoa_r+0x1304>
10005f08:	89e0003c 	xorhi	r7,r17,32768
10005f0c:	800d883a 	mov	r6,r16
10005f10:	a809883a 	mov	r4,r21
10005f14:	a00b883a 	mov	r5,r20
10005f18:	000df280 	call	1000df28 <__ledf2>
10005f1c:	103d7e0e 	bge	r2,zero,10005518 <__alt_data_end+0xf8005518>
10005f20:	002b883a 	mov	r21,zero
10005f24:	0023883a 	mov	r17,zero
10005f28:	003efb06 	br	10005b18 <__alt_data_end+0xf8005b18>
10005f2c:	d8800717 	ldw	r2,28(sp)
10005f30:	003bd006 	br	10004e74 <__alt_data_end+0xf8004e74>
10005f34:	d9000a17 	ldw	r4,40(sp)
10005f38:	d9800d17 	ldw	r6,52(sp)
10005f3c:	dd400a15 	stw	r21,40(sp)
10005f40:	a905c83a 	sub	r2,r21,r4
10005f44:	308d883a 	add	r6,r6,r2
10005f48:	d9800d15 	stw	r6,52(sp)
10005f4c:	002b883a 	mov	r21,zero
10005f50:	003e0606 	br	1000576c <__alt_data_end+0xf800576c>
10005f54:	9023883a 	mov	r17,r18
10005f58:	9829883a 	mov	r20,r19
10005f5c:	04000084 	movi	r16,2
10005f60:	003c9206 	br	100051ac <__alt_data_end+0xf80051ac>
10005f64:	04000044 	movi	r16,1
10005f68:	dc000c15 	stw	r16,48(sp)
10005f6c:	dc000615 	stw	r16,24(sp)
10005f70:	dc002215 	stw	r16,136(sp)
10005f74:	e0001115 	stw	zero,68(fp)
10005f78:	000b883a 	mov	r5,zero
10005f7c:	003c6906 	br	10005124 <__alt_data_end+0xf8005124>
10005f80:	3021883a 	mov	r16,r6
10005f84:	003ffb06 	br	10005f74 <__alt_data_end+0xf8005f74>
10005f88:	1000021e 	bne	r2,zero,10005f94 <_dtoa_r+0x11e0>
10005f8c:	4200004c 	andi	r8,r8,1
10005f90:	403e7d1e 	bne	r8,zero,10005988 <__alt_data_end+0xf8005988>
10005f94:	01000c04 	movi	r4,48
10005f98:	00000106 	br	10005fa0 <_dtoa_r+0x11ec>
10005f9c:	102f883a 	mov	r23,r2
10005fa0:	b8bfffc4 	addi	r2,r23,-1
10005fa4:	10c00007 	ldb	r3,0(r2)
10005fa8:	193ffc26 	beq	r3,r4,10005f9c <__alt_data_end+0xf8005f9c>
10005fac:	003e8706 	br	100059cc <__alt_data_end+0xf80059cc>
10005fb0:	d8800517 	ldw	r2,20(sp)
10005fb4:	00a3c83a 	sub	r17,zero,r2
10005fb8:	8800a426 	beq	r17,zero,1000624c <_dtoa_r+0x1498>
10005fbc:	888003cc 	andi	r2,r17,15
10005fc0:	100490fa 	slli	r2,r2,3
10005fc4:	00c40074 	movhi	r3,4097
10005fc8:	18c92304 	addi	r3,r3,9356
10005fcc:	1885883a 	add	r2,r3,r2
10005fd0:	11800017 	ldw	r6,0(r2)
10005fd4:	11c00117 	ldw	r7,4(r2)
10005fd8:	9009883a 	mov	r4,r18
10005fdc:	980b883a 	mov	r5,r19
10005fe0:	8823d13a 	srai	r17,r17,4
10005fe4:	000e01c0 	call	1000e01c <__muldf3>
10005fe8:	d8800f15 	stw	r2,60(sp)
10005fec:	d8c01015 	stw	r3,64(sp)
10005ff0:	8800e826 	beq	r17,zero,10006394 <_dtoa_r+0x15e0>
10005ff4:	05040074 	movhi	r20,4097
10005ff8:	a5091904 	addi	r20,r20,9316
10005ffc:	04000084 	movi	r16,2
10006000:	8980004c 	andi	r6,r17,1
10006004:	1009883a 	mov	r4,r2
10006008:	8823d07a 	srai	r17,r17,1
1000600c:	180b883a 	mov	r5,r3
10006010:	30000426 	beq	r6,zero,10006024 <_dtoa_r+0x1270>
10006014:	a1800017 	ldw	r6,0(r20)
10006018:	a1c00117 	ldw	r7,4(r20)
1000601c:	84000044 	addi	r16,r16,1
10006020:	000e01c0 	call	1000e01c <__muldf3>
10006024:	a5000204 	addi	r20,r20,8
10006028:	883ff51e 	bne	r17,zero,10006000 <__alt_data_end+0xf8006000>
1000602c:	d8800f15 	stw	r2,60(sp)
10006030:	d8c01015 	stw	r3,64(sp)
10006034:	003c7606 	br	10005210 <__alt_data_end+0xf8005210>
10006038:	00c00c04 	movi	r3,48
1000603c:	10c00005 	stb	r3,0(r2)
10006040:	d8c00517 	ldw	r3,20(sp)
10006044:	bd3fffc3 	ldbu	r20,-1(r23)
10006048:	18c00044 	addi	r3,r3,1
1000604c:	d8c00515 	stw	r3,20(sp)
10006050:	003db906 	br	10005738 <__alt_data_end+0xf8005738>
10006054:	89400117 	ldw	r5,4(r17)
10006058:	e009883a 	mov	r4,fp
1000605c:	000846c0 	call	1000846c <_Balloc>
10006060:	89800417 	ldw	r6,16(r17)
10006064:	89400304 	addi	r5,r17,12
10006068:	11000304 	addi	r4,r2,12
1000606c:	31800084 	addi	r6,r6,2
10006070:	318d883a 	add	r6,r6,r6
10006074:	318d883a 	add	r6,r6,r6
10006078:	1027883a 	mov	r19,r2
1000607c:	00080a00 	call	100080a0 <memcpy>
10006080:	01800044 	movi	r6,1
10006084:	980b883a 	mov	r5,r19
10006088:	e009883a 	mov	r4,fp
1000608c:	0008ca80 	call	10008ca8 <__lshift>
10006090:	1029883a 	mov	r20,r2
10006094:	003ecc06 	br	10005bc8 <__alt_data_end+0xf8005bc8>
10006098:	00800e44 	movi	r2,57
1000609c:	90809026 	beq	r18,r2,100062e0 <_dtoa_r+0x152c>
100060a0:	92000044 	addi	r8,r18,1
100060a4:	003f1f06 	br	10005d24 <__alt_data_end+0xf8005d24>
100060a8:	9011883a 	mov	r8,r18
100060ac:	8825883a 	mov	r18,r17
100060b0:	a023883a 	mov	r17,r20
100060b4:	003e2906 	br	1000595c <__alt_data_end+0xf800595c>
100060b8:	002b883a 	mov	r21,zero
100060bc:	0023883a 	mov	r17,zero
100060c0:	003f5406 	br	10005e14 <__alt_data_end+0xf8005e14>
100060c4:	61bfffc4 	addi	r6,r12,-1
100060c8:	300490fa 	slli	r2,r6,3
100060cc:	00c40074 	movhi	r3,4097
100060d0:	18c92304 	addi	r3,r3,9356
100060d4:	1885883a 	add	r2,r3,r2
100060d8:	11000017 	ldw	r4,0(r2)
100060dc:	11400117 	ldw	r5,4(r2)
100060e0:	d8800717 	ldw	r2,28(sp)
100060e4:	880f883a 	mov	r7,r17
100060e8:	d9801215 	stw	r6,72(sp)
100060ec:	800d883a 	mov	r6,r16
100060f0:	db001615 	stw	r12,88(sp)
100060f4:	15c00044 	addi	r23,r2,1
100060f8:	000e01c0 	call	1000e01c <__muldf3>
100060fc:	d9401017 	ldw	r5,64(sp)
10006100:	d9000f17 	ldw	r4,60(sp)
10006104:	d8c01515 	stw	r3,84(sp)
10006108:	d8801415 	stw	r2,80(sp)
1000610c:	000f1840 	call	1000f184 <__fixdfsi>
10006110:	1009883a 	mov	r4,r2
10006114:	1021883a 	mov	r16,r2
10006118:	000f2040 	call	1000f204 <__floatsidf>
1000611c:	d9000f17 	ldw	r4,60(sp)
10006120:	d9401017 	ldw	r5,64(sp)
10006124:	100d883a 	mov	r6,r2
10006128:	180f883a 	mov	r7,r3
1000612c:	000e8880 	call	1000e888 <__subdf3>
10006130:	1829883a 	mov	r20,r3
10006134:	d8c00717 	ldw	r3,28(sp)
10006138:	84000c04 	addi	r16,r16,48
1000613c:	1023883a 	mov	r17,r2
10006140:	1c000005 	stb	r16,0(r3)
10006144:	db001617 	ldw	r12,88(sp)
10006148:	00800044 	movi	r2,1
1000614c:	60802226 	beq	r12,r2,100061d8 <_dtoa_r+0x1424>
10006150:	d9c00717 	ldw	r7,28(sp)
10006154:	8805883a 	mov	r2,r17
10006158:	b82b883a 	mov	r21,r23
1000615c:	3b19883a 	add	r12,r7,r12
10006160:	6023883a 	mov	r17,r12
10006164:	a007883a 	mov	r3,r20
10006168:	dc800f15 	stw	r18,60(sp)
1000616c:	000d883a 	mov	r6,zero
10006170:	01d00934 	movhi	r7,16420
10006174:	1009883a 	mov	r4,r2
10006178:	180b883a 	mov	r5,r3
1000617c:	000e01c0 	call	1000e01c <__muldf3>
10006180:	180b883a 	mov	r5,r3
10006184:	1009883a 	mov	r4,r2
10006188:	1829883a 	mov	r20,r3
1000618c:	1025883a 	mov	r18,r2
10006190:	000f1840 	call	1000f184 <__fixdfsi>
10006194:	1009883a 	mov	r4,r2
10006198:	1021883a 	mov	r16,r2
1000619c:	000f2040 	call	1000f204 <__floatsidf>
100061a0:	100d883a 	mov	r6,r2
100061a4:	180f883a 	mov	r7,r3
100061a8:	9009883a 	mov	r4,r18
100061ac:	a00b883a 	mov	r5,r20
100061b0:	84000c04 	addi	r16,r16,48
100061b4:	000e8880 	call	1000e888 <__subdf3>
100061b8:	ad400044 	addi	r21,r21,1
100061bc:	ac3fffc5 	stb	r16,-1(r21)
100061c0:	ac7fea1e 	bne	r21,r17,1000616c <__alt_data_end+0xf800616c>
100061c4:	1023883a 	mov	r17,r2
100061c8:	d8801217 	ldw	r2,72(sp)
100061cc:	dc800f17 	ldw	r18,60(sp)
100061d0:	1829883a 	mov	r20,r3
100061d4:	b8af883a 	add	r23,r23,r2
100061d8:	d9001417 	ldw	r4,80(sp)
100061dc:	d9401517 	ldw	r5,84(sp)
100061e0:	000d883a 	mov	r6,zero
100061e4:	01cff834 	movhi	r7,16352
100061e8:	000cb480 	call	1000cb48 <__adddf3>
100061ec:	880d883a 	mov	r6,r17
100061f0:	a00f883a 	mov	r7,r20
100061f4:	1009883a 	mov	r4,r2
100061f8:	180b883a 	mov	r5,r3
100061fc:	000df280 	call	1000df28 <__ledf2>
10006200:	10003e0e 	bge	r2,zero,100062fc <_dtoa_r+0x1548>
10006204:	d9001317 	ldw	r4,76(sp)
10006208:	bd3fffc3 	ldbu	r20,-1(r23)
1000620c:	d9000515 	stw	r4,20(sp)
10006210:	003d3b06 	br	10005700 <__alt_data_end+0xf8005700>
10006214:	0027883a 	mov	r19,zero
10006218:	003f1b06 	br	10005e88 <__alt_data_end+0xf8005e88>
1000621c:	d8800817 	ldw	r2,32(sp)
10006220:	11e9c83a 	sub	r20,r2,r7
10006224:	0005883a 	mov	r2,zero
10006228:	003d5406 	br	1000577c <__alt_data_end+0xf800577c>
1000622c:	00800044 	movi	r2,1
10006230:	003dc706 	br	10005950 <__alt_data_end+0xf8005950>
10006234:	d8c00217 	ldw	r3,8(sp)
10006238:	00800d84 	movi	r2,54
1000623c:	dd400a17 	ldw	r21,40(sp)
10006240:	10c5c83a 	sub	r2,r2,r3
10006244:	dd000817 	ldw	r20,32(sp)
10006248:	003d4c06 	br	1000577c <__alt_data_end+0xf800577c>
1000624c:	dc800f15 	stw	r18,60(sp)
10006250:	dcc01015 	stw	r19,64(sp)
10006254:	04000084 	movi	r16,2
10006258:	003bed06 	br	10005210 <__alt_data_end+0xf8005210>
1000625c:	d9000617 	ldw	r4,24(sp)
10006260:	203f0d26 	beq	r4,zero,10005e98 <__alt_data_end+0xf8005e98>
10006264:	d9800c17 	ldw	r6,48(sp)
10006268:	01bcab0e 	bge	zero,r6,10005518 <__alt_data_end+0xf8005518>
1000626c:	d9401017 	ldw	r5,64(sp)
10006270:	d9000f17 	ldw	r4,60(sp)
10006274:	000d883a 	mov	r6,zero
10006278:	01d00934 	movhi	r7,16420
1000627c:	000e01c0 	call	1000e01c <__muldf3>
10006280:	81000044 	addi	r4,r16,1
10006284:	d8800f15 	stw	r2,60(sp)
10006288:	d8c01015 	stw	r3,64(sp)
1000628c:	000f2040 	call	1000f204 <__floatsidf>
10006290:	d9800f17 	ldw	r6,60(sp)
10006294:	d9c01017 	ldw	r7,64(sp)
10006298:	1009883a 	mov	r4,r2
1000629c:	180b883a 	mov	r5,r3
100062a0:	000e01c0 	call	1000e01c <__muldf3>
100062a4:	01d00734 	movhi	r7,16412
100062a8:	000d883a 	mov	r6,zero
100062ac:	1009883a 	mov	r4,r2
100062b0:	180b883a 	mov	r5,r3
100062b4:	000cb480 	call	1000cb48 <__adddf3>
100062b8:	d9c00517 	ldw	r7,20(sp)
100062bc:	047f3034 	movhi	r17,64704
100062c0:	1021883a 	mov	r16,r2
100062c4:	39ffffc4 	addi	r7,r7,-1
100062c8:	d9c01315 	stw	r7,76(sp)
100062cc:	1c63883a 	add	r17,r3,r17
100062d0:	db000c17 	ldw	r12,48(sp)
100062d4:	003bea06 	br	10005280 <__alt_data_end+0xf8005280>
100062d8:	dc000915 	stw	r16,36(sp)
100062dc:	003e0e06 	br	10005b18 <__alt_data_end+0xf8005b18>
100062e0:	01000e44 	movi	r4,57
100062e4:	8825883a 	mov	r18,r17
100062e8:	9dc00044 	addi	r23,r19,1
100062ec:	99000005 	stb	r4,0(r19)
100062f0:	a023883a 	mov	r17,r20
100062f4:	dc000915 	stw	r16,36(sp)
100062f8:	003da406 	br	1000598c <__alt_data_end+0xf800598c>
100062fc:	d9801417 	ldw	r6,80(sp)
10006300:	d9c01517 	ldw	r7,84(sp)
10006304:	0009883a 	mov	r4,zero
10006308:	014ff834 	movhi	r5,16352
1000630c:	000e8880 	call	1000e888 <__subdf3>
10006310:	880d883a 	mov	r6,r17
10006314:	a00f883a 	mov	r7,r20
10006318:	1009883a 	mov	r4,r2
1000631c:	180b883a 	mov	r5,r3
10006320:	000de4c0 	call	1000de4c <__gedf2>
10006324:	00bc7c0e 	bge	zero,r2,10005518 <__alt_data_end+0xf8005518>
10006328:	01000c04 	movi	r4,48
1000632c:	00000106 	br	10006334 <_dtoa_r+0x1580>
10006330:	102f883a 	mov	r23,r2
10006334:	b8bfffc4 	addi	r2,r23,-1
10006338:	10c00007 	ldb	r3,0(r2)
1000633c:	193ffc26 	beq	r3,r4,10006330 <__alt_data_end+0xf8006330>
10006340:	d9801317 	ldw	r6,76(sp)
10006344:	d9800515 	stw	r6,20(sp)
10006348:	003c4406 	br	1000545c <__alt_data_end+0xf800545c>
1000634c:	d9801317 	ldw	r6,76(sp)
10006350:	d9800515 	stw	r6,20(sp)
10006354:	003cea06 	br	10005700 <__alt_data_end+0xf8005700>
10006358:	dd800f17 	ldw	r22,60(sp)
1000635c:	dcc01017 	ldw	r19,64(sp)
10006360:	dc801217 	ldw	r18,72(sp)
10006364:	003c6c06 	br	10005518 <__alt_data_end+0xf8005518>
10006368:	903e031e 	bne	r18,zero,10005b78 <__alt_data_end+0xf8005b78>
1000636c:	003ebb06 	br	10005e5c <__alt_data_end+0xf8005e5c>
10006370:	103e6c1e 	bne	r2,zero,10005d24 <__alt_data_end+0xf8005d24>
10006374:	4080004c 	andi	r2,r8,1
10006378:	103e6a26 	beq	r2,zero,10005d24 <__alt_data_end+0xf8005d24>
1000637c:	003e6606 	br	10005d18 <__alt_data_end+0xf8005d18>
10006380:	d8c00317 	ldw	r3,12(sp)
10006384:	00800084 	movi	r2,2
10006388:	10c02916 	blt	r2,r3,10006430 <_dtoa_r+0x167c>
1000638c:	d9000c17 	ldw	r4,48(sp)
10006390:	003e8806 	br	10005db4 <__alt_data_end+0xf8005db4>
10006394:	04000084 	movi	r16,2
10006398:	003b9d06 	br	10005210 <__alt_data_end+0xf8005210>
1000639c:	d9001317 	ldw	r4,76(sp)
100063a0:	d9000515 	stw	r4,20(sp)
100063a4:	003cd606 	br	10005700 <__alt_data_end+0xf8005700>
100063a8:	d8801317 	ldw	r2,76(sp)
100063ac:	d8800515 	stw	r2,20(sp)
100063b0:	003c2a06 	br	1000545c <__alt_data_end+0xf800545c>
100063b4:	d9800317 	ldw	r6,12(sp)
100063b8:	00800084 	movi	r2,2
100063bc:	11801516 	blt	r2,r6,10006414 <_dtoa_r+0x1660>
100063c0:	d9c00c17 	ldw	r7,48(sp)
100063c4:	d9c00615 	stw	r7,24(sp)
100063c8:	003df706 	br	10005ba8 <__alt_data_end+0xf8005ba8>
100063cc:	193d3926 	beq	r3,r4,100058b4 <__alt_data_end+0xf80058b4>
100063d0:	00c00f04 	movi	r3,60
100063d4:	1885c83a 	sub	r2,r3,r2
100063d8:	003ddf06 	br	10005b58 <__alt_data_end+0xf8005b58>
100063dc:	e009883a 	mov	r4,fp
100063e0:	e0001115 	stw	zero,68(fp)
100063e4:	000b883a 	mov	r5,zero
100063e8:	000846c0 	call	1000846c <_Balloc>
100063ec:	d8800715 	stw	r2,28(sp)
100063f0:	d8c00717 	ldw	r3,28(sp)
100063f4:	00bfffc4 	movi	r2,-1
100063f8:	01000044 	movi	r4,1
100063fc:	d8800c15 	stw	r2,48(sp)
10006400:	e0c01015 	stw	r3,64(fp)
10006404:	d9000b15 	stw	r4,44(sp)
10006408:	d8800615 	stw	r2,24(sp)
1000640c:	d8002215 	stw	zero,136(sp)
10006410:	003c4106 	br	10005518 <__alt_data_end+0xf8005518>
10006414:	d8c00c17 	ldw	r3,48(sp)
10006418:	d8c00615 	stw	r3,24(sp)
1000641c:	003e7006 	br	10005de0 <__alt_data_end+0xf8005de0>
10006420:	04400044 	movi	r17,1
10006424:	003b2006 	br	100050a8 <__alt_data_end+0xf80050a8>
10006428:	000b883a 	mov	r5,zero
1000642c:	003b3d06 	br	10005124 <__alt_data_end+0xf8005124>
10006430:	d8800c17 	ldw	r2,48(sp)
10006434:	d8800615 	stw	r2,24(sp)
10006438:	003e6906 	br	10005de0 <__alt_data_end+0xf8005de0>

1000643c <__sflush_r>:
1000643c:	2880030b 	ldhu	r2,12(r5)
10006440:	defffb04 	addi	sp,sp,-20
10006444:	dcc00315 	stw	r19,12(sp)
10006448:	dc400115 	stw	r17,4(sp)
1000644c:	dfc00415 	stw	ra,16(sp)
10006450:	dc800215 	stw	r18,8(sp)
10006454:	dc000015 	stw	r16,0(sp)
10006458:	10c0020c 	andi	r3,r2,8
1000645c:	2823883a 	mov	r17,r5
10006460:	2027883a 	mov	r19,r4
10006464:	1800311e 	bne	r3,zero,1000652c <__sflush_r+0xf0>
10006468:	28c00117 	ldw	r3,4(r5)
1000646c:	10820014 	ori	r2,r2,2048
10006470:	2880030d 	sth	r2,12(r5)
10006474:	00c04b0e 	bge	zero,r3,100065a4 <__sflush_r+0x168>
10006478:	8a000a17 	ldw	r8,40(r17)
1000647c:	40002326 	beq	r8,zero,1000650c <__sflush_r+0xd0>
10006480:	9c000017 	ldw	r16,0(r19)
10006484:	10c4000c 	andi	r3,r2,4096
10006488:	98000015 	stw	zero,0(r19)
1000648c:	18004826 	beq	r3,zero,100065b0 <__sflush_r+0x174>
10006490:	89801417 	ldw	r6,80(r17)
10006494:	10c0010c 	andi	r3,r2,4
10006498:	18000626 	beq	r3,zero,100064b4 <__sflush_r+0x78>
1000649c:	88c00117 	ldw	r3,4(r17)
100064a0:	88800c17 	ldw	r2,48(r17)
100064a4:	30cdc83a 	sub	r6,r6,r3
100064a8:	10000226 	beq	r2,zero,100064b4 <__sflush_r+0x78>
100064ac:	88800f17 	ldw	r2,60(r17)
100064b0:	308dc83a 	sub	r6,r6,r2
100064b4:	89400717 	ldw	r5,28(r17)
100064b8:	000f883a 	mov	r7,zero
100064bc:	9809883a 	mov	r4,r19
100064c0:	403ee83a 	callr	r8
100064c4:	00ffffc4 	movi	r3,-1
100064c8:	10c04426 	beq	r2,r3,100065dc <__sflush_r+0x1a0>
100064cc:	88c0030b 	ldhu	r3,12(r17)
100064d0:	89000417 	ldw	r4,16(r17)
100064d4:	88000115 	stw	zero,4(r17)
100064d8:	197dffcc 	andi	r5,r3,63487
100064dc:	8940030d 	sth	r5,12(r17)
100064e0:	89000015 	stw	r4,0(r17)
100064e4:	18c4000c 	andi	r3,r3,4096
100064e8:	18002c1e 	bne	r3,zero,1000659c <__sflush_r+0x160>
100064ec:	89400c17 	ldw	r5,48(r17)
100064f0:	9c000015 	stw	r16,0(r19)
100064f4:	28000526 	beq	r5,zero,1000650c <__sflush_r+0xd0>
100064f8:	88801004 	addi	r2,r17,64
100064fc:	28800226 	beq	r5,r2,10006508 <__sflush_r+0xcc>
10006500:	9809883a 	mov	r4,r19
10006504:	0006bb80 	call	10006bb8 <_free_r>
10006508:	88000c15 	stw	zero,48(r17)
1000650c:	0005883a 	mov	r2,zero
10006510:	dfc00417 	ldw	ra,16(sp)
10006514:	dcc00317 	ldw	r19,12(sp)
10006518:	dc800217 	ldw	r18,8(sp)
1000651c:	dc400117 	ldw	r17,4(sp)
10006520:	dc000017 	ldw	r16,0(sp)
10006524:	dec00504 	addi	sp,sp,20
10006528:	f800283a 	ret
1000652c:	2c800417 	ldw	r18,16(r5)
10006530:	903ff626 	beq	r18,zero,1000650c <__alt_data_end+0xf800650c>
10006534:	2c000017 	ldw	r16,0(r5)
10006538:	108000cc 	andi	r2,r2,3
1000653c:	2c800015 	stw	r18,0(r5)
10006540:	84a1c83a 	sub	r16,r16,r18
10006544:	1000131e 	bne	r2,zero,10006594 <__sflush_r+0x158>
10006548:	28800517 	ldw	r2,20(r5)
1000654c:	88800215 	stw	r2,8(r17)
10006550:	04000316 	blt	zero,r16,10006560 <__sflush_r+0x124>
10006554:	003fed06 	br	1000650c <__alt_data_end+0xf800650c>
10006558:	90a5883a 	add	r18,r18,r2
1000655c:	043feb0e 	bge	zero,r16,1000650c <__alt_data_end+0xf800650c>
10006560:	88800917 	ldw	r2,36(r17)
10006564:	89400717 	ldw	r5,28(r17)
10006568:	800f883a 	mov	r7,r16
1000656c:	900d883a 	mov	r6,r18
10006570:	9809883a 	mov	r4,r19
10006574:	103ee83a 	callr	r2
10006578:	80a1c83a 	sub	r16,r16,r2
1000657c:	00bff616 	blt	zero,r2,10006558 <__alt_data_end+0xf8006558>
10006580:	88c0030b 	ldhu	r3,12(r17)
10006584:	00bfffc4 	movi	r2,-1
10006588:	18c01014 	ori	r3,r3,64
1000658c:	88c0030d 	sth	r3,12(r17)
10006590:	003fdf06 	br	10006510 <__alt_data_end+0xf8006510>
10006594:	0005883a 	mov	r2,zero
10006598:	003fec06 	br	1000654c <__alt_data_end+0xf800654c>
1000659c:	88801415 	stw	r2,80(r17)
100065a0:	003fd206 	br	100064ec <__alt_data_end+0xf80064ec>
100065a4:	28c00f17 	ldw	r3,60(r5)
100065a8:	00ffb316 	blt	zero,r3,10006478 <__alt_data_end+0xf8006478>
100065ac:	003fd706 	br	1000650c <__alt_data_end+0xf800650c>
100065b0:	89400717 	ldw	r5,28(r17)
100065b4:	000d883a 	mov	r6,zero
100065b8:	01c00044 	movi	r7,1
100065bc:	9809883a 	mov	r4,r19
100065c0:	403ee83a 	callr	r8
100065c4:	100d883a 	mov	r6,r2
100065c8:	00bfffc4 	movi	r2,-1
100065cc:	30801426 	beq	r6,r2,10006620 <__sflush_r+0x1e4>
100065d0:	8880030b 	ldhu	r2,12(r17)
100065d4:	8a000a17 	ldw	r8,40(r17)
100065d8:	003fae06 	br	10006494 <__alt_data_end+0xf8006494>
100065dc:	98c00017 	ldw	r3,0(r19)
100065e0:	183fba26 	beq	r3,zero,100064cc <__alt_data_end+0xf80064cc>
100065e4:	01000744 	movi	r4,29
100065e8:	19000626 	beq	r3,r4,10006604 <__sflush_r+0x1c8>
100065ec:	01000584 	movi	r4,22
100065f0:	19000426 	beq	r3,r4,10006604 <__sflush_r+0x1c8>
100065f4:	88c0030b 	ldhu	r3,12(r17)
100065f8:	18c01014 	ori	r3,r3,64
100065fc:	88c0030d 	sth	r3,12(r17)
10006600:	003fc306 	br	10006510 <__alt_data_end+0xf8006510>
10006604:	8880030b 	ldhu	r2,12(r17)
10006608:	88c00417 	ldw	r3,16(r17)
1000660c:	88000115 	stw	zero,4(r17)
10006610:	10bdffcc 	andi	r2,r2,63487
10006614:	8880030d 	sth	r2,12(r17)
10006618:	88c00015 	stw	r3,0(r17)
1000661c:	003fb306 	br	100064ec <__alt_data_end+0xf80064ec>
10006620:	98800017 	ldw	r2,0(r19)
10006624:	103fea26 	beq	r2,zero,100065d0 <__alt_data_end+0xf80065d0>
10006628:	00c00744 	movi	r3,29
1000662c:	10c00226 	beq	r2,r3,10006638 <__sflush_r+0x1fc>
10006630:	00c00584 	movi	r3,22
10006634:	10c0031e 	bne	r2,r3,10006644 <__sflush_r+0x208>
10006638:	9c000015 	stw	r16,0(r19)
1000663c:	0005883a 	mov	r2,zero
10006640:	003fb306 	br	10006510 <__alt_data_end+0xf8006510>
10006644:	88c0030b 	ldhu	r3,12(r17)
10006648:	3005883a 	mov	r2,r6
1000664c:	18c01014 	ori	r3,r3,64
10006650:	88c0030d 	sth	r3,12(r17)
10006654:	003fae06 	br	10006510 <__alt_data_end+0xf8006510>

10006658 <_fflush_r>:
10006658:	defffd04 	addi	sp,sp,-12
1000665c:	dc000115 	stw	r16,4(sp)
10006660:	dfc00215 	stw	ra,8(sp)
10006664:	2021883a 	mov	r16,r4
10006668:	20000226 	beq	r4,zero,10006674 <_fflush_r+0x1c>
1000666c:	20800e17 	ldw	r2,56(r4)
10006670:	10000c26 	beq	r2,zero,100066a4 <_fflush_r+0x4c>
10006674:	2880030f 	ldh	r2,12(r5)
10006678:	1000051e 	bne	r2,zero,10006690 <_fflush_r+0x38>
1000667c:	0005883a 	mov	r2,zero
10006680:	dfc00217 	ldw	ra,8(sp)
10006684:	dc000117 	ldw	r16,4(sp)
10006688:	dec00304 	addi	sp,sp,12
1000668c:	f800283a 	ret
10006690:	8009883a 	mov	r4,r16
10006694:	dfc00217 	ldw	ra,8(sp)
10006698:	dc000117 	ldw	r16,4(sp)
1000669c:	dec00304 	addi	sp,sp,12
100066a0:	000643c1 	jmpi	1000643c <__sflush_r>
100066a4:	d9400015 	stw	r5,0(sp)
100066a8:	0006a440 	call	10006a44 <__sinit>
100066ac:	d9400017 	ldw	r5,0(sp)
100066b0:	003ff006 	br	10006674 <__alt_data_end+0xf8006674>

100066b4 <fflush>:
100066b4:	20000526 	beq	r4,zero,100066cc <fflush+0x18>
100066b8:	00840074 	movhi	r2,4097
100066bc:	10905704 	addi	r2,r2,16732
100066c0:	200b883a 	mov	r5,r4
100066c4:	11000017 	ldw	r4,0(r2)
100066c8:	00066581 	jmpi	10006658 <_fflush_r>
100066cc:	00840074 	movhi	r2,4097
100066d0:	10905604 	addi	r2,r2,16728
100066d4:	11000017 	ldw	r4,0(r2)
100066d8:	01440034 	movhi	r5,4096
100066dc:	29599604 	addi	r5,r5,26200
100066e0:	00074541 	jmpi	10007454 <_fwalk_reent>

100066e4 <__fp_unlock>:
100066e4:	0005883a 	mov	r2,zero
100066e8:	f800283a 	ret

100066ec <_cleanup_r>:
100066ec:	01440074 	movhi	r5,4097
100066f0:	296d7c04 	addi	r5,r5,-18960
100066f4:	00074541 	jmpi	10007454 <_fwalk_reent>

100066f8 <__sinit.part.1>:
100066f8:	defff704 	addi	sp,sp,-36
100066fc:	00c40034 	movhi	r3,4096
10006700:	dfc00815 	stw	ra,32(sp)
10006704:	ddc00715 	stw	r23,28(sp)
10006708:	dd800615 	stw	r22,24(sp)
1000670c:	dd400515 	stw	r21,20(sp)
10006710:	dd000415 	stw	r20,16(sp)
10006714:	dcc00315 	stw	r19,12(sp)
10006718:	dc800215 	stw	r18,8(sp)
1000671c:	dc400115 	stw	r17,4(sp)
10006720:	dc000015 	stw	r16,0(sp)
10006724:	18d9bb04 	addi	r3,r3,26348
10006728:	24000117 	ldw	r16,4(r4)
1000672c:	20c00f15 	stw	r3,60(r4)
10006730:	2080bb04 	addi	r2,r4,748
10006734:	00c000c4 	movi	r3,3
10006738:	20c0b915 	stw	r3,740(r4)
1000673c:	2080ba15 	stw	r2,744(r4)
10006740:	2000b815 	stw	zero,736(r4)
10006744:	05c00204 	movi	r23,8
10006748:	00800104 	movi	r2,4
1000674c:	2025883a 	mov	r18,r4
10006750:	b80d883a 	mov	r6,r23
10006754:	81001704 	addi	r4,r16,92
10006758:	000b883a 	mov	r5,zero
1000675c:	80000015 	stw	zero,0(r16)
10006760:	80000115 	stw	zero,4(r16)
10006764:	80000215 	stw	zero,8(r16)
10006768:	8080030d 	sth	r2,12(r16)
1000676c:	80001915 	stw	zero,100(r16)
10006770:	8000038d 	sth	zero,14(r16)
10006774:	80000415 	stw	zero,16(r16)
10006778:	80000515 	stw	zero,20(r16)
1000677c:	80000615 	stw	zero,24(r16)
10006780:	00083440 	call	10008344 <memset>
10006784:	05840074 	movhi	r22,4097
10006788:	94400217 	ldw	r17,8(r18)
1000678c:	05440074 	movhi	r21,4097
10006790:	05040074 	movhi	r20,4097
10006794:	04c40074 	movhi	r19,4097
10006798:	b5a6d404 	addi	r22,r22,-25776
1000679c:	ad66eb04 	addi	r21,r21,-25684
100067a0:	a5270a04 	addi	r20,r20,-25560
100067a4:	9ce72104 	addi	r19,r19,-25468
100067a8:	85800815 	stw	r22,32(r16)
100067ac:	85400915 	stw	r21,36(r16)
100067b0:	85000a15 	stw	r20,40(r16)
100067b4:	84c00b15 	stw	r19,44(r16)
100067b8:	84000715 	stw	r16,28(r16)
100067bc:	00800284 	movi	r2,10
100067c0:	8880030d 	sth	r2,12(r17)
100067c4:	00800044 	movi	r2,1
100067c8:	b80d883a 	mov	r6,r23
100067cc:	89001704 	addi	r4,r17,92
100067d0:	000b883a 	mov	r5,zero
100067d4:	88000015 	stw	zero,0(r17)
100067d8:	88000115 	stw	zero,4(r17)
100067dc:	88000215 	stw	zero,8(r17)
100067e0:	88001915 	stw	zero,100(r17)
100067e4:	8880038d 	sth	r2,14(r17)
100067e8:	88000415 	stw	zero,16(r17)
100067ec:	88000515 	stw	zero,20(r17)
100067f0:	88000615 	stw	zero,24(r17)
100067f4:	00083440 	call	10008344 <memset>
100067f8:	94000317 	ldw	r16,12(r18)
100067fc:	00800484 	movi	r2,18
10006800:	8c400715 	stw	r17,28(r17)
10006804:	8d800815 	stw	r22,32(r17)
10006808:	8d400915 	stw	r21,36(r17)
1000680c:	8d000a15 	stw	r20,40(r17)
10006810:	8cc00b15 	stw	r19,44(r17)
10006814:	8080030d 	sth	r2,12(r16)
10006818:	00800084 	movi	r2,2
1000681c:	80000015 	stw	zero,0(r16)
10006820:	80000115 	stw	zero,4(r16)
10006824:	80000215 	stw	zero,8(r16)
10006828:	80001915 	stw	zero,100(r16)
1000682c:	8080038d 	sth	r2,14(r16)
10006830:	80000415 	stw	zero,16(r16)
10006834:	80000515 	stw	zero,20(r16)
10006838:	80000615 	stw	zero,24(r16)
1000683c:	b80d883a 	mov	r6,r23
10006840:	000b883a 	mov	r5,zero
10006844:	81001704 	addi	r4,r16,92
10006848:	00083440 	call	10008344 <memset>
1000684c:	00800044 	movi	r2,1
10006850:	84000715 	stw	r16,28(r16)
10006854:	85800815 	stw	r22,32(r16)
10006858:	85400915 	stw	r21,36(r16)
1000685c:	85000a15 	stw	r20,40(r16)
10006860:	84c00b15 	stw	r19,44(r16)
10006864:	90800e15 	stw	r2,56(r18)
10006868:	dfc00817 	ldw	ra,32(sp)
1000686c:	ddc00717 	ldw	r23,28(sp)
10006870:	dd800617 	ldw	r22,24(sp)
10006874:	dd400517 	ldw	r21,20(sp)
10006878:	dd000417 	ldw	r20,16(sp)
1000687c:	dcc00317 	ldw	r19,12(sp)
10006880:	dc800217 	ldw	r18,8(sp)
10006884:	dc400117 	ldw	r17,4(sp)
10006888:	dc000017 	ldw	r16,0(sp)
1000688c:	dec00904 	addi	sp,sp,36
10006890:	f800283a 	ret

10006894 <__fp_lock>:
10006894:	0005883a 	mov	r2,zero
10006898:	f800283a 	ret

1000689c <__sfmoreglue>:
1000689c:	defffc04 	addi	sp,sp,-16
100068a0:	dc800215 	stw	r18,8(sp)
100068a4:	2825883a 	mov	r18,r5
100068a8:	dc000015 	stw	r16,0(sp)
100068ac:	01401a04 	movi	r5,104
100068b0:	2021883a 	mov	r16,r4
100068b4:	913fffc4 	addi	r4,r18,-1
100068b8:	dfc00315 	stw	ra,12(sp)
100068bc:	dc400115 	stw	r17,4(sp)
100068c0:	000cb200 	call	1000cb20 <__mulsi3>
100068c4:	8009883a 	mov	r4,r16
100068c8:	11401d04 	addi	r5,r2,116
100068cc:	1023883a 	mov	r17,r2
100068d0:	00077b00 	call	100077b0 <_malloc_r>
100068d4:	1021883a 	mov	r16,r2
100068d8:	10000726 	beq	r2,zero,100068f8 <__sfmoreglue+0x5c>
100068dc:	11000304 	addi	r4,r2,12
100068e0:	10000015 	stw	zero,0(r2)
100068e4:	14800115 	stw	r18,4(r2)
100068e8:	11000215 	stw	r4,8(r2)
100068ec:	89801a04 	addi	r6,r17,104
100068f0:	000b883a 	mov	r5,zero
100068f4:	00083440 	call	10008344 <memset>
100068f8:	8005883a 	mov	r2,r16
100068fc:	dfc00317 	ldw	ra,12(sp)
10006900:	dc800217 	ldw	r18,8(sp)
10006904:	dc400117 	ldw	r17,4(sp)
10006908:	dc000017 	ldw	r16,0(sp)
1000690c:	dec00404 	addi	sp,sp,16
10006910:	f800283a 	ret

10006914 <__sfp>:
10006914:	defffb04 	addi	sp,sp,-20
10006918:	dc000015 	stw	r16,0(sp)
1000691c:	04040074 	movhi	r16,4097
10006920:	84105604 	addi	r16,r16,16728
10006924:	dcc00315 	stw	r19,12(sp)
10006928:	2027883a 	mov	r19,r4
1000692c:	81000017 	ldw	r4,0(r16)
10006930:	dfc00415 	stw	ra,16(sp)
10006934:	dc800215 	stw	r18,8(sp)
10006938:	20800e17 	ldw	r2,56(r4)
1000693c:	dc400115 	stw	r17,4(sp)
10006940:	1000021e 	bne	r2,zero,1000694c <__sfp+0x38>
10006944:	00066f80 	call	100066f8 <__sinit.part.1>
10006948:	81000017 	ldw	r4,0(r16)
1000694c:	2480b804 	addi	r18,r4,736
10006950:	047fffc4 	movi	r17,-1
10006954:	91000117 	ldw	r4,4(r18)
10006958:	94000217 	ldw	r16,8(r18)
1000695c:	213fffc4 	addi	r4,r4,-1
10006960:	20000a16 	blt	r4,zero,1000698c <__sfp+0x78>
10006964:	8080030f 	ldh	r2,12(r16)
10006968:	10000c26 	beq	r2,zero,1000699c <__sfp+0x88>
1000696c:	80c01d04 	addi	r3,r16,116
10006970:	00000206 	br	1000697c <__sfp+0x68>
10006974:	18bfe60f 	ldh	r2,-104(r3)
10006978:	10000826 	beq	r2,zero,1000699c <__sfp+0x88>
1000697c:	213fffc4 	addi	r4,r4,-1
10006980:	1c3ffd04 	addi	r16,r3,-12
10006984:	18c01a04 	addi	r3,r3,104
10006988:	247ffa1e 	bne	r4,r17,10006974 <__alt_data_end+0xf8006974>
1000698c:	90800017 	ldw	r2,0(r18)
10006990:	10001d26 	beq	r2,zero,10006a08 <__sfp+0xf4>
10006994:	1025883a 	mov	r18,r2
10006998:	003fee06 	br	10006954 <__alt_data_end+0xf8006954>
1000699c:	00bfffc4 	movi	r2,-1
100069a0:	8080038d 	sth	r2,14(r16)
100069a4:	00800044 	movi	r2,1
100069a8:	8080030d 	sth	r2,12(r16)
100069ac:	80001915 	stw	zero,100(r16)
100069b0:	80000015 	stw	zero,0(r16)
100069b4:	80000215 	stw	zero,8(r16)
100069b8:	80000115 	stw	zero,4(r16)
100069bc:	80000415 	stw	zero,16(r16)
100069c0:	80000515 	stw	zero,20(r16)
100069c4:	80000615 	stw	zero,24(r16)
100069c8:	01800204 	movi	r6,8
100069cc:	000b883a 	mov	r5,zero
100069d0:	81001704 	addi	r4,r16,92
100069d4:	00083440 	call	10008344 <memset>
100069d8:	8005883a 	mov	r2,r16
100069dc:	80000c15 	stw	zero,48(r16)
100069e0:	80000d15 	stw	zero,52(r16)
100069e4:	80001115 	stw	zero,68(r16)
100069e8:	80001215 	stw	zero,72(r16)
100069ec:	dfc00417 	ldw	ra,16(sp)
100069f0:	dcc00317 	ldw	r19,12(sp)
100069f4:	dc800217 	ldw	r18,8(sp)
100069f8:	dc400117 	ldw	r17,4(sp)
100069fc:	dc000017 	ldw	r16,0(sp)
10006a00:	dec00504 	addi	sp,sp,20
10006a04:	f800283a 	ret
10006a08:	01400104 	movi	r5,4
10006a0c:	9809883a 	mov	r4,r19
10006a10:	000689c0 	call	1000689c <__sfmoreglue>
10006a14:	90800015 	stw	r2,0(r18)
10006a18:	103fde1e 	bne	r2,zero,10006994 <__alt_data_end+0xf8006994>
10006a1c:	00800304 	movi	r2,12
10006a20:	98800015 	stw	r2,0(r19)
10006a24:	0005883a 	mov	r2,zero
10006a28:	003ff006 	br	100069ec <__alt_data_end+0xf80069ec>

10006a2c <_cleanup>:
10006a2c:	00840074 	movhi	r2,4097
10006a30:	10905604 	addi	r2,r2,16728
10006a34:	11000017 	ldw	r4,0(r2)
10006a38:	01440074 	movhi	r5,4097
10006a3c:	296d7c04 	addi	r5,r5,-18960
10006a40:	00074541 	jmpi	10007454 <_fwalk_reent>

10006a44 <__sinit>:
10006a44:	20800e17 	ldw	r2,56(r4)
10006a48:	10000126 	beq	r2,zero,10006a50 <__sinit+0xc>
10006a4c:	f800283a 	ret
10006a50:	00066f81 	jmpi	100066f8 <__sinit.part.1>

10006a54 <__sfp_lock_acquire>:
10006a54:	f800283a 	ret

10006a58 <__sfp_lock_release>:
10006a58:	f800283a 	ret

10006a5c <__sinit_lock_acquire>:
10006a5c:	f800283a 	ret

10006a60 <__sinit_lock_release>:
10006a60:	f800283a 	ret

10006a64 <__fp_lock_all>:
10006a64:	00840074 	movhi	r2,4097
10006a68:	10905704 	addi	r2,r2,16732
10006a6c:	11000017 	ldw	r4,0(r2)
10006a70:	01440034 	movhi	r5,4096
10006a74:	295a2504 	addi	r5,r5,26772
10006a78:	00073901 	jmpi	10007390 <_fwalk>

10006a7c <__fp_unlock_all>:
10006a7c:	00840074 	movhi	r2,4097
10006a80:	10905704 	addi	r2,r2,16732
10006a84:	11000017 	ldw	r4,0(r2)
10006a88:	01440034 	movhi	r5,4096
10006a8c:	2959b904 	addi	r5,r5,26340
10006a90:	00073901 	jmpi	10007390 <_fwalk>

10006a94 <_malloc_trim_r>:
10006a94:	defffb04 	addi	sp,sp,-20
10006a98:	dcc00315 	stw	r19,12(sp)
10006a9c:	04c40074 	movhi	r19,4097
10006aa0:	dc800215 	stw	r18,8(sp)
10006aa4:	dc400115 	stw	r17,4(sp)
10006aa8:	dc000015 	stw	r16,0(sp)
10006aac:	dfc00415 	stw	ra,16(sp)
10006ab0:	2821883a 	mov	r16,r5
10006ab4:	9ccad104 	addi	r19,r19,11076
10006ab8:	2025883a 	mov	r18,r4
10006abc:	000f9880 	call	1000f988 <__malloc_lock>
10006ac0:	98800217 	ldw	r2,8(r19)
10006ac4:	14400117 	ldw	r17,4(r2)
10006ac8:	00bfff04 	movi	r2,-4
10006acc:	88a2703a 	and	r17,r17,r2
10006ad0:	8c21c83a 	sub	r16,r17,r16
10006ad4:	8403fbc4 	addi	r16,r16,4079
10006ad8:	8020d33a 	srli	r16,r16,12
10006adc:	0083ffc4 	movi	r2,4095
10006ae0:	843fffc4 	addi	r16,r16,-1
10006ae4:	8020933a 	slli	r16,r16,12
10006ae8:	1400060e 	bge	r2,r16,10006b04 <_malloc_trim_r+0x70>
10006aec:	000b883a 	mov	r5,zero
10006af0:	9009883a 	mov	r4,r18
10006af4:	0009afc0 	call	10009afc <_sbrk_r>
10006af8:	98c00217 	ldw	r3,8(r19)
10006afc:	1c47883a 	add	r3,r3,r17
10006b00:	10c00a26 	beq	r2,r3,10006b2c <_malloc_trim_r+0x98>
10006b04:	9009883a 	mov	r4,r18
10006b08:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10006b0c:	0005883a 	mov	r2,zero
10006b10:	dfc00417 	ldw	ra,16(sp)
10006b14:	dcc00317 	ldw	r19,12(sp)
10006b18:	dc800217 	ldw	r18,8(sp)
10006b1c:	dc400117 	ldw	r17,4(sp)
10006b20:	dc000017 	ldw	r16,0(sp)
10006b24:	dec00504 	addi	sp,sp,20
10006b28:	f800283a 	ret
10006b2c:	040bc83a 	sub	r5,zero,r16
10006b30:	9009883a 	mov	r4,r18
10006b34:	0009afc0 	call	10009afc <_sbrk_r>
10006b38:	00ffffc4 	movi	r3,-1
10006b3c:	10c00d26 	beq	r2,r3,10006b74 <_malloc_trim_r+0xe0>
10006b40:	00c40074 	movhi	r3,4097
10006b44:	18d73104 	addi	r3,r3,23748
10006b48:	18800017 	ldw	r2,0(r3)
10006b4c:	99000217 	ldw	r4,8(r19)
10006b50:	8c23c83a 	sub	r17,r17,r16
10006b54:	8c400054 	ori	r17,r17,1
10006b58:	1421c83a 	sub	r16,r2,r16
10006b5c:	24400115 	stw	r17,4(r4)
10006b60:	9009883a 	mov	r4,r18
10006b64:	1c000015 	stw	r16,0(r3)
10006b68:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10006b6c:	00800044 	movi	r2,1
10006b70:	003fe706 	br	10006b10 <__alt_data_end+0xf8006b10>
10006b74:	000b883a 	mov	r5,zero
10006b78:	9009883a 	mov	r4,r18
10006b7c:	0009afc0 	call	10009afc <_sbrk_r>
10006b80:	99000217 	ldw	r4,8(r19)
10006b84:	014003c4 	movi	r5,15
10006b88:	1107c83a 	sub	r3,r2,r4
10006b8c:	28ffdd0e 	bge	r5,r3,10006b04 <__alt_data_end+0xf8006b04>
10006b90:	01440074 	movhi	r5,4097
10006b94:	29505904 	addi	r5,r5,16740
10006b98:	29400017 	ldw	r5,0(r5)
10006b9c:	18c00054 	ori	r3,r3,1
10006ba0:	20c00115 	stw	r3,4(r4)
10006ba4:	00c40074 	movhi	r3,4097
10006ba8:	1145c83a 	sub	r2,r2,r5
10006bac:	18d73104 	addi	r3,r3,23748
10006bb0:	18800015 	stw	r2,0(r3)
10006bb4:	003fd306 	br	10006b04 <__alt_data_end+0xf8006b04>

10006bb8 <_free_r>:
10006bb8:	28004126 	beq	r5,zero,10006cc0 <_free_r+0x108>
10006bbc:	defffd04 	addi	sp,sp,-12
10006bc0:	dc400115 	stw	r17,4(sp)
10006bc4:	dc000015 	stw	r16,0(sp)
10006bc8:	2023883a 	mov	r17,r4
10006bcc:	2821883a 	mov	r16,r5
10006bd0:	dfc00215 	stw	ra,8(sp)
10006bd4:	000f9880 	call	1000f988 <__malloc_lock>
10006bd8:	81ffff17 	ldw	r7,-4(r16)
10006bdc:	00bfff84 	movi	r2,-2
10006be0:	01040074 	movhi	r4,4097
10006be4:	81bffe04 	addi	r6,r16,-8
10006be8:	3884703a 	and	r2,r7,r2
10006bec:	210ad104 	addi	r4,r4,11076
10006bf0:	308b883a 	add	r5,r6,r2
10006bf4:	2a400117 	ldw	r9,4(r5)
10006bf8:	22000217 	ldw	r8,8(r4)
10006bfc:	00ffff04 	movi	r3,-4
10006c00:	48c6703a 	and	r3,r9,r3
10006c04:	2a005726 	beq	r5,r8,10006d64 <_free_r+0x1ac>
10006c08:	28c00115 	stw	r3,4(r5)
10006c0c:	39c0004c 	andi	r7,r7,1
10006c10:	3800091e 	bne	r7,zero,10006c38 <_free_r+0x80>
10006c14:	823ffe17 	ldw	r8,-8(r16)
10006c18:	22400204 	addi	r9,r4,8
10006c1c:	320dc83a 	sub	r6,r6,r8
10006c20:	31c00217 	ldw	r7,8(r6)
10006c24:	1205883a 	add	r2,r2,r8
10006c28:	3a406526 	beq	r7,r9,10006dc0 <_free_r+0x208>
10006c2c:	32000317 	ldw	r8,12(r6)
10006c30:	3a000315 	stw	r8,12(r7)
10006c34:	41c00215 	stw	r7,8(r8)
10006c38:	28cf883a 	add	r7,r5,r3
10006c3c:	39c00117 	ldw	r7,4(r7)
10006c40:	39c0004c 	andi	r7,r7,1
10006c44:	38003a26 	beq	r7,zero,10006d30 <_free_r+0x178>
10006c48:	10c00054 	ori	r3,r2,1
10006c4c:	30c00115 	stw	r3,4(r6)
10006c50:	3087883a 	add	r3,r6,r2
10006c54:	18800015 	stw	r2,0(r3)
10006c58:	00c07fc4 	movi	r3,511
10006c5c:	18801936 	bltu	r3,r2,10006cc4 <_free_r+0x10c>
10006c60:	1004d0fa 	srli	r2,r2,3
10006c64:	01c00044 	movi	r7,1
10006c68:	21400117 	ldw	r5,4(r4)
10006c6c:	10c00044 	addi	r3,r2,1
10006c70:	18c7883a 	add	r3,r3,r3
10006c74:	1005d0ba 	srai	r2,r2,2
10006c78:	18c7883a 	add	r3,r3,r3
10006c7c:	18c7883a 	add	r3,r3,r3
10006c80:	1907883a 	add	r3,r3,r4
10006c84:	3884983a 	sll	r2,r7,r2
10006c88:	19c00017 	ldw	r7,0(r3)
10006c8c:	1a3ffe04 	addi	r8,r3,-8
10006c90:	1144b03a 	or	r2,r2,r5
10006c94:	32000315 	stw	r8,12(r6)
10006c98:	31c00215 	stw	r7,8(r6)
10006c9c:	20800115 	stw	r2,4(r4)
10006ca0:	19800015 	stw	r6,0(r3)
10006ca4:	39800315 	stw	r6,12(r7)
10006ca8:	8809883a 	mov	r4,r17
10006cac:	dfc00217 	ldw	ra,8(sp)
10006cb0:	dc400117 	ldw	r17,4(sp)
10006cb4:	dc000017 	ldw	r16,0(sp)
10006cb8:	dec00304 	addi	sp,sp,12
10006cbc:	000f9ac1 	jmpi	1000f9ac <__malloc_unlock>
10006cc0:	f800283a 	ret
10006cc4:	100ad27a 	srli	r5,r2,9
10006cc8:	00c00104 	movi	r3,4
10006ccc:	19404a36 	bltu	r3,r5,10006df8 <_free_r+0x240>
10006cd0:	100ad1ba 	srli	r5,r2,6
10006cd4:	28c00e44 	addi	r3,r5,57
10006cd8:	18c7883a 	add	r3,r3,r3
10006cdc:	29400e04 	addi	r5,r5,56
10006ce0:	18c7883a 	add	r3,r3,r3
10006ce4:	18c7883a 	add	r3,r3,r3
10006ce8:	1909883a 	add	r4,r3,r4
10006cec:	20c00017 	ldw	r3,0(r4)
10006cf0:	01c40074 	movhi	r7,4097
10006cf4:	213ffe04 	addi	r4,r4,-8
10006cf8:	39cad104 	addi	r7,r7,11076
10006cfc:	20c04426 	beq	r4,r3,10006e10 <_free_r+0x258>
10006d00:	01ffff04 	movi	r7,-4
10006d04:	19400117 	ldw	r5,4(r3)
10006d08:	29ca703a 	and	r5,r5,r7
10006d0c:	1140022e 	bgeu	r2,r5,10006d18 <_free_r+0x160>
10006d10:	18c00217 	ldw	r3,8(r3)
10006d14:	20fffb1e 	bne	r4,r3,10006d04 <__alt_data_end+0xf8006d04>
10006d18:	19000317 	ldw	r4,12(r3)
10006d1c:	31000315 	stw	r4,12(r6)
10006d20:	30c00215 	stw	r3,8(r6)
10006d24:	21800215 	stw	r6,8(r4)
10006d28:	19800315 	stw	r6,12(r3)
10006d2c:	003fde06 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10006d30:	29c00217 	ldw	r7,8(r5)
10006d34:	10c5883a 	add	r2,r2,r3
10006d38:	00c40074 	movhi	r3,4097
10006d3c:	18cad304 	addi	r3,r3,11084
10006d40:	38c03b26 	beq	r7,r3,10006e30 <_free_r+0x278>
10006d44:	2a000317 	ldw	r8,12(r5)
10006d48:	11400054 	ori	r5,r2,1
10006d4c:	3087883a 	add	r3,r6,r2
10006d50:	3a000315 	stw	r8,12(r7)
10006d54:	41c00215 	stw	r7,8(r8)
10006d58:	31400115 	stw	r5,4(r6)
10006d5c:	18800015 	stw	r2,0(r3)
10006d60:	003fbd06 	br	10006c58 <__alt_data_end+0xf8006c58>
10006d64:	39c0004c 	andi	r7,r7,1
10006d68:	10c5883a 	add	r2,r2,r3
10006d6c:	3800071e 	bne	r7,zero,10006d8c <_free_r+0x1d4>
10006d70:	81fffe17 	ldw	r7,-8(r16)
10006d74:	31cdc83a 	sub	r6,r6,r7
10006d78:	30c00317 	ldw	r3,12(r6)
10006d7c:	31400217 	ldw	r5,8(r6)
10006d80:	11c5883a 	add	r2,r2,r7
10006d84:	28c00315 	stw	r3,12(r5)
10006d88:	19400215 	stw	r5,8(r3)
10006d8c:	10c00054 	ori	r3,r2,1
10006d90:	30c00115 	stw	r3,4(r6)
10006d94:	00c40074 	movhi	r3,4097
10006d98:	18d05a04 	addi	r3,r3,16744
10006d9c:	18c00017 	ldw	r3,0(r3)
10006da0:	21800215 	stw	r6,8(r4)
10006da4:	10ffc036 	bltu	r2,r3,10006ca8 <__alt_data_end+0xf8006ca8>
10006da8:	00840074 	movhi	r2,4097
10006dac:	10972804 	addi	r2,r2,23712
10006db0:	11400017 	ldw	r5,0(r2)
10006db4:	8809883a 	mov	r4,r17
10006db8:	0006a940 	call	10006a94 <_malloc_trim_r>
10006dbc:	003fba06 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10006dc0:	28c9883a 	add	r4,r5,r3
10006dc4:	21000117 	ldw	r4,4(r4)
10006dc8:	2100004c 	andi	r4,r4,1
10006dcc:	2000391e 	bne	r4,zero,10006eb4 <_free_r+0x2fc>
10006dd0:	29c00217 	ldw	r7,8(r5)
10006dd4:	29000317 	ldw	r4,12(r5)
10006dd8:	1885883a 	add	r2,r3,r2
10006ddc:	10c00054 	ori	r3,r2,1
10006de0:	39000315 	stw	r4,12(r7)
10006de4:	21c00215 	stw	r7,8(r4)
10006de8:	30c00115 	stw	r3,4(r6)
10006dec:	308d883a 	add	r6,r6,r2
10006df0:	30800015 	stw	r2,0(r6)
10006df4:	003fac06 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10006df8:	00c00504 	movi	r3,20
10006dfc:	19401536 	bltu	r3,r5,10006e54 <_free_r+0x29c>
10006e00:	28c01704 	addi	r3,r5,92
10006e04:	18c7883a 	add	r3,r3,r3
10006e08:	294016c4 	addi	r5,r5,91
10006e0c:	003fb406 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10006e10:	280bd0ba 	srai	r5,r5,2
10006e14:	00c00044 	movi	r3,1
10006e18:	38800117 	ldw	r2,4(r7)
10006e1c:	194a983a 	sll	r5,r3,r5
10006e20:	2007883a 	mov	r3,r4
10006e24:	2884b03a 	or	r2,r5,r2
10006e28:	38800115 	stw	r2,4(r7)
10006e2c:	003fbb06 	br	10006d1c <__alt_data_end+0xf8006d1c>
10006e30:	21800515 	stw	r6,20(r4)
10006e34:	21800415 	stw	r6,16(r4)
10006e38:	10c00054 	ori	r3,r2,1
10006e3c:	31c00315 	stw	r7,12(r6)
10006e40:	31c00215 	stw	r7,8(r6)
10006e44:	30c00115 	stw	r3,4(r6)
10006e48:	308d883a 	add	r6,r6,r2
10006e4c:	30800015 	stw	r2,0(r6)
10006e50:	003f9506 	br	10006ca8 <__alt_data_end+0xf8006ca8>
10006e54:	00c01504 	movi	r3,84
10006e58:	19400536 	bltu	r3,r5,10006e70 <_free_r+0x2b8>
10006e5c:	100ad33a 	srli	r5,r2,12
10006e60:	28c01bc4 	addi	r3,r5,111
10006e64:	18c7883a 	add	r3,r3,r3
10006e68:	29401b84 	addi	r5,r5,110
10006e6c:	003f9c06 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10006e70:	00c05504 	movi	r3,340
10006e74:	19400536 	bltu	r3,r5,10006e8c <_free_r+0x2d4>
10006e78:	100ad3fa 	srli	r5,r2,15
10006e7c:	28c01e04 	addi	r3,r5,120
10006e80:	18c7883a 	add	r3,r3,r3
10006e84:	29401dc4 	addi	r5,r5,119
10006e88:	003f9506 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10006e8c:	00c15504 	movi	r3,1364
10006e90:	19400536 	bltu	r3,r5,10006ea8 <_free_r+0x2f0>
10006e94:	100ad4ba 	srli	r5,r2,18
10006e98:	28c01f44 	addi	r3,r5,125
10006e9c:	18c7883a 	add	r3,r3,r3
10006ea0:	29401f04 	addi	r5,r5,124
10006ea4:	003f8e06 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10006ea8:	00c03f84 	movi	r3,254
10006eac:	01401f84 	movi	r5,126
10006eb0:	003f8b06 	br	10006ce0 <__alt_data_end+0xf8006ce0>
10006eb4:	10c00054 	ori	r3,r2,1
10006eb8:	30c00115 	stw	r3,4(r6)
10006ebc:	308d883a 	add	r6,r6,r2
10006ec0:	30800015 	stw	r2,0(r6)
10006ec4:	003f7806 	br	10006ca8 <__alt_data_end+0xf8006ca8>

10006ec8 <__sfvwrite_r>:
10006ec8:	30800217 	ldw	r2,8(r6)
10006ecc:	10006726 	beq	r2,zero,1000706c <__sfvwrite_r+0x1a4>
10006ed0:	28c0030b 	ldhu	r3,12(r5)
10006ed4:	defff404 	addi	sp,sp,-48
10006ed8:	dd400715 	stw	r21,28(sp)
10006edc:	dd000615 	stw	r20,24(sp)
10006ee0:	dc000215 	stw	r16,8(sp)
10006ee4:	dfc00b15 	stw	ra,44(sp)
10006ee8:	df000a15 	stw	fp,40(sp)
10006eec:	ddc00915 	stw	r23,36(sp)
10006ef0:	dd800815 	stw	r22,32(sp)
10006ef4:	dcc00515 	stw	r19,20(sp)
10006ef8:	dc800415 	stw	r18,16(sp)
10006efc:	dc400315 	stw	r17,12(sp)
10006f00:	1880020c 	andi	r2,r3,8
10006f04:	2821883a 	mov	r16,r5
10006f08:	202b883a 	mov	r21,r4
10006f0c:	3029883a 	mov	r20,r6
10006f10:	10002726 	beq	r2,zero,10006fb0 <__sfvwrite_r+0xe8>
10006f14:	28800417 	ldw	r2,16(r5)
10006f18:	10002526 	beq	r2,zero,10006fb0 <__sfvwrite_r+0xe8>
10006f1c:	1880008c 	andi	r2,r3,2
10006f20:	a4400017 	ldw	r17,0(r20)
10006f24:	10002a26 	beq	r2,zero,10006fd0 <__sfvwrite_r+0x108>
10006f28:	05a00034 	movhi	r22,32768
10006f2c:	0027883a 	mov	r19,zero
10006f30:	0025883a 	mov	r18,zero
10006f34:	b5bf0004 	addi	r22,r22,-1024
10006f38:	980d883a 	mov	r6,r19
10006f3c:	a809883a 	mov	r4,r21
10006f40:	90004626 	beq	r18,zero,1000705c <__sfvwrite_r+0x194>
10006f44:	900f883a 	mov	r7,r18
10006f48:	b480022e 	bgeu	r22,r18,10006f54 <__sfvwrite_r+0x8c>
10006f4c:	01e00034 	movhi	r7,32768
10006f50:	39ff0004 	addi	r7,r7,-1024
10006f54:	80800917 	ldw	r2,36(r16)
10006f58:	81400717 	ldw	r5,28(r16)
10006f5c:	103ee83a 	callr	r2
10006f60:	00805a0e 	bge	zero,r2,100070cc <__sfvwrite_r+0x204>
10006f64:	a0c00217 	ldw	r3,8(r20)
10006f68:	98a7883a 	add	r19,r19,r2
10006f6c:	90a5c83a 	sub	r18,r18,r2
10006f70:	1885c83a 	sub	r2,r3,r2
10006f74:	a0800215 	stw	r2,8(r20)
10006f78:	103fef1e 	bne	r2,zero,10006f38 <__alt_data_end+0xf8006f38>
10006f7c:	0005883a 	mov	r2,zero
10006f80:	dfc00b17 	ldw	ra,44(sp)
10006f84:	df000a17 	ldw	fp,40(sp)
10006f88:	ddc00917 	ldw	r23,36(sp)
10006f8c:	dd800817 	ldw	r22,32(sp)
10006f90:	dd400717 	ldw	r21,28(sp)
10006f94:	dd000617 	ldw	r20,24(sp)
10006f98:	dcc00517 	ldw	r19,20(sp)
10006f9c:	dc800417 	ldw	r18,16(sp)
10006fa0:	dc400317 	ldw	r17,12(sp)
10006fa4:	dc000217 	ldw	r16,8(sp)
10006fa8:	dec00c04 	addi	sp,sp,48
10006fac:	f800283a 	ret
10006fb0:	800b883a 	mov	r5,r16
10006fb4:	a809883a 	mov	r4,r21
10006fb8:	0004a380 	call	10004a38 <__swsetup_r>
10006fbc:	1000ee1e 	bne	r2,zero,10007378 <__sfvwrite_r+0x4b0>
10006fc0:	80c0030b 	ldhu	r3,12(r16)
10006fc4:	a4400017 	ldw	r17,0(r20)
10006fc8:	1880008c 	andi	r2,r3,2
10006fcc:	103fd61e 	bne	r2,zero,10006f28 <__alt_data_end+0xf8006f28>
10006fd0:	1880004c 	andi	r2,r3,1
10006fd4:	1000421e 	bne	r2,zero,100070e0 <__sfvwrite_r+0x218>
10006fd8:	0039883a 	mov	fp,zero
10006fdc:	0025883a 	mov	r18,zero
10006fe0:	90001a26 	beq	r18,zero,1000704c <__sfvwrite_r+0x184>
10006fe4:	1880800c 	andi	r2,r3,512
10006fe8:	84c00217 	ldw	r19,8(r16)
10006fec:	10002126 	beq	r2,zero,10007074 <__sfvwrite_r+0x1ac>
10006ff0:	982f883a 	mov	r23,r19
10006ff4:	94c09636 	bltu	r18,r19,10007250 <__sfvwrite_r+0x388>
10006ff8:	1881200c 	andi	r2,r3,1152
10006ffc:	1000a11e 	bne	r2,zero,10007284 <__sfvwrite_r+0x3bc>
10007000:	81000017 	ldw	r4,0(r16)
10007004:	b80d883a 	mov	r6,r23
10007008:	e00b883a 	mov	r5,fp
1000700c:	00081e80 	call	100081e8 <memmove>
10007010:	80c00217 	ldw	r3,8(r16)
10007014:	81000017 	ldw	r4,0(r16)
10007018:	9005883a 	mov	r2,r18
1000701c:	1ce7c83a 	sub	r19,r3,r19
10007020:	25cf883a 	add	r7,r4,r23
10007024:	84c00215 	stw	r19,8(r16)
10007028:	81c00015 	stw	r7,0(r16)
1000702c:	a0c00217 	ldw	r3,8(r20)
10007030:	e0b9883a 	add	fp,fp,r2
10007034:	90a5c83a 	sub	r18,r18,r2
10007038:	18a7c83a 	sub	r19,r3,r2
1000703c:	a4c00215 	stw	r19,8(r20)
10007040:	983fce26 	beq	r19,zero,10006f7c <__alt_data_end+0xf8006f7c>
10007044:	80c0030b 	ldhu	r3,12(r16)
10007048:	903fe61e 	bne	r18,zero,10006fe4 <__alt_data_end+0xf8006fe4>
1000704c:	8f000017 	ldw	fp,0(r17)
10007050:	8c800117 	ldw	r18,4(r17)
10007054:	8c400204 	addi	r17,r17,8
10007058:	003fe106 	br	10006fe0 <__alt_data_end+0xf8006fe0>
1000705c:	8cc00017 	ldw	r19,0(r17)
10007060:	8c800117 	ldw	r18,4(r17)
10007064:	8c400204 	addi	r17,r17,8
10007068:	003fb306 	br	10006f38 <__alt_data_end+0xf8006f38>
1000706c:	0005883a 	mov	r2,zero
10007070:	f800283a 	ret
10007074:	81000017 	ldw	r4,0(r16)
10007078:	80800417 	ldw	r2,16(r16)
1000707c:	11005a36 	bltu	r2,r4,100071e8 <__sfvwrite_r+0x320>
10007080:	85c00517 	ldw	r23,20(r16)
10007084:	95c05836 	bltu	r18,r23,100071e8 <__sfvwrite_r+0x320>
10007088:	00a00034 	movhi	r2,32768
1000708c:	10bfffc4 	addi	r2,r2,-1
10007090:	9009883a 	mov	r4,r18
10007094:	1480012e 	bgeu	r2,r18,1000709c <__sfvwrite_r+0x1d4>
10007098:	1009883a 	mov	r4,r2
1000709c:	b80b883a 	mov	r5,r23
100070a0:	000c96c0 	call	1000c96c <__divsi3>
100070a4:	b80b883a 	mov	r5,r23
100070a8:	1009883a 	mov	r4,r2
100070ac:	000cb200 	call	1000cb20 <__mulsi3>
100070b0:	81400717 	ldw	r5,28(r16)
100070b4:	80c00917 	ldw	r3,36(r16)
100070b8:	100f883a 	mov	r7,r2
100070bc:	e00d883a 	mov	r6,fp
100070c0:	a809883a 	mov	r4,r21
100070c4:	183ee83a 	callr	r3
100070c8:	00bfd816 	blt	zero,r2,1000702c <__alt_data_end+0xf800702c>
100070cc:	8080030b 	ldhu	r2,12(r16)
100070d0:	10801014 	ori	r2,r2,64
100070d4:	8080030d 	sth	r2,12(r16)
100070d8:	00bfffc4 	movi	r2,-1
100070dc:	003fa806 	br	10006f80 <__alt_data_end+0xf8006f80>
100070e0:	0027883a 	mov	r19,zero
100070e4:	0011883a 	mov	r8,zero
100070e8:	0039883a 	mov	fp,zero
100070ec:	0025883a 	mov	r18,zero
100070f0:	90001f26 	beq	r18,zero,10007170 <__sfvwrite_r+0x2a8>
100070f4:	40005a26 	beq	r8,zero,10007260 <__sfvwrite_r+0x398>
100070f8:	982d883a 	mov	r22,r19
100070fc:	94c0012e 	bgeu	r18,r19,10007104 <__sfvwrite_r+0x23c>
10007100:	902d883a 	mov	r22,r18
10007104:	81000017 	ldw	r4,0(r16)
10007108:	80800417 	ldw	r2,16(r16)
1000710c:	b02f883a 	mov	r23,r22
10007110:	81c00517 	ldw	r7,20(r16)
10007114:	1100032e 	bgeu	r2,r4,10007124 <__sfvwrite_r+0x25c>
10007118:	80c00217 	ldw	r3,8(r16)
1000711c:	38c7883a 	add	r3,r7,r3
10007120:	1d801816 	blt	r3,r22,10007184 <__sfvwrite_r+0x2bc>
10007124:	b1c03e16 	blt	r22,r7,10007220 <__sfvwrite_r+0x358>
10007128:	80800917 	ldw	r2,36(r16)
1000712c:	81400717 	ldw	r5,28(r16)
10007130:	e00d883a 	mov	r6,fp
10007134:	da000115 	stw	r8,4(sp)
10007138:	a809883a 	mov	r4,r21
1000713c:	103ee83a 	callr	r2
10007140:	102f883a 	mov	r23,r2
10007144:	da000117 	ldw	r8,4(sp)
10007148:	00bfe00e 	bge	zero,r2,100070cc <__alt_data_end+0xf80070cc>
1000714c:	9de7c83a 	sub	r19,r19,r23
10007150:	98001f26 	beq	r19,zero,100071d0 <__sfvwrite_r+0x308>
10007154:	a0800217 	ldw	r2,8(r20)
10007158:	e5f9883a 	add	fp,fp,r23
1000715c:	95e5c83a 	sub	r18,r18,r23
10007160:	15efc83a 	sub	r23,r2,r23
10007164:	a5c00215 	stw	r23,8(r20)
10007168:	b83f8426 	beq	r23,zero,10006f7c <__alt_data_end+0xf8006f7c>
1000716c:	903fe11e 	bne	r18,zero,100070f4 <__alt_data_end+0xf80070f4>
10007170:	8f000017 	ldw	fp,0(r17)
10007174:	8c800117 	ldw	r18,4(r17)
10007178:	0011883a 	mov	r8,zero
1000717c:	8c400204 	addi	r17,r17,8
10007180:	003fdb06 	br	100070f0 <__alt_data_end+0xf80070f0>
10007184:	180d883a 	mov	r6,r3
10007188:	e00b883a 	mov	r5,fp
1000718c:	da000115 	stw	r8,4(sp)
10007190:	d8c00015 	stw	r3,0(sp)
10007194:	00081e80 	call	100081e8 <memmove>
10007198:	d8c00017 	ldw	r3,0(sp)
1000719c:	80800017 	ldw	r2,0(r16)
100071a0:	800b883a 	mov	r5,r16
100071a4:	a809883a 	mov	r4,r21
100071a8:	10c5883a 	add	r2,r2,r3
100071ac:	80800015 	stw	r2,0(r16)
100071b0:	d8c00015 	stw	r3,0(sp)
100071b4:	00066580 	call	10006658 <_fflush_r>
100071b8:	d8c00017 	ldw	r3,0(sp)
100071bc:	da000117 	ldw	r8,4(sp)
100071c0:	103fc21e 	bne	r2,zero,100070cc <__alt_data_end+0xf80070cc>
100071c4:	182f883a 	mov	r23,r3
100071c8:	9de7c83a 	sub	r19,r19,r23
100071cc:	983fe11e 	bne	r19,zero,10007154 <__alt_data_end+0xf8007154>
100071d0:	800b883a 	mov	r5,r16
100071d4:	a809883a 	mov	r4,r21
100071d8:	00066580 	call	10006658 <_fflush_r>
100071dc:	103fbb1e 	bne	r2,zero,100070cc <__alt_data_end+0xf80070cc>
100071e0:	0011883a 	mov	r8,zero
100071e4:	003fdb06 	br	10007154 <__alt_data_end+0xf8007154>
100071e8:	94c0012e 	bgeu	r18,r19,100071f0 <__sfvwrite_r+0x328>
100071ec:	9027883a 	mov	r19,r18
100071f0:	980d883a 	mov	r6,r19
100071f4:	e00b883a 	mov	r5,fp
100071f8:	00081e80 	call	100081e8 <memmove>
100071fc:	80800217 	ldw	r2,8(r16)
10007200:	80c00017 	ldw	r3,0(r16)
10007204:	14c5c83a 	sub	r2,r2,r19
10007208:	1cc7883a 	add	r3,r3,r19
1000720c:	80800215 	stw	r2,8(r16)
10007210:	80c00015 	stw	r3,0(r16)
10007214:	10004326 	beq	r2,zero,10007324 <__sfvwrite_r+0x45c>
10007218:	9805883a 	mov	r2,r19
1000721c:	003f8306 	br	1000702c <__alt_data_end+0xf800702c>
10007220:	b00d883a 	mov	r6,r22
10007224:	e00b883a 	mov	r5,fp
10007228:	da000115 	stw	r8,4(sp)
1000722c:	00081e80 	call	100081e8 <memmove>
10007230:	80800217 	ldw	r2,8(r16)
10007234:	80c00017 	ldw	r3,0(r16)
10007238:	da000117 	ldw	r8,4(sp)
1000723c:	1585c83a 	sub	r2,r2,r22
10007240:	1dad883a 	add	r22,r3,r22
10007244:	80800215 	stw	r2,8(r16)
10007248:	85800015 	stw	r22,0(r16)
1000724c:	003fbf06 	br	1000714c <__alt_data_end+0xf800714c>
10007250:	81000017 	ldw	r4,0(r16)
10007254:	9027883a 	mov	r19,r18
10007258:	902f883a 	mov	r23,r18
1000725c:	003f6906 	br	10007004 <__alt_data_end+0xf8007004>
10007260:	900d883a 	mov	r6,r18
10007264:	01400284 	movi	r5,10
10007268:	e009883a 	mov	r4,fp
1000726c:	0007fbc0 	call	10007fbc <memchr>
10007270:	10003e26 	beq	r2,zero,1000736c <__sfvwrite_r+0x4a4>
10007274:	10800044 	addi	r2,r2,1
10007278:	1727c83a 	sub	r19,r2,fp
1000727c:	02000044 	movi	r8,1
10007280:	003f9d06 	br	100070f8 <__alt_data_end+0xf80070f8>
10007284:	80800517 	ldw	r2,20(r16)
10007288:	81400417 	ldw	r5,16(r16)
1000728c:	81c00017 	ldw	r7,0(r16)
10007290:	10a7883a 	add	r19,r2,r2
10007294:	9885883a 	add	r2,r19,r2
10007298:	1026d7fa 	srli	r19,r2,31
1000729c:	396dc83a 	sub	r22,r7,r5
100072a0:	b1000044 	addi	r4,r22,1
100072a4:	9885883a 	add	r2,r19,r2
100072a8:	1027d07a 	srai	r19,r2,1
100072ac:	2485883a 	add	r2,r4,r18
100072b0:	980d883a 	mov	r6,r19
100072b4:	9880022e 	bgeu	r19,r2,100072c0 <__sfvwrite_r+0x3f8>
100072b8:	1027883a 	mov	r19,r2
100072bc:	100d883a 	mov	r6,r2
100072c0:	18c1000c 	andi	r3,r3,1024
100072c4:	18001c26 	beq	r3,zero,10007338 <__sfvwrite_r+0x470>
100072c8:	300b883a 	mov	r5,r6
100072cc:	a809883a 	mov	r4,r21
100072d0:	00077b00 	call	100077b0 <_malloc_r>
100072d4:	102f883a 	mov	r23,r2
100072d8:	10002926 	beq	r2,zero,10007380 <__sfvwrite_r+0x4b8>
100072dc:	81400417 	ldw	r5,16(r16)
100072e0:	b00d883a 	mov	r6,r22
100072e4:	1009883a 	mov	r4,r2
100072e8:	00080a00 	call	100080a0 <memcpy>
100072ec:	8080030b 	ldhu	r2,12(r16)
100072f0:	00fedfc4 	movi	r3,-1153
100072f4:	10c4703a 	and	r2,r2,r3
100072f8:	10802014 	ori	r2,r2,128
100072fc:	8080030d 	sth	r2,12(r16)
10007300:	bd89883a 	add	r4,r23,r22
10007304:	9d8fc83a 	sub	r7,r19,r22
10007308:	85c00415 	stw	r23,16(r16)
1000730c:	84c00515 	stw	r19,20(r16)
10007310:	81000015 	stw	r4,0(r16)
10007314:	9027883a 	mov	r19,r18
10007318:	81c00215 	stw	r7,8(r16)
1000731c:	902f883a 	mov	r23,r18
10007320:	003f3806 	br	10007004 <__alt_data_end+0xf8007004>
10007324:	800b883a 	mov	r5,r16
10007328:	a809883a 	mov	r4,r21
1000732c:	00066580 	call	10006658 <_fflush_r>
10007330:	103fb926 	beq	r2,zero,10007218 <__alt_data_end+0xf8007218>
10007334:	003f6506 	br	100070cc <__alt_data_end+0xf80070cc>
10007338:	a809883a 	mov	r4,r21
1000733c:	00095240 	call	10009524 <_realloc_r>
10007340:	102f883a 	mov	r23,r2
10007344:	103fee1e 	bne	r2,zero,10007300 <__alt_data_end+0xf8007300>
10007348:	81400417 	ldw	r5,16(r16)
1000734c:	a809883a 	mov	r4,r21
10007350:	0006bb80 	call	10006bb8 <_free_r>
10007354:	8080030b 	ldhu	r2,12(r16)
10007358:	00ffdfc4 	movi	r3,-129
1000735c:	1884703a 	and	r2,r3,r2
10007360:	00c00304 	movi	r3,12
10007364:	a8c00015 	stw	r3,0(r21)
10007368:	003f5906 	br	100070d0 <__alt_data_end+0xf80070d0>
1000736c:	94c00044 	addi	r19,r18,1
10007370:	02000044 	movi	r8,1
10007374:	003f6006 	br	100070f8 <__alt_data_end+0xf80070f8>
10007378:	00bfffc4 	movi	r2,-1
1000737c:	003f0006 	br	10006f80 <__alt_data_end+0xf8006f80>
10007380:	00800304 	movi	r2,12
10007384:	a8800015 	stw	r2,0(r21)
10007388:	8080030b 	ldhu	r2,12(r16)
1000738c:	003f5006 	br	100070d0 <__alt_data_end+0xf80070d0>

10007390 <_fwalk>:
10007390:	defff704 	addi	sp,sp,-36
10007394:	dd000415 	stw	r20,16(sp)
10007398:	dfc00815 	stw	ra,32(sp)
1000739c:	ddc00715 	stw	r23,28(sp)
100073a0:	dd800615 	stw	r22,24(sp)
100073a4:	dd400515 	stw	r21,20(sp)
100073a8:	dcc00315 	stw	r19,12(sp)
100073ac:	dc800215 	stw	r18,8(sp)
100073b0:	dc400115 	stw	r17,4(sp)
100073b4:	dc000015 	stw	r16,0(sp)
100073b8:	2500b804 	addi	r20,r4,736
100073bc:	a0002326 	beq	r20,zero,1000744c <_fwalk+0xbc>
100073c0:	282b883a 	mov	r21,r5
100073c4:	002f883a 	mov	r23,zero
100073c8:	05800044 	movi	r22,1
100073cc:	04ffffc4 	movi	r19,-1
100073d0:	a4400117 	ldw	r17,4(r20)
100073d4:	a4800217 	ldw	r18,8(r20)
100073d8:	8c7fffc4 	addi	r17,r17,-1
100073dc:	88000d16 	blt	r17,zero,10007414 <_fwalk+0x84>
100073e0:	94000304 	addi	r16,r18,12
100073e4:	94800384 	addi	r18,r18,14
100073e8:	8080000b 	ldhu	r2,0(r16)
100073ec:	8c7fffc4 	addi	r17,r17,-1
100073f0:	813ffd04 	addi	r4,r16,-12
100073f4:	b080042e 	bgeu	r22,r2,10007408 <_fwalk+0x78>
100073f8:	9080000f 	ldh	r2,0(r18)
100073fc:	14c00226 	beq	r2,r19,10007408 <_fwalk+0x78>
10007400:	a83ee83a 	callr	r21
10007404:	b8aeb03a 	or	r23,r23,r2
10007408:	84001a04 	addi	r16,r16,104
1000740c:	94801a04 	addi	r18,r18,104
10007410:	8cfff51e 	bne	r17,r19,100073e8 <__alt_data_end+0xf80073e8>
10007414:	a5000017 	ldw	r20,0(r20)
10007418:	a03fed1e 	bne	r20,zero,100073d0 <__alt_data_end+0xf80073d0>
1000741c:	b805883a 	mov	r2,r23
10007420:	dfc00817 	ldw	ra,32(sp)
10007424:	ddc00717 	ldw	r23,28(sp)
10007428:	dd800617 	ldw	r22,24(sp)
1000742c:	dd400517 	ldw	r21,20(sp)
10007430:	dd000417 	ldw	r20,16(sp)
10007434:	dcc00317 	ldw	r19,12(sp)
10007438:	dc800217 	ldw	r18,8(sp)
1000743c:	dc400117 	ldw	r17,4(sp)
10007440:	dc000017 	ldw	r16,0(sp)
10007444:	dec00904 	addi	sp,sp,36
10007448:	f800283a 	ret
1000744c:	002f883a 	mov	r23,zero
10007450:	003ff206 	br	1000741c <__alt_data_end+0xf800741c>

10007454 <_fwalk_reent>:
10007454:	defff704 	addi	sp,sp,-36
10007458:	dd000415 	stw	r20,16(sp)
1000745c:	dfc00815 	stw	ra,32(sp)
10007460:	ddc00715 	stw	r23,28(sp)
10007464:	dd800615 	stw	r22,24(sp)
10007468:	dd400515 	stw	r21,20(sp)
1000746c:	dcc00315 	stw	r19,12(sp)
10007470:	dc800215 	stw	r18,8(sp)
10007474:	dc400115 	stw	r17,4(sp)
10007478:	dc000015 	stw	r16,0(sp)
1000747c:	2500b804 	addi	r20,r4,736
10007480:	a0002326 	beq	r20,zero,10007510 <_fwalk_reent+0xbc>
10007484:	282b883a 	mov	r21,r5
10007488:	2027883a 	mov	r19,r4
1000748c:	002f883a 	mov	r23,zero
10007490:	05800044 	movi	r22,1
10007494:	04bfffc4 	movi	r18,-1
10007498:	a4400117 	ldw	r17,4(r20)
1000749c:	a4000217 	ldw	r16,8(r20)
100074a0:	8c7fffc4 	addi	r17,r17,-1
100074a4:	88000c16 	blt	r17,zero,100074d8 <_fwalk_reent+0x84>
100074a8:	84000304 	addi	r16,r16,12
100074ac:	8080000b 	ldhu	r2,0(r16)
100074b0:	8c7fffc4 	addi	r17,r17,-1
100074b4:	817ffd04 	addi	r5,r16,-12
100074b8:	b080052e 	bgeu	r22,r2,100074d0 <_fwalk_reent+0x7c>
100074bc:	8080008f 	ldh	r2,2(r16)
100074c0:	9809883a 	mov	r4,r19
100074c4:	14800226 	beq	r2,r18,100074d0 <_fwalk_reent+0x7c>
100074c8:	a83ee83a 	callr	r21
100074cc:	b8aeb03a 	or	r23,r23,r2
100074d0:	84001a04 	addi	r16,r16,104
100074d4:	8cbff51e 	bne	r17,r18,100074ac <__alt_data_end+0xf80074ac>
100074d8:	a5000017 	ldw	r20,0(r20)
100074dc:	a03fee1e 	bne	r20,zero,10007498 <__alt_data_end+0xf8007498>
100074e0:	b805883a 	mov	r2,r23
100074e4:	dfc00817 	ldw	ra,32(sp)
100074e8:	ddc00717 	ldw	r23,28(sp)
100074ec:	dd800617 	ldw	r22,24(sp)
100074f0:	dd400517 	ldw	r21,20(sp)
100074f4:	dd000417 	ldw	r20,16(sp)
100074f8:	dcc00317 	ldw	r19,12(sp)
100074fc:	dc800217 	ldw	r18,8(sp)
10007500:	dc400117 	ldw	r17,4(sp)
10007504:	dc000017 	ldw	r16,0(sp)
10007508:	dec00904 	addi	sp,sp,36
1000750c:	f800283a 	ret
10007510:	002f883a 	mov	r23,zero
10007514:	003ff206 	br	100074e0 <__alt_data_end+0xf80074e0>

10007518 <_setlocale_r>:
10007518:	30001b26 	beq	r6,zero,10007588 <_setlocale_r+0x70>
1000751c:	01440074 	movhi	r5,4097
10007520:	defffe04 	addi	sp,sp,-8
10007524:	29490904 	addi	r5,r5,9252
10007528:	3009883a 	mov	r4,r6
1000752c:	dc000015 	stw	r16,0(sp)
10007530:	dfc00115 	stw	ra,4(sp)
10007534:	3021883a 	mov	r16,r6
10007538:	0009c8c0 	call	10009c8c <strcmp>
1000753c:	1000061e 	bne	r2,zero,10007558 <_setlocale_r+0x40>
10007540:	00840074 	movhi	r2,4097
10007544:	10890804 	addi	r2,r2,9248
10007548:	dfc00117 	ldw	ra,4(sp)
1000754c:	dc000017 	ldw	r16,0(sp)
10007550:	dec00204 	addi	sp,sp,8
10007554:	f800283a 	ret
10007558:	01440074 	movhi	r5,4097
1000755c:	29490804 	addi	r5,r5,9248
10007560:	8009883a 	mov	r4,r16
10007564:	0009c8c0 	call	10009c8c <strcmp>
10007568:	103ff526 	beq	r2,zero,10007540 <__alt_data_end+0xf8007540>
1000756c:	01440074 	movhi	r5,4097
10007570:	2948f304 	addi	r5,r5,9164
10007574:	8009883a 	mov	r4,r16
10007578:	0009c8c0 	call	10009c8c <strcmp>
1000757c:	103ff026 	beq	r2,zero,10007540 <__alt_data_end+0xf8007540>
10007580:	0005883a 	mov	r2,zero
10007584:	003ff006 	br	10007548 <__alt_data_end+0xf8007548>
10007588:	00840074 	movhi	r2,4097
1000758c:	10890804 	addi	r2,r2,9248
10007590:	f800283a 	ret

10007594 <__locale_charset>:
10007594:	00840074 	movhi	r2,4097
10007598:	108abb04 	addi	r2,r2,10988
1000759c:	f800283a 	ret

100075a0 <__locale_mb_cur_max>:
100075a0:	00840074 	movhi	r2,4097
100075a4:	10905804 	addi	r2,r2,16736
100075a8:	10800017 	ldw	r2,0(r2)
100075ac:	f800283a 	ret

100075b0 <__locale_msgcharset>:
100075b0:	00840074 	movhi	r2,4097
100075b4:	108ab304 	addi	r2,r2,10956
100075b8:	f800283a 	ret

100075bc <__locale_cjk_lang>:
100075bc:	0005883a 	mov	r2,zero
100075c0:	f800283a 	ret

100075c4 <_localeconv_r>:
100075c4:	00840074 	movhi	r2,4097
100075c8:	108ac304 	addi	r2,r2,11020
100075cc:	f800283a 	ret

100075d0 <setlocale>:
100075d0:	00840074 	movhi	r2,4097
100075d4:	10905704 	addi	r2,r2,16732
100075d8:	280d883a 	mov	r6,r5
100075dc:	200b883a 	mov	r5,r4
100075e0:	11000017 	ldw	r4,0(r2)
100075e4:	00075181 	jmpi	10007518 <_setlocale_r>

100075e8 <localeconv>:
100075e8:	00840074 	movhi	r2,4097
100075ec:	108ac304 	addi	r2,r2,11020
100075f0:	f800283a 	ret

100075f4 <__smakebuf_r>:
100075f4:	2880030b 	ldhu	r2,12(r5)
100075f8:	10c0008c 	andi	r3,r2,2
100075fc:	1800411e 	bne	r3,zero,10007704 <__smakebuf_r+0x110>
10007600:	deffec04 	addi	sp,sp,-80
10007604:	dc000f15 	stw	r16,60(sp)
10007608:	2821883a 	mov	r16,r5
1000760c:	2940038f 	ldh	r5,14(r5)
10007610:	dc401015 	stw	r17,64(sp)
10007614:	dfc01315 	stw	ra,76(sp)
10007618:	dcc01215 	stw	r19,72(sp)
1000761c:	dc801115 	stw	r18,68(sp)
10007620:	2023883a 	mov	r17,r4
10007624:	28001c16 	blt	r5,zero,10007698 <__smakebuf_r+0xa4>
10007628:	d80d883a 	mov	r6,sp
1000762c:	000b8fc0 	call	1000b8fc <_fstat_r>
10007630:	10001816 	blt	r2,zero,10007694 <__smakebuf_r+0xa0>
10007634:	d8800117 	ldw	r2,4(sp)
10007638:	00e00014 	movui	r3,32768
1000763c:	10bc000c 	andi	r2,r2,61440
10007640:	14c80020 	cmpeqi	r19,r2,8192
10007644:	10c03726 	beq	r2,r3,10007724 <__smakebuf_r+0x130>
10007648:	80c0030b 	ldhu	r3,12(r16)
1000764c:	18c20014 	ori	r3,r3,2048
10007650:	80c0030d 	sth	r3,12(r16)
10007654:	00c80004 	movi	r3,8192
10007658:	10c0521e 	bne	r2,r3,100077a4 <__smakebuf_r+0x1b0>
1000765c:	8140038f 	ldh	r5,14(r16)
10007660:	8809883a 	mov	r4,r17
10007664:	000b9580 	call	1000b958 <_isatty_r>
10007668:	10004c26 	beq	r2,zero,1000779c <__smakebuf_r+0x1a8>
1000766c:	8080030b 	ldhu	r2,12(r16)
10007670:	80c010c4 	addi	r3,r16,67
10007674:	80c00015 	stw	r3,0(r16)
10007678:	10800054 	ori	r2,r2,1
1000767c:	8080030d 	sth	r2,12(r16)
10007680:	00800044 	movi	r2,1
10007684:	80c00415 	stw	r3,16(r16)
10007688:	80800515 	stw	r2,20(r16)
1000768c:	04810004 	movi	r18,1024
10007690:	00000706 	br	100076b0 <__smakebuf_r+0xbc>
10007694:	8080030b 	ldhu	r2,12(r16)
10007698:	10c0200c 	andi	r3,r2,128
1000769c:	18001f1e 	bne	r3,zero,1000771c <__smakebuf_r+0x128>
100076a0:	04810004 	movi	r18,1024
100076a4:	10820014 	ori	r2,r2,2048
100076a8:	8080030d 	sth	r2,12(r16)
100076ac:	0027883a 	mov	r19,zero
100076b0:	900b883a 	mov	r5,r18
100076b4:	8809883a 	mov	r4,r17
100076b8:	00077b00 	call	100077b0 <_malloc_r>
100076bc:	10002c26 	beq	r2,zero,10007770 <__smakebuf_r+0x17c>
100076c0:	80c0030b 	ldhu	r3,12(r16)
100076c4:	01040034 	movhi	r4,4096
100076c8:	2119bb04 	addi	r4,r4,26348
100076cc:	89000f15 	stw	r4,60(r17)
100076d0:	18c02014 	ori	r3,r3,128
100076d4:	80c0030d 	sth	r3,12(r16)
100076d8:	80800015 	stw	r2,0(r16)
100076dc:	80800415 	stw	r2,16(r16)
100076e0:	84800515 	stw	r18,20(r16)
100076e4:	98001a1e 	bne	r19,zero,10007750 <__smakebuf_r+0x15c>
100076e8:	dfc01317 	ldw	ra,76(sp)
100076ec:	dcc01217 	ldw	r19,72(sp)
100076f0:	dc801117 	ldw	r18,68(sp)
100076f4:	dc401017 	ldw	r17,64(sp)
100076f8:	dc000f17 	ldw	r16,60(sp)
100076fc:	dec01404 	addi	sp,sp,80
10007700:	f800283a 	ret
10007704:	288010c4 	addi	r2,r5,67
10007708:	28800015 	stw	r2,0(r5)
1000770c:	28800415 	stw	r2,16(r5)
10007710:	00800044 	movi	r2,1
10007714:	28800515 	stw	r2,20(r5)
10007718:	f800283a 	ret
1000771c:	04801004 	movi	r18,64
10007720:	003fe006 	br	100076a4 <__alt_data_end+0xf80076a4>
10007724:	81000a17 	ldw	r4,40(r16)
10007728:	00c40074 	movhi	r3,4097
1000772c:	18e70a04 	addi	r3,r3,-25560
10007730:	20ffc51e 	bne	r4,r3,10007648 <__alt_data_end+0xf8007648>
10007734:	8080030b 	ldhu	r2,12(r16)
10007738:	04810004 	movi	r18,1024
1000773c:	84801315 	stw	r18,76(r16)
10007740:	1484b03a 	or	r2,r2,r18
10007744:	8080030d 	sth	r2,12(r16)
10007748:	0027883a 	mov	r19,zero
1000774c:	003fd806 	br	100076b0 <__alt_data_end+0xf80076b0>
10007750:	8140038f 	ldh	r5,14(r16)
10007754:	8809883a 	mov	r4,r17
10007758:	000b9580 	call	1000b958 <_isatty_r>
1000775c:	103fe226 	beq	r2,zero,100076e8 <__alt_data_end+0xf80076e8>
10007760:	8080030b 	ldhu	r2,12(r16)
10007764:	10800054 	ori	r2,r2,1
10007768:	8080030d 	sth	r2,12(r16)
1000776c:	003fde06 	br	100076e8 <__alt_data_end+0xf80076e8>
10007770:	8080030b 	ldhu	r2,12(r16)
10007774:	10c0800c 	andi	r3,r2,512
10007778:	183fdb1e 	bne	r3,zero,100076e8 <__alt_data_end+0xf80076e8>
1000777c:	10800094 	ori	r2,r2,2
10007780:	80c010c4 	addi	r3,r16,67
10007784:	8080030d 	sth	r2,12(r16)
10007788:	00800044 	movi	r2,1
1000778c:	80c00015 	stw	r3,0(r16)
10007790:	80c00415 	stw	r3,16(r16)
10007794:	80800515 	stw	r2,20(r16)
10007798:	003fd306 	br	100076e8 <__alt_data_end+0xf80076e8>
1000779c:	04810004 	movi	r18,1024
100077a0:	003fc306 	br	100076b0 <__alt_data_end+0xf80076b0>
100077a4:	0027883a 	mov	r19,zero
100077a8:	04810004 	movi	r18,1024
100077ac:	003fc006 	br	100076b0 <__alt_data_end+0xf80076b0>

100077b0 <_malloc_r>:
100077b0:	defff504 	addi	sp,sp,-44
100077b4:	dc800315 	stw	r18,12(sp)
100077b8:	dfc00a15 	stw	ra,40(sp)
100077bc:	df000915 	stw	fp,36(sp)
100077c0:	ddc00815 	stw	r23,32(sp)
100077c4:	dd800715 	stw	r22,28(sp)
100077c8:	dd400615 	stw	r21,24(sp)
100077cc:	dd000515 	stw	r20,20(sp)
100077d0:	dcc00415 	stw	r19,16(sp)
100077d4:	dc400215 	stw	r17,8(sp)
100077d8:	dc000115 	stw	r16,4(sp)
100077dc:	288002c4 	addi	r2,r5,11
100077e0:	00c00584 	movi	r3,22
100077e4:	2025883a 	mov	r18,r4
100077e8:	18807f2e 	bgeu	r3,r2,100079e8 <_malloc_r+0x238>
100077ec:	047ffe04 	movi	r17,-8
100077f0:	1462703a 	and	r17,r2,r17
100077f4:	8800a316 	blt	r17,zero,10007a84 <_malloc_r+0x2d4>
100077f8:	8940a236 	bltu	r17,r5,10007a84 <_malloc_r+0x2d4>
100077fc:	000f9880 	call	1000f988 <__malloc_lock>
10007800:	00807dc4 	movi	r2,503
10007804:	1441e92e 	bgeu	r2,r17,10007fac <_malloc_r+0x7fc>
10007808:	8804d27a 	srli	r2,r17,9
1000780c:	1000a126 	beq	r2,zero,10007a94 <_malloc_r+0x2e4>
10007810:	00c00104 	movi	r3,4
10007814:	18811e36 	bltu	r3,r2,10007c90 <_malloc_r+0x4e0>
10007818:	8804d1ba 	srli	r2,r17,6
1000781c:	12000e44 	addi	r8,r2,57
10007820:	11c00e04 	addi	r7,r2,56
10007824:	4209883a 	add	r4,r8,r8
10007828:	04c40074 	movhi	r19,4097
1000782c:	2109883a 	add	r4,r4,r4
10007830:	9ccad104 	addi	r19,r19,11076
10007834:	2109883a 	add	r4,r4,r4
10007838:	9909883a 	add	r4,r19,r4
1000783c:	24000117 	ldw	r16,4(r4)
10007840:	213ffe04 	addi	r4,r4,-8
10007844:	24009726 	beq	r4,r16,10007aa4 <_malloc_r+0x2f4>
10007848:	80800117 	ldw	r2,4(r16)
1000784c:	01bfff04 	movi	r6,-4
10007850:	014003c4 	movi	r5,15
10007854:	1184703a 	and	r2,r2,r6
10007858:	1447c83a 	sub	r3,r2,r17
1000785c:	28c00716 	blt	r5,r3,1000787c <_malloc_r+0xcc>
10007860:	1800920e 	bge	r3,zero,10007aac <_malloc_r+0x2fc>
10007864:	84000317 	ldw	r16,12(r16)
10007868:	24008e26 	beq	r4,r16,10007aa4 <_malloc_r+0x2f4>
1000786c:	80800117 	ldw	r2,4(r16)
10007870:	1184703a 	and	r2,r2,r6
10007874:	1447c83a 	sub	r3,r2,r17
10007878:	28fff90e 	bge	r5,r3,10007860 <__alt_data_end+0xf8007860>
1000787c:	3809883a 	mov	r4,r7
10007880:	01840074 	movhi	r6,4097
10007884:	9c000417 	ldw	r16,16(r19)
10007888:	318ad104 	addi	r6,r6,11076
1000788c:	32000204 	addi	r8,r6,8
10007890:	82013426 	beq	r16,r8,10007d64 <_malloc_r+0x5b4>
10007894:	80c00117 	ldw	r3,4(r16)
10007898:	00bfff04 	movi	r2,-4
1000789c:	188e703a 	and	r7,r3,r2
100078a0:	3c45c83a 	sub	r2,r7,r17
100078a4:	00c003c4 	movi	r3,15
100078a8:	18811f16 	blt	r3,r2,10007d28 <_malloc_r+0x578>
100078ac:	32000515 	stw	r8,20(r6)
100078b0:	32000415 	stw	r8,16(r6)
100078b4:	10007f0e 	bge	r2,zero,10007ab4 <_malloc_r+0x304>
100078b8:	00807fc4 	movi	r2,511
100078bc:	11c0fd36 	bltu	r2,r7,10007cb4 <_malloc_r+0x504>
100078c0:	3806d0fa 	srli	r3,r7,3
100078c4:	01c00044 	movi	r7,1
100078c8:	30800117 	ldw	r2,4(r6)
100078cc:	19400044 	addi	r5,r3,1
100078d0:	294b883a 	add	r5,r5,r5
100078d4:	1807d0ba 	srai	r3,r3,2
100078d8:	294b883a 	add	r5,r5,r5
100078dc:	294b883a 	add	r5,r5,r5
100078e0:	298b883a 	add	r5,r5,r6
100078e4:	38c6983a 	sll	r3,r7,r3
100078e8:	29c00017 	ldw	r7,0(r5)
100078ec:	2a7ffe04 	addi	r9,r5,-8
100078f0:	1886b03a 	or	r3,r3,r2
100078f4:	82400315 	stw	r9,12(r16)
100078f8:	81c00215 	stw	r7,8(r16)
100078fc:	30c00115 	stw	r3,4(r6)
10007900:	2c000015 	stw	r16,0(r5)
10007904:	3c000315 	stw	r16,12(r7)
10007908:	2005d0ba 	srai	r2,r4,2
1000790c:	01400044 	movi	r5,1
10007910:	288a983a 	sll	r5,r5,r2
10007914:	19406f36 	bltu	r3,r5,10007ad4 <_malloc_r+0x324>
10007918:	28c4703a 	and	r2,r5,r3
1000791c:	10000a1e 	bne	r2,zero,10007948 <_malloc_r+0x198>
10007920:	00bfff04 	movi	r2,-4
10007924:	294b883a 	add	r5,r5,r5
10007928:	2088703a 	and	r4,r4,r2
1000792c:	28c4703a 	and	r2,r5,r3
10007930:	21000104 	addi	r4,r4,4
10007934:	1000041e 	bne	r2,zero,10007948 <_malloc_r+0x198>
10007938:	294b883a 	add	r5,r5,r5
1000793c:	28c4703a 	and	r2,r5,r3
10007940:	21000104 	addi	r4,r4,4
10007944:	103ffc26 	beq	r2,zero,10007938 <__alt_data_end+0xf8007938>
10007948:	02bfff04 	movi	r10,-4
1000794c:	024003c4 	movi	r9,15
10007950:	21800044 	addi	r6,r4,1
10007954:	318d883a 	add	r6,r6,r6
10007958:	318d883a 	add	r6,r6,r6
1000795c:	318d883a 	add	r6,r6,r6
10007960:	998d883a 	add	r6,r19,r6
10007964:	333ffe04 	addi	r12,r6,-8
10007968:	2017883a 	mov	r11,r4
1000796c:	31800104 	addi	r6,r6,4
10007970:	34000017 	ldw	r16,0(r6)
10007974:	31fffd04 	addi	r7,r6,-12
10007978:	81c0041e 	bne	r16,r7,1000798c <_malloc_r+0x1dc>
1000797c:	0000fb06 	br	10007d6c <_malloc_r+0x5bc>
10007980:	1801030e 	bge	r3,zero,10007d90 <_malloc_r+0x5e0>
10007984:	84000317 	ldw	r16,12(r16)
10007988:	81c0f826 	beq	r16,r7,10007d6c <_malloc_r+0x5bc>
1000798c:	80800117 	ldw	r2,4(r16)
10007990:	1284703a 	and	r2,r2,r10
10007994:	1447c83a 	sub	r3,r2,r17
10007998:	48fff90e 	bge	r9,r3,10007980 <__alt_data_end+0xf8007980>
1000799c:	80800317 	ldw	r2,12(r16)
100079a0:	81000217 	ldw	r4,8(r16)
100079a4:	89400054 	ori	r5,r17,1
100079a8:	81400115 	stw	r5,4(r16)
100079ac:	20800315 	stw	r2,12(r4)
100079b0:	11000215 	stw	r4,8(r2)
100079b4:	8463883a 	add	r17,r16,r17
100079b8:	9c400515 	stw	r17,20(r19)
100079bc:	9c400415 	stw	r17,16(r19)
100079c0:	18800054 	ori	r2,r3,1
100079c4:	88800115 	stw	r2,4(r17)
100079c8:	8a000315 	stw	r8,12(r17)
100079cc:	8a000215 	stw	r8,8(r17)
100079d0:	88e3883a 	add	r17,r17,r3
100079d4:	88c00015 	stw	r3,0(r17)
100079d8:	9009883a 	mov	r4,r18
100079dc:	000f9ac0 	call	1000f9ac <__malloc_unlock>
100079e0:	80800204 	addi	r2,r16,8
100079e4:	00001b06 	br	10007a54 <_malloc_r+0x2a4>
100079e8:	04400404 	movi	r17,16
100079ec:	89402536 	bltu	r17,r5,10007a84 <_malloc_r+0x2d4>
100079f0:	000f9880 	call	1000f988 <__malloc_lock>
100079f4:	00800184 	movi	r2,6
100079f8:	01000084 	movi	r4,2
100079fc:	04c40074 	movhi	r19,4097
10007a00:	1085883a 	add	r2,r2,r2
10007a04:	9ccad104 	addi	r19,r19,11076
10007a08:	1085883a 	add	r2,r2,r2
10007a0c:	9885883a 	add	r2,r19,r2
10007a10:	14000117 	ldw	r16,4(r2)
10007a14:	10fffe04 	addi	r3,r2,-8
10007a18:	80c0d926 	beq	r16,r3,10007d80 <_malloc_r+0x5d0>
10007a1c:	80c00117 	ldw	r3,4(r16)
10007a20:	81000317 	ldw	r4,12(r16)
10007a24:	00bfff04 	movi	r2,-4
10007a28:	1884703a 	and	r2,r3,r2
10007a2c:	81400217 	ldw	r5,8(r16)
10007a30:	8085883a 	add	r2,r16,r2
10007a34:	10c00117 	ldw	r3,4(r2)
10007a38:	29000315 	stw	r4,12(r5)
10007a3c:	21400215 	stw	r5,8(r4)
10007a40:	18c00054 	ori	r3,r3,1
10007a44:	10c00115 	stw	r3,4(r2)
10007a48:	9009883a 	mov	r4,r18
10007a4c:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10007a50:	80800204 	addi	r2,r16,8
10007a54:	dfc00a17 	ldw	ra,40(sp)
10007a58:	df000917 	ldw	fp,36(sp)
10007a5c:	ddc00817 	ldw	r23,32(sp)
10007a60:	dd800717 	ldw	r22,28(sp)
10007a64:	dd400617 	ldw	r21,24(sp)
10007a68:	dd000517 	ldw	r20,20(sp)
10007a6c:	dcc00417 	ldw	r19,16(sp)
10007a70:	dc800317 	ldw	r18,12(sp)
10007a74:	dc400217 	ldw	r17,8(sp)
10007a78:	dc000117 	ldw	r16,4(sp)
10007a7c:	dec00b04 	addi	sp,sp,44
10007a80:	f800283a 	ret
10007a84:	00800304 	movi	r2,12
10007a88:	90800015 	stw	r2,0(r18)
10007a8c:	0005883a 	mov	r2,zero
10007a90:	003ff006 	br	10007a54 <__alt_data_end+0xf8007a54>
10007a94:	01002004 	movi	r4,128
10007a98:	02001004 	movi	r8,64
10007a9c:	01c00fc4 	movi	r7,63
10007aa0:	003f6106 	br	10007828 <__alt_data_end+0xf8007828>
10007aa4:	4009883a 	mov	r4,r8
10007aa8:	003f7506 	br	10007880 <__alt_data_end+0xf8007880>
10007aac:	81000317 	ldw	r4,12(r16)
10007ab0:	003fde06 	br	10007a2c <__alt_data_end+0xf8007a2c>
10007ab4:	81c5883a 	add	r2,r16,r7
10007ab8:	11400117 	ldw	r5,4(r2)
10007abc:	9009883a 	mov	r4,r18
10007ac0:	29400054 	ori	r5,r5,1
10007ac4:	11400115 	stw	r5,4(r2)
10007ac8:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10007acc:	80800204 	addi	r2,r16,8
10007ad0:	003fe006 	br	10007a54 <__alt_data_end+0xf8007a54>
10007ad4:	9c000217 	ldw	r16,8(r19)
10007ad8:	00bfff04 	movi	r2,-4
10007adc:	85800117 	ldw	r22,4(r16)
10007ae0:	b0ac703a 	and	r22,r22,r2
10007ae4:	b4400336 	bltu	r22,r17,10007af4 <_malloc_r+0x344>
10007ae8:	b445c83a 	sub	r2,r22,r17
10007aec:	00c003c4 	movi	r3,15
10007af0:	18805d16 	blt	r3,r2,10007c68 <_malloc_r+0x4b8>
10007af4:	05c40074 	movhi	r23,4097
10007af8:	00840074 	movhi	r2,4097
10007afc:	10972804 	addi	r2,r2,23712
10007b00:	bdd05904 	addi	r23,r23,16740
10007b04:	15400017 	ldw	r21,0(r2)
10007b08:	b8c00017 	ldw	r3,0(r23)
10007b0c:	00bfffc4 	movi	r2,-1
10007b10:	858d883a 	add	r6,r16,r22
10007b14:	8d6b883a 	add	r21,r17,r21
10007b18:	1880ea26 	beq	r3,r2,10007ec4 <_malloc_r+0x714>
10007b1c:	ad4403c4 	addi	r21,r21,4111
10007b20:	00bc0004 	movi	r2,-4096
10007b24:	a8aa703a 	and	r21,r21,r2
10007b28:	a80b883a 	mov	r5,r21
10007b2c:	9009883a 	mov	r4,r18
10007b30:	d9800015 	stw	r6,0(sp)
10007b34:	0009afc0 	call	10009afc <_sbrk_r>
10007b38:	1029883a 	mov	r20,r2
10007b3c:	00bfffc4 	movi	r2,-1
10007b40:	d9800017 	ldw	r6,0(sp)
10007b44:	a080e826 	beq	r20,r2,10007ee8 <_malloc_r+0x738>
10007b48:	a180a636 	bltu	r20,r6,10007de4 <_malloc_r+0x634>
10007b4c:	07040074 	movhi	fp,4097
10007b50:	e7173104 	addi	fp,fp,23748
10007b54:	e0800017 	ldw	r2,0(fp)
10007b58:	a887883a 	add	r3,r21,r2
10007b5c:	e0c00015 	stw	r3,0(fp)
10007b60:	3500e626 	beq	r6,r20,10007efc <_malloc_r+0x74c>
10007b64:	b9000017 	ldw	r4,0(r23)
10007b68:	00bfffc4 	movi	r2,-1
10007b6c:	2080ee26 	beq	r4,r2,10007f28 <_malloc_r+0x778>
10007b70:	a185c83a 	sub	r2,r20,r6
10007b74:	10c5883a 	add	r2,r2,r3
10007b78:	e0800015 	stw	r2,0(fp)
10007b7c:	a0c001cc 	andi	r3,r20,7
10007b80:	1800bc26 	beq	r3,zero,10007e74 <_malloc_r+0x6c4>
10007b84:	a0e9c83a 	sub	r20,r20,r3
10007b88:	00840204 	movi	r2,4104
10007b8c:	a5000204 	addi	r20,r20,8
10007b90:	10c7c83a 	sub	r3,r2,r3
10007b94:	a545883a 	add	r2,r20,r21
10007b98:	1083ffcc 	andi	r2,r2,4095
10007b9c:	18abc83a 	sub	r21,r3,r2
10007ba0:	a80b883a 	mov	r5,r21
10007ba4:	9009883a 	mov	r4,r18
10007ba8:	0009afc0 	call	10009afc <_sbrk_r>
10007bac:	00ffffc4 	movi	r3,-1
10007bb0:	10c0e126 	beq	r2,r3,10007f38 <_malloc_r+0x788>
10007bb4:	1505c83a 	sub	r2,r2,r20
10007bb8:	1545883a 	add	r2,r2,r21
10007bbc:	10800054 	ori	r2,r2,1
10007bc0:	e0c00017 	ldw	r3,0(fp)
10007bc4:	9d000215 	stw	r20,8(r19)
10007bc8:	a0800115 	stw	r2,4(r20)
10007bcc:	a8c7883a 	add	r3,r21,r3
10007bd0:	e0c00015 	stw	r3,0(fp)
10007bd4:	84c00e26 	beq	r16,r19,10007c10 <_malloc_r+0x460>
10007bd8:	018003c4 	movi	r6,15
10007bdc:	3580a72e 	bgeu	r6,r22,10007e7c <_malloc_r+0x6cc>
10007be0:	81400117 	ldw	r5,4(r16)
10007be4:	013ffe04 	movi	r4,-8
10007be8:	b0bffd04 	addi	r2,r22,-12
10007bec:	1104703a 	and	r2,r2,r4
10007bf0:	2900004c 	andi	r4,r5,1
10007bf4:	2088b03a 	or	r4,r4,r2
10007bf8:	81000115 	stw	r4,4(r16)
10007bfc:	01400144 	movi	r5,5
10007c00:	8089883a 	add	r4,r16,r2
10007c04:	21400115 	stw	r5,4(r4)
10007c08:	21400215 	stw	r5,8(r4)
10007c0c:	3080cd36 	bltu	r6,r2,10007f44 <_malloc_r+0x794>
10007c10:	00840074 	movhi	r2,4097
10007c14:	10972704 	addi	r2,r2,23708
10007c18:	11000017 	ldw	r4,0(r2)
10007c1c:	20c0012e 	bgeu	r4,r3,10007c24 <_malloc_r+0x474>
10007c20:	10c00015 	stw	r3,0(r2)
10007c24:	00840074 	movhi	r2,4097
10007c28:	10972604 	addi	r2,r2,23704
10007c2c:	11000017 	ldw	r4,0(r2)
10007c30:	9c000217 	ldw	r16,8(r19)
10007c34:	20c0012e 	bgeu	r4,r3,10007c3c <_malloc_r+0x48c>
10007c38:	10c00015 	stw	r3,0(r2)
10007c3c:	80c00117 	ldw	r3,4(r16)
10007c40:	00bfff04 	movi	r2,-4
10007c44:	1886703a 	and	r3,r3,r2
10007c48:	1c45c83a 	sub	r2,r3,r17
10007c4c:	1c400236 	bltu	r3,r17,10007c58 <_malloc_r+0x4a8>
10007c50:	00c003c4 	movi	r3,15
10007c54:	18800416 	blt	r3,r2,10007c68 <_malloc_r+0x4b8>
10007c58:	9009883a 	mov	r4,r18
10007c5c:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10007c60:	0005883a 	mov	r2,zero
10007c64:	003f7b06 	br	10007a54 <__alt_data_end+0xf8007a54>
10007c68:	88c00054 	ori	r3,r17,1
10007c6c:	80c00115 	stw	r3,4(r16)
10007c70:	8463883a 	add	r17,r16,r17
10007c74:	10800054 	ori	r2,r2,1
10007c78:	9c400215 	stw	r17,8(r19)
10007c7c:	88800115 	stw	r2,4(r17)
10007c80:	9009883a 	mov	r4,r18
10007c84:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10007c88:	80800204 	addi	r2,r16,8
10007c8c:	003f7106 	br	10007a54 <__alt_data_end+0xf8007a54>
10007c90:	00c00504 	movi	r3,20
10007c94:	18804a2e 	bgeu	r3,r2,10007dc0 <_malloc_r+0x610>
10007c98:	00c01504 	movi	r3,84
10007c9c:	18806e36 	bltu	r3,r2,10007e58 <_malloc_r+0x6a8>
10007ca0:	8804d33a 	srli	r2,r17,12
10007ca4:	12001bc4 	addi	r8,r2,111
10007ca8:	11c01b84 	addi	r7,r2,110
10007cac:	4209883a 	add	r4,r8,r8
10007cb0:	003edd06 	br	10007828 <__alt_data_end+0xf8007828>
10007cb4:	3804d27a 	srli	r2,r7,9
10007cb8:	00c00104 	movi	r3,4
10007cbc:	1880442e 	bgeu	r3,r2,10007dd0 <_malloc_r+0x620>
10007cc0:	00c00504 	movi	r3,20
10007cc4:	18808136 	bltu	r3,r2,10007ecc <_malloc_r+0x71c>
10007cc8:	11401704 	addi	r5,r2,92
10007ccc:	10c016c4 	addi	r3,r2,91
10007cd0:	294b883a 	add	r5,r5,r5
10007cd4:	294b883a 	add	r5,r5,r5
10007cd8:	294b883a 	add	r5,r5,r5
10007cdc:	994b883a 	add	r5,r19,r5
10007ce0:	28800017 	ldw	r2,0(r5)
10007ce4:	01840074 	movhi	r6,4097
10007ce8:	297ffe04 	addi	r5,r5,-8
10007cec:	318ad104 	addi	r6,r6,11076
10007cf0:	28806526 	beq	r5,r2,10007e88 <_malloc_r+0x6d8>
10007cf4:	01bfff04 	movi	r6,-4
10007cf8:	10c00117 	ldw	r3,4(r2)
10007cfc:	1986703a 	and	r3,r3,r6
10007d00:	38c0022e 	bgeu	r7,r3,10007d0c <_malloc_r+0x55c>
10007d04:	10800217 	ldw	r2,8(r2)
10007d08:	28bffb1e 	bne	r5,r2,10007cf8 <__alt_data_end+0xf8007cf8>
10007d0c:	11400317 	ldw	r5,12(r2)
10007d10:	98c00117 	ldw	r3,4(r19)
10007d14:	81400315 	stw	r5,12(r16)
10007d18:	80800215 	stw	r2,8(r16)
10007d1c:	2c000215 	stw	r16,8(r5)
10007d20:	14000315 	stw	r16,12(r2)
10007d24:	003ef806 	br	10007908 <__alt_data_end+0xf8007908>
10007d28:	88c00054 	ori	r3,r17,1
10007d2c:	80c00115 	stw	r3,4(r16)
10007d30:	8463883a 	add	r17,r16,r17
10007d34:	34400515 	stw	r17,20(r6)
10007d38:	34400415 	stw	r17,16(r6)
10007d3c:	10c00054 	ori	r3,r2,1
10007d40:	8a000315 	stw	r8,12(r17)
10007d44:	8a000215 	stw	r8,8(r17)
10007d48:	88c00115 	stw	r3,4(r17)
10007d4c:	88a3883a 	add	r17,r17,r2
10007d50:	88800015 	stw	r2,0(r17)
10007d54:	9009883a 	mov	r4,r18
10007d58:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10007d5c:	80800204 	addi	r2,r16,8
10007d60:	003f3c06 	br	10007a54 <__alt_data_end+0xf8007a54>
10007d64:	30c00117 	ldw	r3,4(r6)
10007d68:	003ee706 	br	10007908 <__alt_data_end+0xf8007908>
10007d6c:	5ac00044 	addi	r11,r11,1
10007d70:	588000cc 	andi	r2,r11,3
10007d74:	31800204 	addi	r6,r6,8
10007d78:	103efd1e 	bne	r2,zero,10007970 <__alt_data_end+0xf8007970>
10007d7c:	00002406 	br	10007e10 <_malloc_r+0x660>
10007d80:	14000317 	ldw	r16,12(r2)
10007d84:	143f251e 	bne	r2,r16,10007a1c <__alt_data_end+0xf8007a1c>
10007d88:	21000084 	addi	r4,r4,2
10007d8c:	003ebc06 	br	10007880 <__alt_data_end+0xf8007880>
10007d90:	8085883a 	add	r2,r16,r2
10007d94:	10c00117 	ldw	r3,4(r2)
10007d98:	81000317 	ldw	r4,12(r16)
10007d9c:	81400217 	ldw	r5,8(r16)
10007da0:	18c00054 	ori	r3,r3,1
10007da4:	10c00115 	stw	r3,4(r2)
10007da8:	29000315 	stw	r4,12(r5)
10007dac:	21400215 	stw	r5,8(r4)
10007db0:	9009883a 	mov	r4,r18
10007db4:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10007db8:	80800204 	addi	r2,r16,8
10007dbc:	003f2506 	br	10007a54 <__alt_data_end+0xf8007a54>
10007dc0:	12001704 	addi	r8,r2,92
10007dc4:	11c016c4 	addi	r7,r2,91
10007dc8:	4209883a 	add	r4,r8,r8
10007dcc:	003e9606 	br	10007828 <__alt_data_end+0xf8007828>
10007dd0:	3804d1ba 	srli	r2,r7,6
10007dd4:	11400e44 	addi	r5,r2,57
10007dd8:	10c00e04 	addi	r3,r2,56
10007ddc:	294b883a 	add	r5,r5,r5
10007de0:	003fbc06 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10007de4:	84ff5926 	beq	r16,r19,10007b4c <__alt_data_end+0xf8007b4c>
10007de8:	00840074 	movhi	r2,4097
10007dec:	108ad104 	addi	r2,r2,11076
10007df0:	14000217 	ldw	r16,8(r2)
10007df4:	00bfff04 	movi	r2,-4
10007df8:	80c00117 	ldw	r3,4(r16)
10007dfc:	1886703a 	and	r3,r3,r2
10007e00:	003f9106 	br	10007c48 <__alt_data_end+0xf8007c48>
10007e04:	60800217 	ldw	r2,8(r12)
10007e08:	213fffc4 	addi	r4,r4,-1
10007e0c:	1300651e 	bne	r2,r12,10007fa4 <_malloc_r+0x7f4>
10007e10:	208000cc 	andi	r2,r4,3
10007e14:	633ffe04 	addi	r12,r12,-8
10007e18:	103ffa1e 	bne	r2,zero,10007e04 <__alt_data_end+0xf8007e04>
10007e1c:	98800117 	ldw	r2,4(r19)
10007e20:	0146303a 	nor	r3,zero,r5
10007e24:	1884703a 	and	r2,r3,r2
10007e28:	98800115 	stw	r2,4(r19)
10007e2c:	294b883a 	add	r5,r5,r5
10007e30:	117f2836 	bltu	r2,r5,10007ad4 <__alt_data_end+0xf8007ad4>
10007e34:	283f2726 	beq	r5,zero,10007ad4 <__alt_data_end+0xf8007ad4>
10007e38:	2886703a 	and	r3,r5,r2
10007e3c:	5809883a 	mov	r4,r11
10007e40:	183ec31e 	bne	r3,zero,10007950 <__alt_data_end+0xf8007950>
10007e44:	294b883a 	add	r5,r5,r5
10007e48:	2886703a 	and	r3,r5,r2
10007e4c:	21000104 	addi	r4,r4,4
10007e50:	183ffc26 	beq	r3,zero,10007e44 <__alt_data_end+0xf8007e44>
10007e54:	003ebe06 	br	10007950 <__alt_data_end+0xf8007950>
10007e58:	00c05504 	movi	r3,340
10007e5c:	18801236 	bltu	r3,r2,10007ea8 <_malloc_r+0x6f8>
10007e60:	8804d3fa 	srli	r2,r17,15
10007e64:	12001e04 	addi	r8,r2,120
10007e68:	11c01dc4 	addi	r7,r2,119
10007e6c:	4209883a 	add	r4,r8,r8
10007e70:	003e6d06 	br	10007828 <__alt_data_end+0xf8007828>
10007e74:	00c40004 	movi	r3,4096
10007e78:	003f4606 	br	10007b94 <__alt_data_end+0xf8007b94>
10007e7c:	00800044 	movi	r2,1
10007e80:	a0800115 	stw	r2,4(r20)
10007e84:	003f7406 	br	10007c58 <__alt_data_end+0xf8007c58>
10007e88:	1805d0ba 	srai	r2,r3,2
10007e8c:	01c00044 	movi	r7,1
10007e90:	30c00117 	ldw	r3,4(r6)
10007e94:	388e983a 	sll	r7,r7,r2
10007e98:	2805883a 	mov	r2,r5
10007e9c:	38c6b03a 	or	r3,r7,r3
10007ea0:	30c00115 	stw	r3,4(r6)
10007ea4:	003f9b06 	br	10007d14 <__alt_data_end+0xf8007d14>
10007ea8:	00c15504 	movi	r3,1364
10007eac:	18801a36 	bltu	r3,r2,10007f18 <_malloc_r+0x768>
10007eb0:	8804d4ba 	srli	r2,r17,18
10007eb4:	12001f44 	addi	r8,r2,125
10007eb8:	11c01f04 	addi	r7,r2,124
10007ebc:	4209883a 	add	r4,r8,r8
10007ec0:	003e5906 	br	10007828 <__alt_data_end+0xf8007828>
10007ec4:	ad400404 	addi	r21,r21,16
10007ec8:	003f1706 	br	10007b28 <__alt_data_end+0xf8007b28>
10007ecc:	00c01504 	movi	r3,84
10007ed0:	18802336 	bltu	r3,r2,10007f60 <_malloc_r+0x7b0>
10007ed4:	3804d33a 	srli	r2,r7,12
10007ed8:	11401bc4 	addi	r5,r2,111
10007edc:	10c01b84 	addi	r3,r2,110
10007ee0:	294b883a 	add	r5,r5,r5
10007ee4:	003f7b06 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10007ee8:	9c000217 	ldw	r16,8(r19)
10007eec:	00bfff04 	movi	r2,-4
10007ef0:	80c00117 	ldw	r3,4(r16)
10007ef4:	1886703a 	and	r3,r3,r2
10007ef8:	003f5306 	br	10007c48 <__alt_data_end+0xf8007c48>
10007efc:	3083ffcc 	andi	r2,r6,4095
10007f00:	103f181e 	bne	r2,zero,10007b64 <__alt_data_end+0xf8007b64>
10007f04:	99000217 	ldw	r4,8(r19)
10007f08:	b545883a 	add	r2,r22,r21
10007f0c:	10800054 	ori	r2,r2,1
10007f10:	20800115 	stw	r2,4(r4)
10007f14:	003f3e06 	br	10007c10 <__alt_data_end+0xf8007c10>
10007f18:	01003f84 	movi	r4,254
10007f1c:	02001fc4 	movi	r8,127
10007f20:	01c01f84 	movi	r7,126
10007f24:	003e4006 	br	10007828 <__alt_data_end+0xf8007828>
10007f28:	00840074 	movhi	r2,4097
10007f2c:	10905904 	addi	r2,r2,16740
10007f30:	15000015 	stw	r20,0(r2)
10007f34:	003f1106 	br	10007b7c <__alt_data_end+0xf8007b7c>
10007f38:	00800044 	movi	r2,1
10007f3c:	002b883a 	mov	r21,zero
10007f40:	003f1f06 	br	10007bc0 <__alt_data_end+0xf8007bc0>
10007f44:	81400204 	addi	r5,r16,8
10007f48:	9009883a 	mov	r4,r18
10007f4c:	0006bb80 	call	10006bb8 <_free_r>
10007f50:	00840074 	movhi	r2,4097
10007f54:	10973104 	addi	r2,r2,23748
10007f58:	10c00017 	ldw	r3,0(r2)
10007f5c:	003f2c06 	br	10007c10 <__alt_data_end+0xf8007c10>
10007f60:	00c05504 	movi	r3,340
10007f64:	18800536 	bltu	r3,r2,10007f7c <_malloc_r+0x7cc>
10007f68:	3804d3fa 	srli	r2,r7,15
10007f6c:	11401e04 	addi	r5,r2,120
10007f70:	10c01dc4 	addi	r3,r2,119
10007f74:	294b883a 	add	r5,r5,r5
10007f78:	003f5606 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10007f7c:	00c15504 	movi	r3,1364
10007f80:	18800536 	bltu	r3,r2,10007f98 <_malloc_r+0x7e8>
10007f84:	3804d4ba 	srli	r2,r7,18
10007f88:	11401f44 	addi	r5,r2,125
10007f8c:	10c01f04 	addi	r3,r2,124
10007f90:	294b883a 	add	r5,r5,r5
10007f94:	003f4f06 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10007f98:	01403f84 	movi	r5,254
10007f9c:	00c01f84 	movi	r3,126
10007fa0:	003f4c06 	br	10007cd4 <__alt_data_end+0xf8007cd4>
10007fa4:	98800117 	ldw	r2,4(r19)
10007fa8:	003fa006 	br	10007e2c <__alt_data_end+0xf8007e2c>
10007fac:	8808d0fa 	srli	r4,r17,3
10007fb0:	20800044 	addi	r2,r4,1
10007fb4:	1085883a 	add	r2,r2,r2
10007fb8:	003e9006 	br	100079fc <__alt_data_end+0xf80079fc>

10007fbc <memchr>:
10007fbc:	208000cc 	andi	r2,r4,3
10007fc0:	280f883a 	mov	r7,r5
10007fc4:	10003426 	beq	r2,zero,10008098 <memchr+0xdc>
10007fc8:	30bfffc4 	addi	r2,r6,-1
10007fcc:	30001a26 	beq	r6,zero,10008038 <memchr+0x7c>
10007fd0:	20c00003 	ldbu	r3,0(r4)
10007fd4:	29803fcc 	andi	r6,r5,255
10007fd8:	30c0051e 	bne	r6,r3,10007ff0 <memchr+0x34>
10007fdc:	00001806 	br	10008040 <memchr+0x84>
10007fe0:	10001526 	beq	r2,zero,10008038 <memchr+0x7c>
10007fe4:	20c00003 	ldbu	r3,0(r4)
10007fe8:	10bfffc4 	addi	r2,r2,-1
10007fec:	30c01426 	beq	r6,r3,10008040 <memchr+0x84>
10007ff0:	21000044 	addi	r4,r4,1
10007ff4:	20c000cc 	andi	r3,r4,3
10007ff8:	183ff91e 	bne	r3,zero,10007fe0 <__alt_data_end+0xf8007fe0>
10007ffc:	020000c4 	movi	r8,3
10008000:	40801136 	bltu	r8,r2,10008048 <memchr+0x8c>
10008004:	10000c26 	beq	r2,zero,10008038 <memchr+0x7c>
10008008:	20c00003 	ldbu	r3,0(r4)
1000800c:	29403fcc 	andi	r5,r5,255
10008010:	28c00b26 	beq	r5,r3,10008040 <memchr+0x84>
10008014:	20c00044 	addi	r3,r4,1
10008018:	39803fcc 	andi	r6,r7,255
1000801c:	2089883a 	add	r4,r4,r2
10008020:	00000306 	br	10008030 <memchr+0x74>
10008024:	18c00044 	addi	r3,r3,1
10008028:	197fffc3 	ldbu	r5,-1(r3)
1000802c:	31400526 	beq	r6,r5,10008044 <memchr+0x88>
10008030:	1805883a 	mov	r2,r3
10008034:	20fffb1e 	bne	r4,r3,10008024 <__alt_data_end+0xf8008024>
10008038:	0005883a 	mov	r2,zero
1000803c:	f800283a 	ret
10008040:	2005883a 	mov	r2,r4
10008044:	f800283a 	ret
10008048:	28c03fcc 	andi	r3,r5,255
1000804c:	1812923a 	slli	r9,r3,8
10008050:	02ffbff4 	movhi	r11,65279
10008054:	02a02074 	movhi	r10,32897
10008058:	48d2b03a 	or	r9,r9,r3
1000805c:	4806943a 	slli	r3,r9,16
10008060:	5affbfc4 	addi	r11,r11,-257
10008064:	52a02004 	addi	r10,r10,-32640
10008068:	48d2b03a 	or	r9,r9,r3
1000806c:	20c00017 	ldw	r3,0(r4)
10008070:	48c6f03a 	xor	r3,r9,r3
10008074:	1acd883a 	add	r6,r3,r11
10008078:	00c6303a 	nor	r3,zero,r3
1000807c:	30c6703a 	and	r3,r6,r3
10008080:	1a86703a 	and	r3,r3,r10
10008084:	183fe01e 	bne	r3,zero,10008008 <__alt_data_end+0xf8008008>
10008088:	10bfff04 	addi	r2,r2,-4
1000808c:	21000104 	addi	r4,r4,4
10008090:	40bff636 	bltu	r8,r2,1000806c <__alt_data_end+0xf800806c>
10008094:	003fdb06 	br	10008004 <__alt_data_end+0xf8008004>
10008098:	3005883a 	mov	r2,r6
1000809c:	003fd706 	br	10007ffc <__alt_data_end+0xf8007ffc>

100080a0 <memcpy>:
100080a0:	defffd04 	addi	sp,sp,-12
100080a4:	dfc00215 	stw	ra,8(sp)
100080a8:	dc400115 	stw	r17,4(sp)
100080ac:	dc000015 	stw	r16,0(sp)
100080b0:	00c003c4 	movi	r3,15
100080b4:	2005883a 	mov	r2,r4
100080b8:	1980452e 	bgeu	r3,r6,100081d0 <memcpy+0x130>
100080bc:	2906b03a 	or	r3,r5,r4
100080c0:	18c000cc 	andi	r3,r3,3
100080c4:	1800441e 	bne	r3,zero,100081d8 <memcpy+0x138>
100080c8:	347ffc04 	addi	r17,r6,-16
100080cc:	8822d13a 	srli	r17,r17,4
100080d0:	28c00104 	addi	r3,r5,4
100080d4:	23400104 	addi	r13,r4,4
100080d8:	8820913a 	slli	r16,r17,4
100080dc:	2b000204 	addi	r12,r5,8
100080e0:	22c00204 	addi	r11,r4,8
100080e4:	84000504 	addi	r16,r16,20
100080e8:	2a800304 	addi	r10,r5,12
100080ec:	22400304 	addi	r9,r4,12
100080f0:	2c21883a 	add	r16,r5,r16
100080f4:	2811883a 	mov	r8,r5
100080f8:	200f883a 	mov	r7,r4
100080fc:	41000017 	ldw	r4,0(r8)
10008100:	1fc00017 	ldw	ra,0(r3)
10008104:	63c00017 	ldw	r15,0(r12)
10008108:	39000015 	stw	r4,0(r7)
1000810c:	53800017 	ldw	r14,0(r10)
10008110:	6fc00015 	stw	ra,0(r13)
10008114:	5bc00015 	stw	r15,0(r11)
10008118:	4b800015 	stw	r14,0(r9)
1000811c:	18c00404 	addi	r3,r3,16
10008120:	39c00404 	addi	r7,r7,16
10008124:	42000404 	addi	r8,r8,16
10008128:	6b400404 	addi	r13,r13,16
1000812c:	63000404 	addi	r12,r12,16
10008130:	5ac00404 	addi	r11,r11,16
10008134:	52800404 	addi	r10,r10,16
10008138:	4a400404 	addi	r9,r9,16
1000813c:	1c3fef1e 	bne	r3,r16,100080fc <__alt_data_end+0xf80080fc>
10008140:	89c00044 	addi	r7,r17,1
10008144:	380e913a 	slli	r7,r7,4
10008148:	310003cc 	andi	r4,r6,15
1000814c:	02c000c4 	movi	r11,3
10008150:	11c7883a 	add	r3,r2,r7
10008154:	29cb883a 	add	r5,r5,r7
10008158:	5900212e 	bgeu	r11,r4,100081e0 <memcpy+0x140>
1000815c:	1813883a 	mov	r9,r3
10008160:	2811883a 	mov	r8,r5
10008164:	200f883a 	mov	r7,r4
10008168:	42800017 	ldw	r10,0(r8)
1000816c:	4a400104 	addi	r9,r9,4
10008170:	39ffff04 	addi	r7,r7,-4
10008174:	4abfff15 	stw	r10,-4(r9)
10008178:	42000104 	addi	r8,r8,4
1000817c:	59fffa36 	bltu	r11,r7,10008168 <__alt_data_end+0xf8008168>
10008180:	213fff04 	addi	r4,r4,-4
10008184:	2008d0ba 	srli	r4,r4,2
10008188:	318000cc 	andi	r6,r6,3
1000818c:	21000044 	addi	r4,r4,1
10008190:	2109883a 	add	r4,r4,r4
10008194:	2109883a 	add	r4,r4,r4
10008198:	1907883a 	add	r3,r3,r4
1000819c:	290b883a 	add	r5,r5,r4
100081a0:	30000626 	beq	r6,zero,100081bc <memcpy+0x11c>
100081a4:	198d883a 	add	r6,r3,r6
100081a8:	29c00003 	ldbu	r7,0(r5)
100081ac:	18c00044 	addi	r3,r3,1
100081b0:	29400044 	addi	r5,r5,1
100081b4:	19ffffc5 	stb	r7,-1(r3)
100081b8:	19bffb1e 	bne	r3,r6,100081a8 <__alt_data_end+0xf80081a8>
100081bc:	dfc00217 	ldw	ra,8(sp)
100081c0:	dc400117 	ldw	r17,4(sp)
100081c4:	dc000017 	ldw	r16,0(sp)
100081c8:	dec00304 	addi	sp,sp,12
100081cc:	f800283a 	ret
100081d0:	2007883a 	mov	r3,r4
100081d4:	003ff206 	br	100081a0 <__alt_data_end+0xf80081a0>
100081d8:	2007883a 	mov	r3,r4
100081dc:	003ff106 	br	100081a4 <__alt_data_end+0xf80081a4>
100081e0:	200d883a 	mov	r6,r4
100081e4:	003fee06 	br	100081a0 <__alt_data_end+0xf80081a0>

100081e8 <memmove>:
100081e8:	2005883a 	mov	r2,r4
100081ec:	29000b2e 	bgeu	r5,r4,1000821c <memmove+0x34>
100081f0:	298f883a 	add	r7,r5,r6
100081f4:	21c0092e 	bgeu	r4,r7,1000821c <memmove+0x34>
100081f8:	2187883a 	add	r3,r4,r6
100081fc:	198bc83a 	sub	r5,r3,r6
10008200:	30004826 	beq	r6,zero,10008324 <memmove+0x13c>
10008204:	39ffffc4 	addi	r7,r7,-1
10008208:	39000003 	ldbu	r4,0(r7)
1000820c:	18ffffc4 	addi	r3,r3,-1
10008210:	19000005 	stb	r4,0(r3)
10008214:	28fffb1e 	bne	r5,r3,10008204 <__alt_data_end+0xf8008204>
10008218:	f800283a 	ret
1000821c:	00c003c4 	movi	r3,15
10008220:	1980412e 	bgeu	r3,r6,10008328 <memmove+0x140>
10008224:	2886b03a 	or	r3,r5,r2
10008228:	18c000cc 	andi	r3,r3,3
1000822c:	1800401e 	bne	r3,zero,10008330 <memmove+0x148>
10008230:	33fffc04 	addi	r15,r6,-16
10008234:	781ed13a 	srli	r15,r15,4
10008238:	28c00104 	addi	r3,r5,4
1000823c:	13400104 	addi	r13,r2,4
10008240:	781c913a 	slli	r14,r15,4
10008244:	2b000204 	addi	r12,r5,8
10008248:	12c00204 	addi	r11,r2,8
1000824c:	73800504 	addi	r14,r14,20
10008250:	2a800304 	addi	r10,r5,12
10008254:	12400304 	addi	r9,r2,12
10008258:	2b9d883a 	add	r14,r5,r14
1000825c:	2811883a 	mov	r8,r5
10008260:	100f883a 	mov	r7,r2
10008264:	41000017 	ldw	r4,0(r8)
10008268:	39c00404 	addi	r7,r7,16
1000826c:	18c00404 	addi	r3,r3,16
10008270:	393ffc15 	stw	r4,-16(r7)
10008274:	193ffc17 	ldw	r4,-16(r3)
10008278:	6b400404 	addi	r13,r13,16
1000827c:	5ac00404 	addi	r11,r11,16
10008280:	693ffc15 	stw	r4,-16(r13)
10008284:	61000017 	ldw	r4,0(r12)
10008288:	4a400404 	addi	r9,r9,16
1000828c:	42000404 	addi	r8,r8,16
10008290:	593ffc15 	stw	r4,-16(r11)
10008294:	51000017 	ldw	r4,0(r10)
10008298:	63000404 	addi	r12,r12,16
1000829c:	52800404 	addi	r10,r10,16
100082a0:	493ffc15 	stw	r4,-16(r9)
100082a4:	1bbfef1e 	bne	r3,r14,10008264 <__alt_data_end+0xf8008264>
100082a8:	79000044 	addi	r4,r15,1
100082ac:	2008913a 	slli	r4,r4,4
100082b0:	328003cc 	andi	r10,r6,15
100082b4:	02c000c4 	movi	r11,3
100082b8:	1107883a 	add	r3,r2,r4
100082bc:	290b883a 	add	r5,r5,r4
100082c0:	5a801e2e 	bgeu	r11,r10,1000833c <memmove+0x154>
100082c4:	1813883a 	mov	r9,r3
100082c8:	2811883a 	mov	r8,r5
100082cc:	500f883a 	mov	r7,r10
100082d0:	41000017 	ldw	r4,0(r8)
100082d4:	4a400104 	addi	r9,r9,4
100082d8:	39ffff04 	addi	r7,r7,-4
100082dc:	493fff15 	stw	r4,-4(r9)
100082e0:	42000104 	addi	r8,r8,4
100082e4:	59fffa36 	bltu	r11,r7,100082d0 <__alt_data_end+0xf80082d0>
100082e8:	513fff04 	addi	r4,r10,-4
100082ec:	2008d0ba 	srli	r4,r4,2
100082f0:	318000cc 	andi	r6,r6,3
100082f4:	21000044 	addi	r4,r4,1
100082f8:	2109883a 	add	r4,r4,r4
100082fc:	2109883a 	add	r4,r4,r4
10008300:	1907883a 	add	r3,r3,r4
10008304:	290b883a 	add	r5,r5,r4
10008308:	30000b26 	beq	r6,zero,10008338 <memmove+0x150>
1000830c:	198d883a 	add	r6,r3,r6
10008310:	29c00003 	ldbu	r7,0(r5)
10008314:	18c00044 	addi	r3,r3,1
10008318:	29400044 	addi	r5,r5,1
1000831c:	19ffffc5 	stb	r7,-1(r3)
10008320:	19bffb1e 	bne	r3,r6,10008310 <__alt_data_end+0xf8008310>
10008324:	f800283a 	ret
10008328:	1007883a 	mov	r3,r2
1000832c:	003ff606 	br	10008308 <__alt_data_end+0xf8008308>
10008330:	1007883a 	mov	r3,r2
10008334:	003ff506 	br	1000830c <__alt_data_end+0xf800830c>
10008338:	f800283a 	ret
1000833c:	500d883a 	mov	r6,r10
10008340:	003ff106 	br	10008308 <__alt_data_end+0xf8008308>

10008344 <memset>:
10008344:	20c000cc 	andi	r3,r4,3
10008348:	2005883a 	mov	r2,r4
1000834c:	18004426 	beq	r3,zero,10008460 <memset+0x11c>
10008350:	31ffffc4 	addi	r7,r6,-1
10008354:	30004026 	beq	r6,zero,10008458 <memset+0x114>
10008358:	2813883a 	mov	r9,r5
1000835c:	200d883a 	mov	r6,r4
10008360:	2007883a 	mov	r3,r4
10008364:	00000406 	br	10008378 <memset+0x34>
10008368:	3a3fffc4 	addi	r8,r7,-1
1000836c:	31800044 	addi	r6,r6,1
10008370:	38003926 	beq	r7,zero,10008458 <memset+0x114>
10008374:	400f883a 	mov	r7,r8
10008378:	18c00044 	addi	r3,r3,1
1000837c:	32400005 	stb	r9,0(r6)
10008380:	1a0000cc 	andi	r8,r3,3
10008384:	403ff81e 	bne	r8,zero,10008368 <__alt_data_end+0xf8008368>
10008388:	010000c4 	movi	r4,3
1000838c:	21c02d2e 	bgeu	r4,r7,10008444 <memset+0x100>
10008390:	29003fcc 	andi	r4,r5,255
10008394:	200c923a 	slli	r6,r4,8
10008398:	3108b03a 	or	r4,r6,r4
1000839c:	200c943a 	slli	r6,r4,16
100083a0:	218cb03a 	or	r6,r4,r6
100083a4:	010003c4 	movi	r4,15
100083a8:	21c0182e 	bgeu	r4,r7,1000840c <memset+0xc8>
100083ac:	3b3ffc04 	addi	r12,r7,-16
100083b0:	6018d13a 	srli	r12,r12,4
100083b4:	1a000104 	addi	r8,r3,4
100083b8:	1ac00204 	addi	r11,r3,8
100083bc:	6008913a 	slli	r4,r12,4
100083c0:	1a800304 	addi	r10,r3,12
100083c4:	1813883a 	mov	r9,r3
100083c8:	21000504 	addi	r4,r4,20
100083cc:	1909883a 	add	r4,r3,r4
100083d0:	49800015 	stw	r6,0(r9)
100083d4:	41800015 	stw	r6,0(r8)
100083d8:	59800015 	stw	r6,0(r11)
100083dc:	51800015 	stw	r6,0(r10)
100083e0:	42000404 	addi	r8,r8,16
100083e4:	4a400404 	addi	r9,r9,16
100083e8:	5ac00404 	addi	r11,r11,16
100083ec:	52800404 	addi	r10,r10,16
100083f0:	413ff71e 	bne	r8,r4,100083d0 <__alt_data_end+0xf80083d0>
100083f4:	63000044 	addi	r12,r12,1
100083f8:	6018913a 	slli	r12,r12,4
100083fc:	39c003cc 	andi	r7,r7,15
10008400:	010000c4 	movi	r4,3
10008404:	1b07883a 	add	r3,r3,r12
10008408:	21c00e2e 	bgeu	r4,r7,10008444 <memset+0x100>
1000840c:	1813883a 	mov	r9,r3
10008410:	3811883a 	mov	r8,r7
10008414:	010000c4 	movi	r4,3
10008418:	49800015 	stw	r6,0(r9)
1000841c:	423fff04 	addi	r8,r8,-4
10008420:	4a400104 	addi	r9,r9,4
10008424:	223ffc36 	bltu	r4,r8,10008418 <__alt_data_end+0xf8008418>
10008428:	393fff04 	addi	r4,r7,-4
1000842c:	2008d0ba 	srli	r4,r4,2
10008430:	39c000cc 	andi	r7,r7,3
10008434:	21000044 	addi	r4,r4,1
10008438:	2109883a 	add	r4,r4,r4
1000843c:	2109883a 	add	r4,r4,r4
10008440:	1907883a 	add	r3,r3,r4
10008444:	38000526 	beq	r7,zero,1000845c <memset+0x118>
10008448:	19cf883a 	add	r7,r3,r7
1000844c:	19400005 	stb	r5,0(r3)
10008450:	18c00044 	addi	r3,r3,1
10008454:	38fffd1e 	bne	r7,r3,1000844c <__alt_data_end+0xf800844c>
10008458:	f800283a 	ret
1000845c:	f800283a 	ret
10008460:	2007883a 	mov	r3,r4
10008464:	300f883a 	mov	r7,r6
10008468:	003fc706 	br	10008388 <__alt_data_end+0xf8008388>

1000846c <_Balloc>:
1000846c:	20801317 	ldw	r2,76(r4)
10008470:	defffc04 	addi	sp,sp,-16
10008474:	dc400115 	stw	r17,4(sp)
10008478:	dc000015 	stw	r16,0(sp)
1000847c:	dfc00315 	stw	ra,12(sp)
10008480:	dc800215 	stw	r18,8(sp)
10008484:	2023883a 	mov	r17,r4
10008488:	2821883a 	mov	r16,r5
1000848c:	10000f26 	beq	r2,zero,100084cc <_Balloc+0x60>
10008490:	8407883a 	add	r3,r16,r16
10008494:	18c7883a 	add	r3,r3,r3
10008498:	10c7883a 	add	r3,r2,r3
1000849c:	18800017 	ldw	r2,0(r3)
100084a0:	10001126 	beq	r2,zero,100084e8 <_Balloc+0x7c>
100084a4:	11000017 	ldw	r4,0(r2)
100084a8:	19000015 	stw	r4,0(r3)
100084ac:	10000415 	stw	zero,16(r2)
100084b0:	10000315 	stw	zero,12(r2)
100084b4:	dfc00317 	ldw	ra,12(sp)
100084b8:	dc800217 	ldw	r18,8(sp)
100084bc:	dc400117 	ldw	r17,4(sp)
100084c0:	dc000017 	ldw	r16,0(sp)
100084c4:	dec00404 	addi	sp,sp,16
100084c8:	f800283a 	ret
100084cc:	01800844 	movi	r6,33
100084d0:	01400104 	movi	r5,4
100084d4:	000b5140 	call	1000b514 <_calloc_r>
100084d8:	88801315 	stw	r2,76(r17)
100084dc:	103fec1e 	bne	r2,zero,10008490 <__alt_data_end+0xf8008490>
100084e0:	0005883a 	mov	r2,zero
100084e4:	003ff306 	br	100084b4 <__alt_data_end+0xf80084b4>
100084e8:	01400044 	movi	r5,1
100084ec:	2c24983a 	sll	r18,r5,r16
100084f0:	8809883a 	mov	r4,r17
100084f4:	91800144 	addi	r6,r18,5
100084f8:	318d883a 	add	r6,r6,r6
100084fc:	318d883a 	add	r6,r6,r6
10008500:	000b5140 	call	1000b514 <_calloc_r>
10008504:	103ff626 	beq	r2,zero,100084e0 <__alt_data_end+0xf80084e0>
10008508:	14000115 	stw	r16,4(r2)
1000850c:	14800215 	stw	r18,8(r2)
10008510:	003fe606 	br	100084ac <__alt_data_end+0xf80084ac>

10008514 <_Bfree>:
10008514:	28000826 	beq	r5,zero,10008538 <_Bfree+0x24>
10008518:	28c00117 	ldw	r3,4(r5)
1000851c:	20801317 	ldw	r2,76(r4)
10008520:	18c7883a 	add	r3,r3,r3
10008524:	18c7883a 	add	r3,r3,r3
10008528:	10c5883a 	add	r2,r2,r3
1000852c:	10c00017 	ldw	r3,0(r2)
10008530:	28c00015 	stw	r3,0(r5)
10008534:	11400015 	stw	r5,0(r2)
10008538:	f800283a 	ret

1000853c <__multadd>:
1000853c:	defff704 	addi	sp,sp,-36
10008540:	dc800215 	stw	r18,8(sp)
10008544:	2c800417 	ldw	r18,16(r5)
10008548:	dd800615 	stw	r22,24(sp)
1000854c:	dd400515 	stw	r21,20(sp)
10008550:	dd000415 	stw	r20,16(sp)
10008554:	dcc00315 	stw	r19,12(sp)
10008558:	dc400115 	stw	r17,4(sp)
1000855c:	dc000015 	stw	r16,0(sp)
10008560:	dfc00815 	stw	ra,32(sp)
10008564:	ddc00715 	stw	r23,28(sp)
10008568:	2827883a 	mov	r19,r5
1000856c:	2029883a 	mov	r20,r4
10008570:	3023883a 	mov	r17,r6
10008574:	3821883a 	mov	r16,r7
10008578:	2d400504 	addi	r21,r5,20
1000857c:	002d883a 	mov	r22,zero
10008580:	adc00017 	ldw	r23,0(r21)
10008584:	880b883a 	mov	r5,r17
10008588:	ad400104 	addi	r21,r21,4
1000858c:	b93fffcc 	andi	r4,r23,65535
10008590:	000cb200 	call	1000cb20 <__mulsi3>
10008594:	b808d43a 	srli	r4,r23,16
10008598:	880b883a 	mov	r5,r17
1000859c:	1421883a 	add	r16,r2,r16
100085a0:	000cb200 	call	1000cb20 <__mulsi3>
100085a4:	800ed43a 	srli	r7,r16,16
100085a8:	80ffffcc 	andi	r3,r16,65535
100085ac:	b5800044 	addi	r22,r22,1
100085b0:	11c5883a 	add	r2,r2,r7
100085b4:	100e943a 	slli	r7,r2,16
100085b8:	1020d43a 	srli	r16,r2,16
100085bc:	38c7883a 	add	r3,r7,r3
100085c0:	a8ffff15 	stw	r3,-4(r21)
100085c4:	b4bfee16 	blt	r22,r18,10008580 <__alt_data_end+0xf8008580>
100085c8:	80000926 	beq	r16,zero,100085f0 <__multadd+0xb4>
100085cc:	98800217 	ldw	r2,8(r19)
100085d0:	9080130e 	bge	r18,r2,10008620 <__multadd+0xe4>
100085d4:	90800144 	addi	r2,r18,5
100085d8:	1085883a 	add	r2,r2,r2
100085dc:	1085883a 	add	r2,r2,r2
100085e0:	9885883a 	add	r2,r19,r2
100085e4:	14000015 	stw	r16,0(r2)
100085e8:	94800044 	addi	r18,r18,1
100085ec:	9c800415 	stw	r18,16(r19)
100085f0:	9805883a 	mov	r2,r19
100085f4:	dfc00817 	ldw	ra,32(sp)
100085f8:	ddc00717 	ldw	r23,28(sp)
100085fc:	dd800617 	ldw	r22,24(sp)
10008600:	dd400517 	ldw	r21,20(sp)
10008604:	dd000417 	ldw	r20,16(sp)
10008608:	dcc00317 	ldw	r19,12(sp)
1000860c:	dc800217 	ldw	r18,8(sp)
10008610:	dc400117 	ldw	r17,4(sp)
10008614:	dc000017 	ldw	r16,0(sp)
10008618:	dec00904 	addi	sp,sp,36
1000861c:	f800283a 	ret
10008620:	99400117 	ldw	r5,4(r19)
10008624:	a009883a 	mov	r4,r20
10008628:	29400044 	addi	r5,r5,1
1000862c:	000846c0 	call	1000846c <_Balloc>
10008630:	99800417 	ldw	r6,16(r19)
10008634:	99400304 	addi	r5,r19,12
10008638:	11000304 	addi	r4,r2,12
1000863c:	31800084 	addi	r6,r6,2
10008640:	318d883a 	add	r6,r6,r6
10008644:	318d883a 	add	r6,r6,r6
10008648:	1023883a 	mov	r17,r2
1000864c:	00080a00 	call	100080a0 <memcpy>
10008650:	98000a26 	beq	r19,zero,1000867c <__multadd+0x140>
10008654:	98c00117 	ldw	r3,4(r19)
10008658:	a0801317 	ldw	r2,76(r20)
1000865c:	18c7883a 	add	r3,r3,r3
10008660:	18c7883a 	add	r3,r3,r3
10008664:	10c5883a 	add	r2,r2,r3
10008668:	10c00017 	ldw	r3,0(r2)
1000866c:	98c00015 	stw	r3,0(r19)
10008670:	14c00015 	stw	r19,0(r2)
10008674:	8827883a 	mov	r19,r17
10008678:	003fd606 	br	100085d4 <__alt_data_end+0xf80085d4>
1000867c:	8827883a 	mov	r19,r17
10008680:	003fd406 	br	100085d4 <__alt_data_end+0xf80085d4>

10008684 <__s2b>:
10008684:	defff904 	addi	sp,sp,-28
10008688:	dc400115 	stw	r17,4(sp)
1000868c:	dc000015 	stw	r16,0(sp)
10008690:	2023883a 	mov	r17,r4
10008694:	2821883a 	mov	r16,r5
10008698:	39000204 	addi	r4,r7,8
1000869c:	01400244 	movi	r5,9
100086a0:	dcc00315 	stw	r19,12(sp)
100086a4:	dc800215 	stw	r18,8(sp)
100086a8:	dfc00615 	stw	ra,24(sp)
100086ac:	dd400515 	stw	r21,20(sp)
100086b0:	dd000415 	stw	r20,16(sp)
100086b4:	3825883a 	mov	r18,r7
100086b8:	3027883a 	mov	r19,r6
100086bc:	000c96c0 	call	1000c96c <__divsi3>
100086c0:	00c00044 	movi	r3,1
100086c4:	000b883a 	mov	r5,zero
100086c8:	1880030e 	bge	r3,r2,100086d8 <__s2b+0x54>
100086cc:	18c7883a 	add	r3,r3,r3
100086d0:	29400044 	addi	r5,r5,1
100086d4:	18bffd16 	blt	r3,r2,100086cc <__alt_data_end+0xf80086cc>
100086d8:	8809883a 	mov	r4,r17
100086dc:	000846c0 	call	1000846c <_Balloc>
100086e0:	d8c00717 	ldw	r3,28(sp)
100086e4:	10c00515 	stw	r3,20(r2)
100086e8:	00c00044 	movi	r3,1
100086ec:	10c00415 	stw	r3,16(r2)
100086f0:	00c00244 	movi	r3,9
100086f4:	1cc0210e 	bge	r3,r19,1000877c <__s2b+0xf8>
100086f8:	80eb883a 	add	r21,r16,r3
100086fc:	a829883a 	mov	r20,r21
10008700:	84e1883a 	add	r16,r16,r19
10008704:	a1c00007 	ldb	r7,0(r20)
10008708:	01800284 	movi	r6,10
1000870c:	a5000044 	addi	r20,r20,1
10008710:	100b883a 	mov	r5,r2
10008714:	39fff404 	addi	r7,r7,-48
10008718:	8809883a 	mov	r4,r17
1000871c:	000853c0 	call	1000853c <__multadd>
10008720:	a43ff81e 	bne	r20,r16,10008704 <__alt_data_end+0xf8008704>
10008724:	ace1883a 	add	r16,r21,r19
10008728:	843ffe04 	addi	r16,r16,-8
1000872c:	9c800a0e 	bge	r19,r18,10008758 <__s2b+0xd4>
10008730:	94e5c83a 	sub	r18,r18,r19
10008734:	84a5883a 	add	r18,r16,r18
10008738:	81c00007 	ldb	r7,0(r16)
1000873c:	01800284 	movi	r6,10
10008740:	84000044 	addi	r16,r16,1
10008744:	100b883a 	mov	r5,r2
10008748:	39fff404 	addi	r7,r7,-48
1000874c:	8809883a 	mov	r4,r17
10008750:	000853c0 	call	1000853c <__multadd>
10008754:	84bff81e 	bne	r16,r18,10008738 <__alt_data_end+0xf8008738>
10008758:	dfc00617 	ldw	ra,24(sp)
1000875c:	dd400517 	ldw	r21,20(sp)
10008760:	dd000417 	ldw	r20,16(sp)
10008764:	dcc00317 	ldw	r19,12(sp)
10008768:	dc800217 	ldw	r18,8(sp)
1000876c:	dc400117 	ldw	r17,4(sp)
10008770:	dc000017 	ldw	r16,0(sp)
10008774:	dec00704 	addi	sp,sp,28
10008778:	f800283a 	ret
1000877c:	84000284 	addi	r16,r16,10
10008780:	1827883a 	mov	r19,r3
10008784:	003fe906 	br	1000872c <__alt_data_end+0xf800872c>

10008788 <__hi0bits>:
10008788:	20bfffec 	andhi	r2,r4,65535
1000878c:	1000141e 	bne	r2,zero,100087e0 <__hi0bits+0x58>
10008790:	2008943a 	slli	r4,r4,16
10008794:	00800404 	movi	r2,16
10008798:	20ffc02c 	andhi	r3,r4,65280
1000879c:	1800021e 	bne	r3,zero,100087a8 <__hi0bits+0x20>
100087a0:	2008923a 	slli	r4,r4,8
100087a4:	10800204 	addi	r2,r2,8
100087a8:	20fc002c 	andhi	r3,r4,61440
100087ac:	1800021e 	bne	r3,zero,100087b8 <__hi0bits+0x30>
100087b0:	2008913a 	slli	r4,r4,4
100087b4:	10800104 	addi	r2,r2,4
100087b8:	20f0002c 	andhi	r3,r4,49152
100087bc:	1800031e 	bne	r3,zero,100087cc <__hi0bits+0x44>
100087c0:	2109883a 	add	r4,r4,r4
100087c4:	10800084 	addi	r2,r2,2
100087c8:	2109883a 	add	r4,r4,r4
100087cc:	20000316 	blt	r4,zero,100087dc <__hi0bits+0x54>
100087d0:	2110002c 	andhi	r4,r4,16384
100087d4:	2000041e 	bne	r4,zero,100087e8 <__hi0bits+0x60>
100087d8:	00800804 	movi	r2,32
100087dc:	f800283a 	ret
100087e0:	0005883a 	mov	r2,zero
100087e4:	003fec06 	br	10008798 <__alt_data_end+0xf8008798>
100087e8:	10800044 	addi	r2,r2,1
100087ec:	f800283a 	ret

100087f0 <__lo0bits>:
100087f0:	20c00017 	ldw	r3,0(r4)
100087f4:	188001cc 	andi	r2,r3,7
100087f8:	10000826 	beq	r2,zero,1000881c <__lo0bits+0x2c>
100087fc:	1880004c 	andi	r2,r3,1
10008800:	1000211e 	bne	r2,zero,10008888 <__lo0bits+0x98>
10008804:	1880008c 	andi	r2,r3,2
10008808:	1000211e 	bne	r2,zero,10008890 <__lo0bits+0xa0>
1000880c:	1806d0ba 	srli	r3,r3,2
10008810:	00800084 	movi	r2,2
10008814:	20c00015 	stw	r3,0(r4)
10008818:	f800283a 	ret
1000881c:	18bfffcc 	andi	r2,r3,65535
10008820:	10001326 	beq	r2,zero,10008870 <__lo0bits+0x80>
10008824:	0005883a 	mov	r2,zero
10008828:	19403fcc 	andi	r5,r3,255
1000882c:	2800021e 	bne	r5,zero,10008838 <__lo0bits+0x48>
10008830:	1806d23a 	srli	r3,r3,8
10008834:	10800204 	addi	r2,r2,8
10008838:	194003cc 	andi	r5,r3,15
1000883c:	2800021e 	bne	r5,zero,10008848 <__lo0bits+0x58>
10008840:	1806d13a 	srli	r3,r3,4
10008844:	10800104 	addi	r2,r2,4
10008848:	194000cc 	andi	r5,r3,3
1000884c:	2800021e 	bne	r5,zero,10008858 <__lo0bits+0x68>
10008850:	1806d0ba 	srli	r3,r3,2
10008854:	10800084 	addi	r2,r2,2
10008858:	1940004c 	andi	r5,r3,1
1000885c:	2800081e 	bne	r5,zero,10008880 <__lo0bits+0x90>
10008860:	1806d07a 	srli	r3,r3,1
10008864:	1800051e 	bne	r3,zero,1000887c <__lo0bits+0x8c>
10008868:	00800804 	movi	r2,32
1000886c:	f800283a 	ret
10008870:	1806d43a 	srli	r3,r3,16
10008874:	00800404 	movi	r2,16
10008878:	003feb06 	br	10008828 <__alt_data_end+0xf8008828>
1000887c:	10800044 	addi	r2,r2,1
10008880:	20c00015 	stw	r3,0(r4)
10008884:	f800283a 	ret
10008888:	0005883a 	mov	r2,zero
1000888c:	f800283a 	ret
10008890:	1806d07a 	srli	r3,r3,1
10008894:	00800044 	movi	r2,1
10008898:	20c00015 	stw	r3,0(r4)
1000889c:	f800283a 	ret

100088a0 <__i2b>:
100088a0:	defffd04 	addi	sp,sp,-12
100088a4:	dc000015 	stw	r16,0(sp)
100088a8:	04000044 	movi	r16,1
100088ac:	dc400115 	stw	r17,4(sp)
100088b0:	2823883a 	mov	r17,r5
100088b4:	800b883a 	mov	r5,r16
100088b8:	dfc00215 	stw	ra,8(sp)
100088bc:	000846c0 	call	1000846c <_Balloc>
100088c0:	14400515 	stw	r17,20(r2)
100088c4:	14000415 	stw	r16,16(r2)
100088c8:	dfc00217 	ldw	ra,8(sp)
100088cc:	dc400117 	ldw	r17,4(sp)
100088d0:	dc000017 	ldw	r16,0(sp)
100088d4:	dec00304 	addi	sp,sp,12
100088d8:	f800283a 	ret

100088dc <__multiply>:
100088dc:	deffef04 	addi	sp,sp,-68
100088e0:	dc400815 	stw	r17,32(sp)
100088e4:	dc000715 	stw	r16,28(sp)
100088e8:	34400417 	ldw	r17,16(r6)
100088ec:	2c000417 	ldw	r16,16(r5)
100088f0:	dd800d15 	stw	r22,52(sp)
100088f4:	dc800915 	stw	r18,36(sp)
100088f8:	dfc01015 	stw	ra,64(sp)
100088fc:	df000f15 	stw	fp,60(sp)
10008900:	ddc00e15 	stw	r23,56(sp)
10008904:	dd400c15 	stw	r21,48(sp)
10008908:	dd000b15 	stw	r20,44(sp)
1000890c:	dcc00a15 	stw	r19,40(sp)
10008910:	2825883a 	mov	r18,r5
10008914:	302d883a 	mov	r22,r6
10008918:	8440050e 	bge	r16,r17,10008930 <__multiply+0x54>
1000891c:	8007883a 	mov	r3,r16
10008920:	3025883a 	mov	r18,r6
10008924:	8821883a 	mov	r16,r17
10008928:	282d883a 	mov	r22,r5
1000892c:	1823883a 	mov	r17,r3
10008930:	90800217 	ldw	r2,8(r18)
10008934:	8447883a 	add	r3,r16,r17
10008938:	d8c00215 	stw	r3,8(sp)
1000893c:	91400117 	ldw	r5,4(r18)
10008940:	10c0010e 	bge	r2,r3,10008948 <__multiply+0x6c>
10008944:	29400044 	addi	r5,r5,1
10008948:	000846c0 	call	1000846c <_Balloc>
1000894c:	d8c00217 	ldw	r3,8(sp)
10008950:	d8800615 	stw	r2,24(sp)
10008954:	18eb883a 	add	r21,r3,r3
10008958:	ad6b883a 	add	r21,r21,r21
1000895c:	10c00504 	addi	r3,r2,20
10008960:	1d6b883a 	add	r21,r3,r21
10008964:	d8c00115 	stw	r3,4(sp)
10008968:	dd400315 	stw	r21,12(sp)
1000896c:	1805883a 	mov	r2,r3
10008970:	1d40042e 	bgeu	r3,r21,10008984 <__multiply+0xa8>
10008974:	d8c00317 	ldw	r3,12(sp)
10008978:	10000015 	stw	zero,0(r2)
1000897c:	10800104 	addi	r2,r2,4
10008980:	10fffc36 	bltu	r2,r3,10008974 <__alt_data_end+0xf8008974>
10008984:	8c63883a 	add	r17,r17,r17
10008988:	b5800504 	addi	r22,r22,20
1000898c:	8c63883a 	add	r17,r17,r17
10008990:	94800504 	addi	r18,r18,20
10008994:	8421883a 	add	r16,r16,r16
10008998:	b463883a 	add	r17,r22,r17
1000899c:	8421883a 	add	r16,r16,r16
100089a0:	dd800015 	stw	r22,0(sp)
100089a4:	dc800415 	stw	r18,16(sp)
100089a8:	dc400515 	stw	r17,20(sp)
100089ac:	9429883a 	add	r20,r18,r16
100089b0:	b4404f2e 	bgeu	r22,r17,10008af0 <__multiply+0x214>
100089b4:	d8c00017 	ldw	r3,0(sp)
100089b8:	1c800017 	ldw	r18,0(r3)
100089bc:	947fffcc 	andi	r17,r18,65535
100089c0:	88001e26 	beq	r17,zero,10008a3c <__multiply+0x160>
100089c4:	dd800117 	ldw	r22,4(sp)
100089c8:	dd400417 	ldw	r21,16(sp)
100089cc:	0027883a 	mov	r19,zero
100089d0:	ac800017 	ldw	r18,0(r21)
100089d4:	b4000017 	ldw	r16,0(r22)
100089d8:	880b883a 	mov	r5,r17
100089dc:	913fffcc 	andi	r4,r18,65535
100089e0:	000cb200 	call	1000cb20 <__mulsi3>
100089e4:	9008d43a 	srli	r4,r18,16
100089e8:	84bfffcc 	andi	r18,r16,65535
100089ec:	1485883a 	add	r2,r2,r18
100089f0:	14e5883a 	add	r18,r2,r19
100089f4:	8020d43a 	srli	r16,r16,16
100089f8:	9026d43a 	srli	r19,r18,16
100089fc:	880b883a 	mov	r5,r17
10008a00:	000cb200 	call	1000cb20 <__mulsi3>
10008a04:	1405883a 	add	r2,r2,r16
10008a08:	14e1883a 	add	r16,r2,r19
10008a0c:	90ffffcc 	andi	r3,r18,65535
10008a10:	8024943a 	slli	r18,r16,16
10008a14:	ad400104 	addi	r21,r21,4
10008a18:	b005883a 	mov	r2,r22
10008a1c:	90c6b03a 	or	r3,r18,r3
10008a20:	b0c00015 	stw	r3,0(r22)
10008a24:	8026d43a 	srli	r19,r16,16
10008a28:	b5800104 	addi	r22,r22,4
10008a2c:	ad3fe836 	bltu	r21,r20,100089d0 <__alt_data_end+0xf80089d0>
10008a30:	d8c00017 	ldw	r3,0(sp)
10008a34:	14c00115 	stw	r19,4(r2)
10008a38:	1c800017 	ldw	r18,0(r3)
10008a3c:	9024d43a 	srli	r18,r18,16
10008a40:	90002226 	beq	r18,zero,10008acc <__multiply+0x1f0>
10008a44:	d8c00117 	ldw	r3,4(sp)
10008a48:	dd800417 	ldw	r22,16(sp)
10008a4c:	002f883a 	mov	r23,zero
10008a50:	1f000017 	ldw	fp,0(r3)
10008a54:	1823883a 	mov	r17,r3
10008a58:	182b883a 	mov	r21,r3
10008a5c:	e021883a 	mov	r16,fp
10008a60:	00000106 	br	10008a68 <__multiply+0x18c>
10008a64:	982b883a 	mov	r21,r19
10008a68:	b100000b 	ldhu	r4,0(r22)
10008a6c:	8020d43a 	srli	r16,r16,16
10008a70:	900b883a 	mov	r5,r18
10008a74:	000cb200 	call	1000cb20 <__mulsi3>
10008a78:	1405883a 	add	r2,r2,r16
10008a7c:	15ef883a 	add	r23,r2,r23
10008a80:	b804943a 	slli	r2,r23,16
10008a84:	e0ffffcc 	andi	r3,fp,65535
10008a88:	8c400104 	addi	r17,r17,4
10008a8c:	10c6b03a 	or	r3,r2,r3
10008a90:	88ffff15 	stw	r3,-4(r17)
10008a94:	b5800104 	addi	r22,r22,4
10008a98:	b13fff17 	ldw	r4,-4(r22)
10008a9c:	acc00104 	addi	r19,r21,4
10008aa0:	900b883a 	mov	r5,r18
10008aa4:	2008d43a 	srli	r4,r4,16
10008aa8:	9c000017 	ldw	r16,0(r19)
10008aac:	000cb200 	call	1000cb20 <__mulsi3>
10008ab0:	b806d43a 	srli	r3,r23,16
10008ab4:	813fffcc 	andi	r4,r16,65535
10008ab8:	1105883a 	add	r2,r2,r4
10008abc:	10f9883a 	add	fp,r2,r3
10008ac0:	e02ed43a 	srli	r23,fp,16
10008ac4:	b53fe736 	bltu	r22,r20,10008a64 <__alt_data_end+0xf8008a64>
10008ac8:	af000115 	stw	fp,4(r21)
10008acc:	d8c00017 	ldw	r3,0(sp)
10008ad0:	d9000517 	ldw	r4,20(sp)
10008ad4:	18c00104 	addi	r3,r3,4
10008ad8:	d8c00015 	stw	r3,0(sp)
10008adc:	d8c00117 	ldw	r3,4(sp)
10008ae0:	18c00104 	addi	r3,r3,4
10008ae4:	d8c00115 	stw	r3,4(sp)
10008ae8:	d8c00017 	ldw	r3,0(sp)
10008aec:	193fb136 	bltu	r3,r4,100089b4 <__alt_data_end+0xf80089b4>
10008af0:	d8c00217 	ldw	r3,8(sp)
10008af4:	00c00c0e 	bge	zero,r3,10008b28 <__multiply+0x24c>
10008af8:	d8c00317 	ldw	r3,12(sp)
10008afc:	18bfff17 	ldw	r2,-4(r3)
10008b00:	1d7fff04 	addi	r21,r3,-4
10008b04:	10000326 	beq	r2,zero,10008b14 <__multiply+0x238>
10008b08:	00000706 	br	10008b28 <__multiply+0x24c>
10008b0c:	a8800017 	ldw	r2,0(r21)
10008b10:	1000051e 	bne	r2,zero,10008b28 <__multiply+0x24c>
10008b14:	d8c00217 	ldw	r3,8(sp)
10008b18:	ad7fff04 	addi	r21,r21,-4
10008b1c:	18ffffc4 	addi	r3,r3,-1
10008b20:	d8c00215 	stw	r3,8(sp)
10008b24:	183ff91e 	bne	r3,zero,10008b0c <__alt_data_end+0xf8008b0c>
10008b28:	d8c00617 	ldw	r3,24(sp)
10008b2c:	d9000217 	ldw	r4,8(sp)
10008b30:	1805883a 	mov	r2,r3
10008b34:	19000415 	stw	r4,16(r3)
10008b38:	dfc01017 	ldw	ra,64(sp)
10008b3c:	df000f17 	ldw	fp,60(sp)
10008b40:	ddc00e17 	ldw	r23,56(sp)
10008b44:	dd800d17 	ldw	r22,52(sp)
10008b48:	dd400c17 	ldw	r21,48(sp)
10008b4c:	dd000b17 	ldw	r20,44(sp)
10008b50:	dcc00a17 	ldw	r19,40(sp)
10008b54:	dc800917 	ldw	r18,36(sp)
10008b58:	dc400817 	ldw	r17,32(sp)
10008b5c:	dc000717 	ldw	r16,28(sp)
10008b60:	dec01104 	addi	sp,sp,68
10008b64:	f800283a 	ret

10008b68 <__pow5mult>:
10008b68:	defffa04 	addi	sp,sp,-24
10008b6c:	dcc00315 	stw	r19,12(sp)
10008b70:	dc000015 	stw	r16,0(sp)
10008b74:	dfc00515 	stw	ra,20(sp)
10008b78:	dd000415 	stw	r20,16(sp)
10008b7c:	dc800215 	stw	r18,8(sp)
10008b80:	dc400115 	stw	r17,4(sp)
10008b84:	308000cc 	andi	r2,r6,3
10008b88:	3021883a 	mov	r16,r6
10008b8c:	2027883a 	mov	r19,r4
10008b90:	10002f1e 	bne	r2,zero,10008c50 <__pow5mult+0xe8>
10008b94:	2825883a 	mov	r18,r5
10008b98:	8021d0ba 	srai	r16,r16,2
10008b9c:	80001a26 	beq	r16,zero,10008c08 <__pow5mult+0xa0>
10008ba0:	9c401217 	ldw	r17,72(r19)
10008ba4:	8800061e 	bne	r17,zero,10008bc0 <__pow5mult+0x58>
10008ba8:	00003406 	br	10008c7c <__pow5mult+0x114>
10008bac:	8021d07a 	srai	r16,r16,1
10008bb0:	80001526 	beq	r16,zero,10008c08 <__pow5mult+0xa0>
10008bb4:	88800017 	ldw	r2,0(r17)
10008bb8:	10001c26 	beq	r2,zero,10008c2c <__pow5mult+0xc4>
10008bbc:	1023883a 	mov	r17,r2
10008bc0:	8080004c 	andi	r2,r16,1
10008bc4:	103ff926 	beq	r2,zero,10008bac <__alt_data_end+0xf8008bac>
10008bc8:	880d883a 	mov	r6,r17
10008bcc:	900b883a 	mov	r5,r18
10008bd0:	9809883a 	mov	r4,r19
10008bd4:	00088dc0 	call	100088dc <__multiply>
10008bd8:	90001b26 	beq	r18,zero,10008c48 <__pow5mult+0xe0>
10008bdc:	91000117 	ldw	r4,4(r18)
10008be0:	98c01317 	ldw	r3,76(r19)
10008be4:	8021d07a 	srai	r16,r16,1
10008be8:	2109883a 	add	r4,r4,r4
10008bec:	2109883a 	add	r4,r4,r4
10008bf0:	1907883a 	add	r3,r3,r4
10008bf4:	19000017 	ldw	r4,0(r3)
10008bf8:	91000015 	stw	r4,0(r18)
10008bfc:	1c800015 	stw	r18,0(r3)
10008c00:	1025883a 	mov	r18,r2
10008c04:	803feb1e 	bne	r16,zero,10008bb4 <__alt_data_end+0xf8008bb4>
10008c08:	9005883a 	mov	r2,r18
10008c0c:	dfc00517 	ldw	ra,20(sp)
10008c10:	dd000417 	ldw	r20,16(sp)
10008c14:	dcc00317 	ldw	r19,12(sp)
10008c18:	dc800217 	ldw	r18,8(sp)
10008c1c:	dc400117 	ldw	r17,4(sp)
10008c20:	dc000017 	ldw	r16,0(sp)
10008c24:	dec00604 	addi	sp,sp,24
10008c28:	f800283a 	ret
10008c2c:	880d883a 	mov	r6,r17
10008c30:	880b883a 	mov	r5,r17
10008c34:	9809883a 	mov	r4,r19
10008c38:	00088dc0 	call	100088dc <__multiply>
10008c3c:	88800015 	stw	r2,0(r17)
10008c40:	10000015 	stw	zero,0(r2)
10008c44:	003fdd06 	br	10008bbc <__alt_data_end+0xf8008bbc>
10008c48:	1025883a 	mov	r18,r2
10008c4c:	003fd706 	br	10008bac <__alt_data_end+0xf8008bac>
10008c50:	10bfffc4 	addi	r2,r2,-1
10008c54:	1085883a 	add	r2,r2,r2
10008c58:	00c40074 	movhi	r3,4097
10008c5c:	18c90c04 	addi	r3,r3,9264
10008c60:	1085883a 	add	r2,r2,r2
10008c64:	1885883a 	add	r2,r3,r2
10008c68:	11800017 	ldw	r6,0(r2)
10008c6c:	000f883a 	mov	r7,zero
10008c70:	000853c0 	call	1000853c <__multadd>
10008c74:	1025883a 	mov	r18,r2
10008c78:	003fc706 	br	10008b98 <__alt_data_end+0xf8008b98>
10008c7c:	05000044 	movi	r20,1
10008c80:	a00b883a 	mov	r5,r20
10008c84:	9809883a 	mov	r4,r19
10008c88:	000846c0 	call	1000846c <_Balloc>
10008c8c:	1023883a 	mov	r17,r2
10008c90:	00809c44 	movi	r2,625
10008c94:	88800515 	stw	r2,20(r17)
10008c98:	8d000415 	stw	r20,16(r17)
10008c9c:	9c401215 	stw	r17,72(r19)
10008ca0:	88000015 	stw	zero,0(r17)
10008ca4:	003fc606 	br	10008bc0 <__alt_data_end+0xf8008bc0>

10008ca8 <__lshift>:
10008ca8:	defff904 	addi	sp,sp,-28
10008cac:	dd400515 	stw	r21,20(sp)
10008cb0:	dcc00315 	stw	r19,12(sp)
10008cb4:	302bd17a 	srai	r21,r6,5
10008cb8:	2cc00417 	ldw	r19,16(r5)
10008cbc:	28800217 	ldw	r2,8(r5)
10008cc0:	dd000415 	stw	r20,16(sp)
10008cc4:	ace7883a 	add	r19,r21,r19
10008cc8:	dc800215 	stw	r18,8(sp)
10008ccc:	dc400115 	stw	r17,4(sp)
10008cd0:	dc000015 	stw	r16,0(sp)
10008cd4:	dfc00615 	stw	ra,24(sp)
10008cd8:	9c000044 	addi	r16,r19,1
10008cdc:	2823883a 	mov	r17,r5
10008ce0:	3029883a 	mov	r20,r6
10008ce4:	2025883a 	mov	r18,r4
10008ce8:	29400117 	ldw	r5,4(r5)
10008cec:	1400030e 	bge	r2,r16,10008cfc <__lshift+0x54>
10008cf0:	1085883a 	add	r2,r2,r2
10008cf4:	29400044 	addi	r5,r5,1
10008cf8:	143ffd16 	blt	r2,r16,10008cf0 <__alt_data_end+0xf8008cf0>
10008cfc:	9009883a 	mov	r4,r18
10008d00:	000846c0 	call	1000846c <_Balloc>
10008d04:	10c00504 	addi	r3,r2,20
10008d08:	0540070e 	bge	zero,r21,10008d28 <__lshift+0x80>
10008d0c:	ad6b883a 	add	r21,r21,r21
10008d10:	ad6b883a 	add	r21,r21,r21
10008d14:	1809883a 	mov	r4,r3
10008d18:	1d47883a 	add	r3,r3,r21
10008d1c:	20000015 	stw	zero,0(r4)
10008d20:	21000104 	addi	r4,r4,4
10008d24:	193ffd1e 	bne	r3,r4,10008d1c <__alt_data_end+0xf8008d1c>
10008d28:	8a000417 	ldw	r8,16(r17)
10008d2c:	89000504 	addi	r4,r17,20
10008d30:	a18007cc 	andi	r6,r20,31
10008d34:	4211883a 	add	r8,r8,r8
10008d38:	4211883a 	add	r8,r8,r8
10008d3c:	2211883a 	add	r8,r4,r8
10008d40:	30002326 	beq	r6,zero,10008dd0 <__lshift+0x128>
10008d44:	02400804 	movi	r9,32
10008d48:	4993c83a 	sub	r9,r9,r6
10008d4c:	000b883a 	mov	r5,zero
10008d50:	21c00017 	ldw	r7,0(r4)
10008d54:	1815883a 	mov	r10,r3
10008d58:	18c00104 	addi	r3,r3,4
10008d5c:	398e983a 	sll	r7,r7,r6
10008d60:	21000104 	addi	r4,r4,4
10008d64:	394ab03a 	or	r5,r7,r5
10008d68:	197fff15 	stw	r5,-4(r3)
10008d6c:	217fff17 	ldw	r5,-4(r4)
10008d70:	2a4ad83a 	srl	r5,r5,r9
10008d74:	223ff636 	bltu	r4,r8,10008d50 <__alt_data_end+0xf8008d50>
10008d78:	51400115 	stw	r5,4(r10)
10008d7c:	28001a1e 	bne	r5,zero,10008de8 <__lshift+0x140>
10008d80:	843fffc4 	addi	r16,r16,-1
10008d84:	14000415 	stw	r16,16(r2)
10008d88:	88000826 	beq	r17,zero,10008dac <__lshift+0x104>
10008d8c:	89000117 	ldw	r4,4(r17)
10008d90:	90c01317 	ldw	r3,76(r18)
10008d94:	2109883a 	add	r4,r4,r4
10008d98:	2109883a 	add	r4,r4,r4
10008d9c:	1907883a 	add	r3,r3,r4
10008da0:	19000017 	ldw	r4,0(r3)
10008da4:	89000015 	stw	r4,0(r17)
10008da8:	1c400015 	stw	r17,0(r3)
10008dac:	dfc00617 	ldw	ra,24(sp)
10008db0:	dd400517 	ldw	r21,20(sp)
10008db4:	dd000417 	ldw	r20,16(sp)
10008db8:	dcc00317 	ldw	r19,12(sp)
10008dbc:	dc800217 	ldw	r18,8(sp)
10008dc0:	dc400117 	ldw	r17,4(sp)
10008dc4:	dc000017 	ldw	r16,0(sp)
10008dc8:	dec00704 	addi	sp,sp,28
10008dcc:	f800283a 	ret
10008dd0:	21400017 	ldw	r5,0(r4)
10008dd4:	18c00104 	addi	r3,r3,4
10008dd8:	21000104 	addi	r4,r4,4
10008ddc:	197fff15 	stw	r5,-4(r3)
10008de0:	223ffb36 	bltu	r4,r8,10008dd0 <__alt_data_end+0xf8008dd0>
10008de4:	003fe606 	br	10008d80 <__alt_data_end+0xf8008d80>
10008de8:	9c000084 	addi	r16,r19,2
10008dec:	003fe406 	br	10008d80 <__alt_data_end+0xf8008d80>

10008df0 <__mcmp>:
10008df0:	20800417 	ldw	r2,16(r4)
10008df4:	28c00417 	ldw	r3,16(r5)
10008df8:	10c5c83a 	sub	r2,r2,r3
10008dfc:	1000111e 	bne	r2,zero,10008e44 <__mcmp+0x54>
10008e00:	18c7883a 	add	r3,r3,r3
10008e04:	18c7883a 	add	r3,r3,r3
10008e08:	21000504 	addi	r4,r4,20
10008e0c:	29400504 	addi	r5,r5,20
10008e10:	20c5883a 	add	r2,r4,r3
10008e14:	28cb883a 	add	r5,r5,r3
10008e18:	00000106 	br	10008e20 <__mcmp+0x30>
10008e1c:	20800a2e 	bgeu	r4,r2,10008e48 <__mcmp+0x58>
10008e20:	10bfff04 	addi	r2,r2,-4
10008e24:	297fff04 	addi	r5,r5,-4
10008e28:	11800017 	ldw	r6,0(r2)
10008e2c:	28c00017 	ldw	r3,0(r5)
10008e30:	30fffa26 	beq	r6,r3,10008e1c <__alt_data_end+0xf8008e1c>
10008e34:	30c00236 	bltu	r6,r3,10008e40 <__mcmp+0x50>
10008e38:	00800044 	movi	r2,1
10008e3c:	f800283a 	ret
10008e40:	00bfffc4 	movi	r2,-1
10008e44:	f800283a 	ret
10008e48:	0005883a 	mov	r2,zero
10008e4c:	f800283a 	ret

10008e50 <__mdiff>:
10008e50:	28c00417 	ldw	r3,16(r5)
10008e54:	30800417 	ldw	r2,16(r6)
10008e58:	defffa04 	addi	sp,sp,-24
10008e5c:	dcc00315 	stw	r19,12(sp)
10008e60:	dc800215 	stw	r18,8(sp)
10008e64:	dfc00515 	stw	ra,20(sp)
10008e68:	dd000415 	stw	r20,16(sp)
10008e6c:	dc400115 	stw	r17,4(sp)
10008e70:	dc000015 	stw	r16,0(sp)
10008e74:	1887c83a 	sub	r3,r3,r2
10008e78:	2825883a 	mov	r18,r5
10008e7c:	3027883a 	mov	r19,r6
10008e80:	1800141e 	bne	r3,zero,10008ed4 <__mdiff+0x84>
10008e84:	1085883a 	add	r2,r2,r2
10008e88:	1085883a 	add	r2,r2,r2
10008e8c:	2a000504 	addi	r8,r5,20
10008e90:	34000504 	addi	r16,r6,20
10008e94:	4087883a 	add	r3,r8,r2
10008e98:	8085883a 	add	r2,r16,r2
10008e9c:	00000106 	br	10008ea4 <__mdiff+0x54>
10008ea0:	40c0592e 	bgeu	r8,r3,10009008 <__mdiff+0x1b8>
10008ea4:	18ffff04 	addi	r3,r3,-4
10008ea8:	10bfff04 	addi	r2,r2,-4
10008eac:	19c00017 	ldw	r7,0(r3)
10008eb0:	11400017 	ldw	r5,0(r2)
10008eb4:	397ffa26 	beq	r7,r5,10008ea0 <__alt_data_end+0xf8008ea0>
10008eb8:	3940592e 	bgeu	r7,r5,10009020 <__mdiff+0x1d0>
10008ebc:	9005883a 	mov	r2,r18
10008ec0:	4023883a 	mov	r17,r8
10008ec4:	9825883a 	mov	r18,r19
10008ec8:	05000044 	movi	r20,1
10008ecc:	1027883a 	mov	r19,r2
10008ed0:	00000406 	br	10008ee4 <__mdiff+0x94>
10008ed4:	18005616 	blt	r3,zero,10009030 <__mdiff+0x1e0>
10008ed8:	34400504 	addi	r17,r6,20
10008edc:	2c000504 	addi	r16,r5,20
10008ee0:	0029883a 	mov	r20,zero
10008ee4:	91400117 	ldw	r5,4(r18)
10008ee8:	000846c0 	call	1000846c <_Balloc>
10008eec:	92400417 	ldw	r9,16(r18)
10008ef0:	9b000417 	ldw	r12,16(r19)
10008ef4:	12c00504 	addi	r11,r2,20
10008ef8:	4a51883a 	add	r8,r9,r9
10008efc:	6319883a 	add	r12,r12,r12
10008f00:	4211883a 	add	r8,r8,r8
10008f04:	6319883a 	add	r12,r12,r12
10008f08:	15000315 	stw	r20,12(r2)
10008f0c:	8211883a 	add	r8,r16,r8
10008f10:	8b19883a 	add	r12,r17,r12
10008f14:	0007883a 	mov	r3,zero
10008f18:	81400017 	ldw	r5,0(r16)
10008f1c:	89c00017 	ldw	r7,0(r17)
10008f20:	59800104 	addi	r6,r11,4
10008f24:	293fffcc 	andi	r4,r5,65535
10008f28:	20c7883a 	add	r3,r4,r3
10008f2c:	393fffcc 	andi	r4,r7,65535
10008f30:	1909c83a 	sub	r4,r3,r4
10008f34:	280ad43a 	srli	r5,r5,16
10008f38:	380ed43a 	srli	r7,r7,16
10008f3c:	2007d43a 	srai	r3,r4,16
10008f40:	213fffcc 	andi	r4,r4,65535
10008f44:	29cbc83a 	sub	r5,r5,r7
10008f48:	28c7883a 	add	r3,r5,r3
10008f4c:	180a943a 	slli	r5,r3,16
10008f50:	8c400104 	addi	r17,r17,4
10008f54:	84000104 	addi	r16,r16,4
10008f58:	2908b03a 	or	r4,r5,r4
10008f5c:	59000015 	stw	r4,0(r11)
10008f60:	1807d43a 	srai	r3,r3,16
10008f64:	3015883a 	mov	r10,r6
10008f68:	3017883a 	mov	r11,r6
10008f6c:	8b3fea36 	bltu	r17,r12,10008f18 <__alt_data_end+0xf8008f18>
10008f70:	8200162e 	bgeu	r16,r8,10008fcc <__mdiff+0x17c>
10008f74:	8017883a 	mov	r11,r16
10008f78:	59400017 	ldw	r5,0(r11)
10008f7c:	31800104 	addi	r6,r6,4
10008f80:	5ac00104 	addi	r11,r11,4
10008f84:	293fffcc 	andi	r4,r5,65535
10008f88:	20c7883a 	add	r3,r4,r3
10008f8c:	280ed43a 	srli	r7,r5,16
10008f90:	180bd43a 	srai	r5,r3,16
10008f94:	193fffcc 	andi	r4,r3,65535
10008f98:	3947883a 	add	r3,r7,r5
10008f9c:	180a943a 	slli	r5,r3,16
10008fa0:	1807d43a 	srai	r3,r3,16
10008fa4:	2908b03a 	or	r4,r5,r4
10008fa8:	313fff15 	stw	r4,-4(r6)
10008fac:	5a3ff236 	bltu	r11,r8,10008f78 <__alt_data_end+0xf8008f78>
10008fb0:	0406303a 	nor	r3,zero,r16
10008fb4:	1a07883a 	add	r3,r3,r8
10008fb8:	1806d0ba 	srli	r3,r3,2
10008fbc:	18c00044 	addi	r3,r3,1
10008fc0:	18c7883a 	add	r3,r3,r3
10008fc4:	18c7883a 	add	r3,r3,r3
10008fc8:	50d5883a 	add	r10,r10,r3
10008fcc:	50ffff04 	addi	r3,r10,-4
10008fd0:	2000041e 	bne	r4,zero,10008fe4 <__mdiff+0x194>
10008fd4:	18ffff04 	addi	r3,r3,-4
10008fd8:	19000017 	ldw	r4,0(r3)
10008fdc:	4a7fffc4 	addi	r9,r9,-1
10008fe0:	203ffc26 	beq	r4,zero,10008fd4 <__alt_data_end+0xf8008fd4>
10008fe4:	12400415 	stw	r9,16(r2)
10008fe8:	dfc00517 	ldw	ra,20(sp)
10008fec:	dd000417 	ldw	r20,16(sp)
10008ff0:	dcc00317 	ldw	r19,12(sp)
10008ff4:	dc800217 	ldw	r18,8(sp)
10008ff8:	dc400117 	ldw	r17,4(sp)
10008ffc:	dc000017 	ldw	r16,0(sp)
10009000:	dec00604 	addi	sp,sp,24
10009004:	f800283a 	ret
10009008:	000b883a 	mov	r5,zero
1000900c:	000846c0 	call	1000846c <_Balloc>
10009010:	00c00044 	movi	r3,1
10009014:	10c00415 	stw	r3,16(r2)
10009018:	10000515 	stw	zero,20(r2)
1000901c:	003ff206 	br	10008fe8 <__alt_data_end+0xf8008fe8>
10009020:	8023883a 	mov	r17,r16
10009024:	0029883a 	mov	r20,zero
10009028:	4021883a 	mov	r16,r8
1000902c:	003fad06 	br	10008ee4 <__alt_data_end+0xf8008ee4>
10009030:	9005883a 	mov	r2,r18
10009034:	94400504 	addi	r17,r18,20
10009038:	9c000504 	addi	r16,r19,20
1000903c:	9825883a 	mov	r18,r19
10009040:	05000044 	movi	r20,1
10009044:	1027883a 	mov	r19,r2
10009048:	003fa606 	br	10008ee4 <__alt_data_end+0xf8008ee4>

1000904c <__ulp>:
1000904c:	295ffc2c 	andhi	r5,r5,32752
10009050:	00bf3034 	movhi	r2,64704
10009054:	2887883a 	add	r3,r5,r2
10009058:	00c0020e 	bge	zero,r3,10009064 <__ulp+0x18>
1000905c:	0005883a 	mov	r2,zero
10009060:	f800283a 	ret
10009064:	00c7c83a 	sub	r3,zero,r3
10009068:	1807d53a 	srai	r3,r3,20
1000906c:	008004c4 	movi	r2,19
10009070:	10c00b0e 	bge	r2,r3,100090a0 <__ulp+0x54>
10009074:	18bffb04 	addi	r2,r3,-20
10009078:	01000784 	movi	r4,30
1000907c:	0007883a 	mov	r3,zero
10009080:	20800516 	blt	r4,r2,10009098 <__ulp+0x4c>
10009084:	010007c4 	movi	r4,31
10009088:	2089c83a 	sub	r4,r4,r2
1000908c:	00800044 	movi	r2,1
10009090:	1104983a 	sll	r2,r2,r4
10009094:	f800283a 	ret
10009098:	00800044 	movi	r2,1
1000909c:	f800283a 	ret
100090a0:	01400234 	movhi	r5,8
100090a4:	28c7d83a 	sra	r3,r5,r3
100090a8:	0005883a 	mov	r2,zero
100090ac:	f800283a 	ret

100090b0 <__b2d>:
100090b0:	defffa04 	addi	sp,sp,-24
100090b4:	dc000015 	stw	r16,0(sp)
100090b8:	24000417 	ldw	r16,16(r4)
100090bc:	dc400115 	stw	r17,4(sp)
100090c0:	24400504 	addi	r17,r4,20
100090c4:	8421883a 	add	r16,r16,r16
100090c8:	8421883a 	add	r16,r16,r16
100090cc:	8c21883a 	add	r16,r17,r16
100090d0:	dc800215 	stw	r18,8(sp)
100090d4:	84bfff17 	ldw	r18,-4(r16)
100090d8:	dd000415 	stw	r20,16(sp)
100090dc:	dcc00315 	stw	r19,12(sp)
100090e0:	9009883a 	mov	r4,r18
100090e4:	2829883a 	mov	r20,r5
100090e8:	dfc00515 	stw	ra,20(sp)
100090ec:	00087880 	call	10008788 <__hi0bits>
100090f0:	00c00804 	movi	r3,32
100090f4:	1889c83a 	sub	r4,r3,r2
100090f8:	a1000015 	stw	r4,0(r20)
100090fc:	01000284 	movi	r4,10
10009100:	84ffff04 	addi	r19,r16,-4
10009104:	20801216 	blt	r4,r2,10009150 <__b2d+0xa0>
10009108:	018002c4 	movi	r6,11
1000910c:	308dc83a 	sub	r6,r6,r2
10009110:	9186d83a 	srl	r3,r18,r6
10009114:	18cffc34 	orhi	r3,r3,16368
10009118:	8cc0212e 	bgeu	r17,r19,100091a0 <__b2d+0xf0>
1000911c:	813ffe17 	ldw	r4,-8(r16)
10009120:	218cd83a 	srl	r6,r4,r6
10009124:	10800544 	addi	r2,r2,21
10009128:	9084983a 	sll	r2,r18,r2
1000912c:	1184b03a 	or	r2,r2,r6
10009130:	dfc00517 	ldw	ra,20(sp)
10009134:	dd000417 	ldw	r20,16(sp)
10009138:	dcc00317 	ldw	r19,12(sp)
1000913c:	dc800217 	ldw	r18,8(sp)
10009140:	dc400117 	ldw	r17,4(sp)
10009144:	dc000017 	ldw	r16,0(sp)
10009148:	dec00604 	addi	sp,sp,24
1000914c:	f800283a 	ret
10009150:	8cc00f2e 	bgeu	r17,r19,10009190 <__b2d+0xe0>
10009154:	117ffd44 	addi	r5,r2,-11
10009158:	80bffe17 	ldw	r2,-8(r16)
1000915c:	28000e26 	beq	r5,zero,10009198 <__b2d+0xe8>
10009160:	1949c83a 	sub	r4,r3,r5
10009164:	9164983a 	sll	r18,r18,r5
10009168:	1106d83a 	srl	r3,r2,r4
1000916c:	81bffe04 	addi	r6,r16,-8
10009170:	948ffc34 	orhi	r18,r18,16368
10009174:	90c6b03a 	or	r3,r18,r3
10009178:	89800e2e 	bgeu	r17,r6,100091b4 <__b2d+0x104>
1000917c:	81bffd17 	ldw	r6,-12(r16)
10009180:	1144983a 	sll	r2,r2,r5
10009184:	310ad83a 	srl	r5,r6,r4
10009188:	2884b03a 	or	r2,r5,r2
1000918c:	003fe806 	br	10009130 <__alt_data_end+0xf8009130>
10009190:	10bffd44 	addi	r2,r2,-11
10009194:	1000041e 	bne	r2,zero,100091a8 <__b2d+0xf8>
10009198:	90cffc34 	orhi	r3,r18,16368
1000919c:	003fe406 	br	10009130 <__alt_data_end+0xf8009130>
100091a0:	000d883a 	mov	r6,zero
100091a4:	003fdf06 	br	10009124 <__alt_data_end+0xf8009124>
100091a8:	90a4983a 	sll	r18,r18,r2
100091ac:	0005883a 	mov	r2,zero
100091b0:	003ff906 	br	10009198 <__alt_data_end+0xf8009198>
100091b4:	1144983a 	sll	r2,r2,r5
100091b8:	003fdd06 	br	10009130 <__alt_data_end+0xf8009130>

100091bc <__d2b>:
100091bc:	defff804 	addi	sp,sp,-32
100091c0:	dc000215 	stw	r16,8(sp)
100091c4:	3021883a 	mov	r16,r6
100091c8:	dc400315 	stw	r17,12(sp)
100091cc:	8022907a 	slli	r17,r16,1
100091d0:	dd000615 	stw	r20,24(sp)
100091d4:	2829883a 	mov	r20,r5
100091d8:	01400044 	movi	r5,1
100091dc:	dcc00515 	stw	r19,20(sp)
100091e0:	dc800415 	stw	r18,16(sp)
100091e4:	dfc00715 	stw	ra,28(sp)
100091e8:	3825883a 	mov	r18,r7
100091ec:	8822d57a 	srli	r17,r17,21
100091f0:	000846c0 	call	1000846c <_Balloc>
100091f4:	1027883a 	mov	r19,r2
100091f8:	00800434 	movhi	r2,16
100091fc:	10bfffc4 	addi	r2,r2,-1
10009200:	808c703a 	and	r6,r16,r2
10009204:	88000126 	beq	r17,zero,1000920c <__d2b+0x50>
10009208:	31800434 	orhi	r6,r6,16
1000920c:	d9800015 	stw	r6,0(sp)
10009210:	a0002426 	beq	r20,zero,100092a4 <__d2b+0xe8>
10009214:	d9000104 	addi	r4,sp,4
10009218:	dd000115 	stw	r20,4(sp)
1000921c:	00087f00 	call	100087f0 <__lo0bits>
10009220:	d8c00017 	ldw	r3,0(sp)
10009224:	10002f1e 	bne	r2,zero,100092e4 <__d2b+0x128>
10009228:	d9000117 	ldw	r4,4(sp)
1000922c:	99000515 	stw	r4,20(r19)
10009230:	1821003a 	cmpeq	r16,r3,zero
10009234:	01000084 	movi	r4,2
10009238:	2421c83a 	sub	r16,r4,r16
1000923c:	98c00615 	stw	r3,24(r19)
10009240:	9c000415 	stw	r16,16(r19)
10009244:	88001f1e 	bne	r17,zero,100092c4 <__d2b+0x108>
10009248:	10bef384 	addi	r2,r2,-1074
1000924c:	90800015 	stw	r2,0(r18)
10009250:	00900034 	movhi	r2,16384
10009254:	10bfffc4 	addi	r2,r2,-1
10009258:	8085883a 	add	r2,r16,r2
1000925c:	1085883a 	add	r2,r2,r2
10009260:	1085883a 	add	r2,r2,r2
10009264:	9885883a 	add	r2,r19,r2
10009268:	11000517 	ldw	r4,20(r2)
1000926c:	8020917a 	slli	r16,r16,5
10009270:	00087880 	call	10008788 <__hi0bits>
10009274:	d8c00817 	ldw	r3,32(sp)
10009278:	8085c83a 	sub	r2,r16,r2
1000927c:	18800015 	stw	r2,0(r3)
10009280:	9805883a 	mov	r2,r19
10009284:	dfc00717 	ldw	ra,28(sp)
10009288:	dd000617 	ldw	r20,24(sp)
1000928c:	dcc00517 	ldw	r19,20(sp)
10009290:	dc800417 	ldw	r18,16(sp)
10009294:	dc400317 	ldw	r17,12(sp)
10009298:	dc000217 	ldw	r16,8(sp)
1000929c:	dec00804 	addi	sp,sp,32
100092a0:	f800283a 	ret
100092a4:	d809883a 	mov	r4,sp
100092a8:	00087f00 	call	100087f0 <__lo0bits>
100092ac:	d8c00017 	ldw	r3,0(sp)
100092b0:	04000044 	movi	r16,1
100092b4:	9c000415 	stw	r16,16(r19)
100092b8:	98c00515 	stw	r3,20(r19)
100092bc:	10800804 	addi	r2,r2,32
100092c0:	883fe126 	beq	r17,zero,10009248 <__alt_data_end+0xf8009248>
100092c4:	00c00d44 	movi	r3,53
100092c8:	8c7ef344 	addi	r17,r17,-1075
100092cc:	88a3883a 	add	r17,r17,r2
100092d0:	1885c83a 	sub	r2,r3,r2
100092d4:	d8c00817 	ldw	r3,32(sp)
100092d8:	94400015 	stw	r17,0(r18)
100092dc:	18800015 	stw	r2,0(r3)
100092e0:	003fe706 	br	10009280 <__alt_data_end+0xf8009280>
100092e4:	01000804 	movi	r4,32
100092e8:	2089c83a 	sub	r4,r4,r2
100092ec:	1908983a 	sll	r4,r3,r4
100092f0:	d9400117 	ldw	r5,4(sp)
100092f4:	1886d83a 	srl	r3,r3,r2
100092f8:	2148b03a 	or	r4,r4,r5
100092fc:	99000515 	stw	r4,20(r19)
10009300:	d8c00015 	stw	r3,0(sp)
10009304:	003fca06 	br	10009230 <__alt_data_end+0xf8009230>

10009308 <__ratio>:
10009308:	defff904 	addi	sp,sp,-28
1000930c:	dc400315 	stw	r17,12(sp)
10009310:	2823883a 	mov	r17,r5
10009314:	d9400104 	addi	r5,sp,4
10009318:	dfc00615 	stw	ra,24(sp)
1000931c:	dcc00515 	stw	r19,20(sp)
10009320:	dc800415 	stw	r18,16(sp)
10009324:	2027883a 	mov	r19,r4
10009328:	dc000215 	stw	r16,8(sp)
1000932c:	00090b00 	call	100090b0 <__b2d>
10009330:	d80b883a 	mov	r5,sp
10009334:	8809883a 	mov	r4,r17
10009338:	1025883a 	mov	r18,r2
1000933c:	1821883a 	mov	r16,r3
10009340:	00090b00 	call	100090b0 <__b2d>
10009344:	8a000417 	ldw	r8,16(r17)
10009348:	99000417 	ldw	r4,16(r19)
1000934c:	d9400117 	ldw	r5,4(sp)
10009350:	2209c83a 	sub	r4,r4,r8
10009354:	2010917a 	slli	r8,r4,5
10009358:	d9000017 	ldw	r4,0(sp)
1000935c:	2909c83a 	sub	r4,r5,r4
10009360:	4109883a 	add	r4,r8,r4
10009364:	01000e0e 	bge	zero,r4,100093a0 <__ratio+0x98>
10009368:	2008953a 	slli	r4,r4,20
1000936c:	2421883a 	add	r16,r4,r16
10009370:	100d883a 	mov	r6,r2
10009374:	180f883a 	mov	r7,r3
10009378:	9009883a 	mov	r4,r18
1000937c:	800b883a 	mov	r5,r16
10009380:	000d3f40 	call	1000d3f4 <__divdf3>
10009384:	dfc00617 	ldw	ra,24(sp)
10009388:	dcc00517 	ldw	r19,20(sp)
1000938c:	dc800417 	ldw	r18,16(sp)
10009390:	dc400317 	ldw	r17,12(sp)
10009394:	dc000217 	ldw	r16,8(sp)
10009398:	dec00704 	addi	sp,sp,28
1000939c:	f800283a 	ret
100093a0:	2008953a 	slli	r4,r4,20
100093a4:	1907c83a 	sub	r3,r3,r4
100093a8:	003ff106 	br	10009370 <__alt_data_end+0xf8009370>

100093ac <_mprec_log10>:
100093ac:	defffe04 	addi	sp,sp,-8
100093b0:	dc000015 	stw	r16,0(sp)
100093b4:	dfc00115 	stw	ra,4(sp)
100093b8:	008005c4 	movi	r2,23
100093bc:	2021883a 	mov	r16,r4
100093c0:	11000d0e 	bge	r2,r4,100093f8 <_mprec_log10+0x4c>
100093c4:	0005883a 	mov	r2,zero
100093c8:	00cffc34 	movhi	r3,16368
100093cc:	843fffc4 	addi	r16,r16,-1
100093d0:	000d883a 	mov	r6,zero
100093d4:	01d00934 	movhi	r7,16420
100093d8:	1009883a 	mov	r4,r2
100093dc:	180b883a 	mov	r5,r3
100093e0:	000e01c0 	call	1000e01c <__muldf3>
100093e4:	803ff91e 	bne	r16,zero,100093cc <__alt_data_end+0xf80093cc>
100093e8:	dfc00117 	ldw	ra,4(sp)
100093ec:	dc000017 	ldw	r16,0(sp)
100093f0:	dec00204 	addi	sp,sp,8
100093f4:	f800283a 	ret
100093f8:	202090fa 	slli	r16,r4,3
100093fc:	00840074 	movhi	r2,4097
10009400:	10892304 	addi	r2,r2,9356
10009404:	1421883a 	add	r16,r2,r16
10009408:	80800017 	ldw	r2,0(r16)
1000940c:	80c00117 	ldw	r3,4(r16)
10009410:	dfc00117 	ldw	ra,4(sp)
10009414:	dc000017 	ldw	r16,0(sp)
10009418:	dec00204 	addi	sp,sp,8
1000941c:	f800283a 	ret

10009420 <__copybits>:
10009420:	297fffc4 	addi	r5,r5,-1
10009424:	280fd17a 	srai	r7,r5,5
10009428:	30c00417 	ldw	r3,16(r6)
1000942c:	30800504 	addi	r2,r6,20
10009430:	39c00044 	addi	r7,r7,1
10009434:	18c7883a 	add	r3,r3,r3
10009438:	39cf883a 	add	r7,r7,r7
1000943c:	18c7883a 	add	r3,r3,r3
10009440:	39cf883a 	add	r7,r7,r7
10009444:	10c7883a 	add	r3,r2,r3
10009448:	21cf883a 	add	r7,r4,r7
1000944c:	10c00d2e 	bgeu	r2,r3,10009484 <__copybits+0x64>
10009450:	200b883a 	mov	r5,r4
10009454:	12000017 	ldw	r8,0(r2)
10009458:	29400104 	addi	r5,r5,4
1000945c:	10800104 	addi	r2,r2,4
10009460:	2a3fff15 	stw	r8,-4(r5)
10009464:	10fffb36 	bltu	r2,r3,10009454 <__alt_data_end+0xf8009454>
10009468:	1985c83a 	sub	r2,r3,r6
1000946c:	10bffac4 	addi	r2,r2,-21
10009470:	1004d0ba 	srli	r2,r2,2
10009474:	10800044 	addi	r2,r2,1
10009478:	1085883a 	add	r2,r2,r2
1000947c:	1085883a 	add	r2,r2,r2
10009480:	2089883a 	add	r4,r4,r2
10009484:	21c0032e 	bgeu	r4,r7,10009494 <__copybits+0x74>
10009488:	20000015 	stw	zero,0(r4)
1000948c:	21000104 	addi	r4,r4,4
10009490:	21fffd36 	bltu	r4,r7,10009488 <__alt_data_end+0xf8009488>
10009494:	f800283a 	ret

10009498 <__any_on>:
10009498:	20c00417 	ldw	r3,16(r4)
1000949c:	2805d17a 	srai	r2,r5,5
100094a0:	21000504 	addi	r4,r4,20
100094a4:	18800d0e 	bge	r3,r2,100094dc <__any_on+0x44>
100094a8:	18c7883a 	add	r3,r3,r3
100094ac:	18c7883a 	add	r3,r3,r3
100094b0:	20c7883a 	add	r3,r4,r3
100094b4:	20c0192e 	bgeu	r4,r3,1000951c <__any_on+0x84>
100094b8:	18bfff17 	ldw	r2,-4(r3)
100094bc:	18ffff04 	addi	r3,r3,-4
100094c0:	1000041e 	bne	r2,zero,100094d4 <__any_on+0x3c>
100094c4:	20c0142e 	bgeu	r4,r3,10009518 <__any_on+0x80>
100094c8:	18ffff04 	addi	r3,r3,-4
100094cc:	19400017 	ldw	r5,0(r3)
100094d0:	283ffc26 	beq	r5,zero,100094c4 <__alt_data_end+0xf80094c4>
100094d4:	00800044 	movi	r2,1
100094d8:	f800283a 	ret
100094dc:	10c00a0e 	bge	r2,r3,10009508 <__any_on+0x70>
100094e0:	1085883a 	add	r2,r2,r2
100094e4:	1085883a 	add	r2,r2,r2
100094e8:	294007cc 	andi	r5,r5,31
100094ec:	2087883a 	add	r3,r4,r2
100094f0:	283ff026 	beq	r5,zero,100094b4 <__alt_data_end+0xf80094b4>
100094f4:	19800017 	ldw	r6,0(r3)
100094f8:	3144d83a 	srl	r2,r6,r5
100094fc:	114a983a 	sll	r5,r2,r5
10009500:	317ff41e 	bne	r6,r5,100094d4 <__alt_data_end+0xf80094d4>
10009504:	003feb06 	br	100094b4 <__alt_data_end+0xf80094b4>
10009508:	1085883a 	add	r2,r2,r2
1000950c:	1085883a 	add	r2,r2,r2
10009510:	2087883a 	add	r3,r4,r2
10009514:	003fe706 	br	100094b4 <__alt_data_end+0xf80094b4>
10009518:	f800283a 	ret
1000951c:	0005883a 	mov	r2,zero
10009520:	f800283a 	ret

10009524 <_realloc_r>:
10009524:	defff604 	addi	sp,sp,-40
10009528:	dc800215 	stw	r18,8(sp)
1000952c:	dfc00915 	stw	ra,36(sp)
10009530:	df000815 	stw	fp,32(sp)
10009534:	ddc00715 	stw	r23,28(sp)
10009538:	dd800615 	stw	r22,24(sp)
1000953c:	dd400515 	stw	r21,20(sp)
10009540:	dd000415 	stw	r20,16(sp)
10009544:	dcc00315 	stw	r19,12(sp)
10009548:	dc400115 	stw	r17,4(sp)
1000954c:	dc000015 	stw	r16,0(sp)
10009550:	3025883a 	mov	r18,r6
10009554:	2800b726 	beq	r5,zero,10009834 <_realloc_r+0x310>
10009558:	282b883a 	mov	r21,r5
1000955c:	2029883a 	mov	r20,r4
10009560:	000f9880 	call	1000f988 <__malloc_lock>
10009564:	a8bfff17 	ldw	r2,-4(r21)
10009568:	043fff04 	movi	r16,-4
1000956c:	90c002c4 	addi	r3,r18,11
10009570:	01000584 	movi	r4,22
10009574:	acfffe04 	addi	r19,r21,-8
10009578:	1420703a 	and	r16,r2,r16
1000957c:	20c0332e 	bgeu	r4,r3,1000964c <_realloc_r+0x128>
10009580:	047ffe04 	movi	r17,-8
10009584:	1c62703a 	and	r17,r3,r17
10009588:	8807883a 	mov	r3,r17
1000958c:	88005816 	blt	r17,zero,100096f0 <_realloc_r+0x1cc>
10009590:	8c805736 	bltu	r17,r18,100096f0 <_realloc_r+0x1cc>
10009594:	80c0300e 	bge	r16,r3,10009658 <_realloc_r+0x134>
10009598:	07040074 	movhi	fp,4097
1000959c:	e70ad104 	addi	fp,fp,11076
100095a0:	e1c00217 	ldw	r7,8(fp)
100095a4:	9c09883a 	add	r4,r19,r16
100095a8:	22000117 	ldw	r8,4(r4)
100095ac:	21c06326 	beq	r4,r7,1000973c <_realloc_r+0x218>
100095b0:	017fff84 	movi	r5,-2
100095b4:	414a703a 	and	r5,r8,r5
100095b8:	214b883a 	add	r5,r4,r5
100095bc:	29800117 	ldw	r6,4(r5)
100095c0:	3180004c 	andi	r6,r6,1
100095c4:	30003f26 	beq	r6,zero,100096c4 <_realloc_r+0x1a0>
100095c8:	1080004c 	andi	r2,r2,1
100095cc:	10008326 	beq	r2,zero,100097dc <_realloc_r+0x2b8>
100095d0:	900b883a 	mov	r5,r18
100095d4:	a009883a 	mov	r4,r20
100095d8:	00077b00 	call	100077b0 <_malloc_r>
100095dc:	1025883a 	mov	r18,r2
100095e0:	10011e26 	beq	r2,zero,10009a5c <_realloc_r+0x538>
100095e4:	a93fff17 	ldw	r4,-4(r21)
100095e8:	10fffe04 	addi	r3,r2,-8
100095ec:	00bfff84 	movi	r2,-2
100095f0:	2084703a 	and	r2,r4,r2
100095f4:	9885883a 	add	r2,r19,r2
100095f8:	1880ee26 	beq	r3,r2,100099b4 <_realloc_r+0x490>
100095fc:	81bfff04 	addi	r6,r16,-4
10009600:	00800904 	movi	r2,36
10009604:	1180b836 	bltu	r2,r6,100098e8 <_realloc_r+0x3c4>
10009608:	00c004c4 	movi	r3,19
1000960c:	19809636 	bltu	r3,r6,10009868 <_realloc_r+0x344>
10009610:	9005883a 	mov	r2,r18
10009614:	a807883a 	mov	r3,r21
10009618:	19000017 	ldw	r4,0(r3)
1000961c:	11000015 	stw	r4,0(r2)
10009620:	19000117 	ldw	r4,4(r3)
10009624:	11000115 	stw	r4,4(r2)
10009628:	18c00217 	ldw	r3,8(r3)
1000962c:	10c00215 	stw	r3,8(r2)
10009630:	a80b883a 	mov	r5,r21
10009634:	a009883a 	mov	r4,r20
10009638:	0006bb80 	call	10006bb8 <_free_r>
1000963c:	a009883a 	mov	r4,r20
10009640:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10009644:	9005883a 	mov	r2,r18
10009648:	00001206 	br	10009694 <_realloc_r+0x170>
1000964c:	00c00404 	movi	r3,16
10009650:	1823883a 	mov	r17,r3
10009654:	003fce06 	br	10009590 <__alt_data_end+0xf8009590>
10009658:	a825883a 	mov	r18,r21
1000965c:	8445c83a 	sub	r2,r16,r17
10009660:	00c003c4 	movi	r3,15
10009664:	18802636 	bltu	r3,r2,10009700 <_realloc_r+0x1dc>
10009668:	99800117 	ldw	r6,4(r19)
1000966c:	9c07883a 	add	r3,r19,r16
10009670:	3180004c 	andi	r6,r6,1
10009674:	3420b03a 	or	r16,r6,r16
10009678:	9c000115 	stw	r16,4(r19)
1000967c:	18800117 	ldw	r2,4(r3)
10009680:	10800054 	ori	r2,r2,1
10009684:	18800115 	stw	r2,4(r3)
10009688:	a009883a 	mov	r4,r20
1000968c:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10009690:	9005883a 	mov	r2,r18
10009694:	dfc00917 	ldw	ra,36(sp)
10009698:	df000817 	ldw	fp,32(sp)
1000969c:	ddc00717 	ldw	r23,28(sp)
100096a0:	dd800617 	ldw	r22,24(sp)
100096a4:	dd400517 	ldw	r21,20(sp)
100096a8:	dd000417 	ldw	r20,16(sp)
100096ac:	dcc00317 	ldw	r19,12(sp)
100096b0:	dc800217 	ldw	r18,8(sp)
100096b4:	dc400117 	ldw	r17,4(sp)
100096b8:	dc000017 	ldw	r16,0(sp)
100096bc:	dec00a04 	addi	sp,sp,40
100096c0:	f800283a 	ret
100096c4:	017fff04 	movi	r5,-4
100096c8:	414a703a 	and	r5,r8,r5
100096cc:	814d883a 	add	r6,r16,r5
100096d0:	30c01f16 	blt	r6,r3,10009750 <_realloc_r+0x22c>
100096d4:	20800317 	ldw	r2,12(r4)
100096d8:	20c00217 	ldw	r3,8(r4)
100096dc:	a825883a 	mov	r18,r21
100096e0:	3021883a 	mov	r16,r6
100096e4:	18800315 	stw	r2,12(r3)
100096e8:	10c00215 	stw	r3,8(r2)
100096ec:	003fdb06 	br	1000965c <__alt_data_end+0xf800965c>
100096f0:	00800304 	movi	r2,12
100096f4:	a0800015 	stw	r2,0(r20)
100096f8:	0005883a 	mov	r2,zero
100096fc:	003fe506 	br	10009694 <__alt_data_end+0xf8009694>
10009700:	98c00117 	ldw	r3,4(r19)
10009704:	9c4b883a 	add	r5,r19,r17
10009708:	11000054 	ori	r4,r2,1
1000970c:	18c0004c 	andi	r3,r3,1
10009710:	1c62b03a 	or	r17,r3,r17
10009714:	9c400115 	stw	r17,4(r19)
10009718:	29000115 	stw	r4,4(r5)
1000971c:	2885883a 	add	r2,r5,r2
10009720:	10c00117 	ldw	r3,4(r2)
10009724:	29400204 	addi	r5,r5,8
10009728:	a009883a 	mov	r4,r20
1000972c:	18c00054 	ori	r3,r3,1
10009730:	10c00115 	stw	r3,4(r2)
10009734:	0006bb80 	call	10006bb8 <_free_r>
10009738:	003fd306 	br	10009688 <__alt_data_end+0xf8009688>
1000973c:	017fff04 	movi	r5,-4
10009740:	414a703a 	and	r5,r8,r5
10009744:	89800404 	addi	r6,r17,16
10009748:	8151883a 	add	r8,r16,r5
1000974c:	4180590e 	bge	r8,r6,100098b4 <_realloc_r+0x390>
10009750:	1080004c 	andi	r2,r2,1
10009754:	103f9e1e 	bne	r2,zero,100095d0 <__alt_data_end+0xf80095d0>
10009758:	adbffe17 	ldw	r22,-8(r21)
1000975c:	00bfff04 	movi	r2,-4
10009760:	9dadc83a 	sub	r22,r19,r22
10009764:	b1800117 	ldw	r6,4(r22)
10009768:	3084703a 	and	r2,r6,r2
1000976c:	20002026 	beq	r4,zero,100097f0 <_realloc_r+0x2cc>
10009770:	80af883a 	add	r23,r16,r2
10009774:	b96f883a 	add	r23,r23,r5
10009778:	21c05f26 	beq	r4,r7,100098f8 <_realloc_r+0x3d4>
1000977c:	b8c01c16 	blt	r23,r3,100097f0 <_realloc_r+0x2cc>
10009780:	20800317 	ldw	r2,12(r4)
10009784:	20c00217 	ldw	r3,8(r4)
10009788:	81bfff04 	addi	r6,r16,-4
1000978c:	01000904 	movi	r4,36
10009790:	18800315 	stw	r2,12(r3)
10009794:	10c00215 	stw	r3,8(r2)
10009798:	b0c00217 	ldw	r3,8(r22)
1000979c:	b0800317 	ldw	r2,12(r22)
100097a0:	b4800204 	addi	r18,r22,8
100097a4:	18800315 	stw	r2,12(r3)
100097a8:	10c00215 	stw	r3,8(r2)
100097ac:	21801b36 	bltu	r4,r6,1000981c <_realloc_r+0x2f8>
100097b0:	008004c4 	movi	r2,19
100097b4:	1180352e 	bgeu	r2,r6,1000988c <_realloc_r+0x368>
100097b8:	a8800017 	ldw	r2,0(r21)
100097bc:	b0800215 	stw	r2,8(r22)
100097c0:	a8800117 	ldw	r2,4(r21)
100097c4:	b0800315 	stw	r2,12(r22)
100097c8:	008006c4 	movi	r2,27
100097cc:	11807f36 	bltu	r2,r6,100099cc <_realloc_r+0x4a8>
100097d0:	b0800404 	addi	r2,r22,16
100097d4:	ad400204 	addi	r21,r21,8
100097d8:	00002d06 	br	10009890 <_realloc_r+0x36c>
100097dc:	adbffe17 	ldw	r22,-8(r21)
100097e0:	00bfff04 	movi	r2,-4
100097e4:	9dadc83a 	sub	r22,r19,r22
100097e8:	b1000117 	ldw	r4,4(r22)
100097ec:	2084703a 	and	r2,r4,r2
100097f0:	b03f7726 	beq	r22,zero,100095d0 <__alt_data_end+0xf80095d0>
100097f4:	80af883a 	add	r23,r16,r2
100097f8:	b8ff7516 	blt	r23,r3,100095d0 <__alt_data_end+0xf80095d0>
100097fc:	b0800317 	ldw	r2,12(r22)
10009800:	b0c00217 	ldw	r3,8(r22)
10009804:	81bfff04 	addi	r6,r16,-4
10009808:	01000904 	movi	r4,36
1000980c:	18800315 	stw	r2,12(r3)
10009810:	10c00215 	stw	r3,8(r2)
10009814:	b4800204 	addi	r18,r22,8
10009818:	21bfe52e 	bgeu	r4,r6,100097b0 <__alt_data_end+0xf80097b0>
1000981c:	a80b883a 	mov	r5,r21
10009820:	9009883a 	mov	r4,r18
10009824:	00081e80 	call	100081e8 <memmove>
10009828:	b821883a 	mov	r16,r23
1000982c:	b027883a 	mov	r19,r22
10009830:	003f8a06 	br	1000965c <__alt_data_end+0xf800965c>
10009834:	300b883a 	mov	r5,r6
10009838:	dfc00917 	ldw	ra,36(sp)
1000983c:	df000817 	ldw	fp,32(sp)
10009840:	ddc00717 	ldw	r23,28(sp)
10009844:	dd800617 	ldw	r22,24(sp)
10009848:	dd400517 	ldw	r21,20(sp)
1000984c:	dd000417 	ldw	r20,16(sp)
10009850:	dcc00317 	ldw	r19,12(sp)
10009854:	dc800217 	ldw	r18,8(sp)
10009858:	dc400117 	ldw	r17,4(sp)
1000985c:	dc000017 	ldw	r16,0(sp)
10009860:	dec00a04 	addi	sp,sp,40
10009864:	00077b01 	jmpi	100077b0 <_malloc_r>
10009868:	a8c00017 	ldw	r3,0(r21)
1000986c:	90c00015 	stw	r3,0(r18)
10009870:	a8c00117 	ldw	r3,4(r21)
10009874:	90c00115 	stw	r3,4(r18)
10009878:	00c006c4 	movi	r3,27
1000987c:	19804536 	bltu	r3,r6,10009994 <_realloc_r+0x470>
10009880:	90800204 	addi	r2,r18,8
10009884:	a8c00204 	addi	r3,r21,8
10009888:	003f6306 	br	10009618 <__alt_data_end+0xf8009618>
1000988c:	9005883a 	mov	r2,r18
10009890:	a8c00017 	ldw	r3,0(r21)
10009894:	b821883a 	mov	r16,r23
10009898:	b027883a 	mov	r19,r22
1000989c:	10c00015 	stw	r3,0(r2)
100098a0:	a8c00117 	ldw	r3,4(r21)
100098a4:	10c00115 	stw	r3,4(r2)
100098a8:	a8c00217 	ldw	r3,8(r21)
100098ac:	10c00215 	stw	r3,8(r2)
100098b0:	003f6a06 	br	1000965c <__alt_data_end+0xf800965c>
100098b4:	9c67883a 	add	r19,r19,r17
100098b8:	4445c83a 	sub	r2,r8,r17
100098bc:	e4c00215 	stw	r19,8(fp)
100098c0:	10800054 	ori	r2,r2,1
100098c4:	98800115 	stw	r2,4(r19)
100098c8:	a8bfff17 	ldw	r2,-4(r21)
100098cc:	a009883a 	mov	r4,r20
100098d0:	1080004c 	andi	r2,r2,1
100098d4:	1462b03a 	or	r17,r2,r17
100098d8:	ac7fff15 	stw	r17,-4(r21)
100098dc:	000f9ac0 	call	1000f9ac <__malloc_unlock>
100098e0:	a805883a 	mov	r2,r21
100098e4:	003f6b06 	br	10009694 <__alt_data_end+0xf8009694>
100098e8:	a80b883a 	mov	r5,r21
100098ec:	9009883a 	mov	r4,r18
100098f0:	00081e80 	call	100081e8 <memmove>
100098f4:	003f4e06 	br	10009630 <__alt_data_end+0xf8009630>
100098f8:	89000404 	addi	r4,r17,16
100098fc:	b93fbc16 	blt	r23,r4,100097f0 <__alt_data_end+0xf80097f0>
10009900:	b0800317 	ldw	r2,12(r22)
10009904:	b0c00217 	ldw	r3,8(r22)
10009908:	81bfff04 	addi	r6,r16,-4
1000990c:	01000904 	movi	r4,36
10009910:	18800315 	stw	r2,12(r3)
10009914:	10c00215 	stw	r3,8(r2)
10009918:	b4800204 	addi	r18,r22,8
1000991c:	21804336 	bltu	r4,r6,10009a2c <_realloc_r+0x508>
10009920:	008004c4 	movi	r2,19
10009924:	11803f2e 	bgeu	r2,r6,10009a24 <_realloc_r+0x500>
10009928:	a8800017 	ldw	r2,0(r21)
1000992c:	b0800215 	stw	r2,8(r22)
10009930:	a8800117 	ldw	r2,4(r21)
10009934:	b0800315 	stw	r2,12(r22)
10009938:	008006c4 	movi	r2,27
1000993c:	11803f36 	bltu	r2,r6,10009a3c <_realloc_r+0x518>
10009940:	b0800404 	addi	r2,r22,16
10009944:	ad400204 	addi	r21,r21,8
10009948:	a8c00017 	ldw	r3,0(r21)
1000994c:	10c00015 	stw	r3,0(r2)
10009950:	a8c00117 	ldw	r3,4(r21)
10009954:	10c00115 	stw	r3,4(r2)
10009958:	a8c00217 	ldw	r3,8(r21)
1000995c:	10c00215 	stw	r3,8(r2)
10009960:	b447883a 	add	r3,r22,r17
10009964:	bc45c83a 	sub	r2,r23,r17
10009968:	e0c00215 	stw	r3,8(fp)
1000996c:	10800054 	ori	r2,r2,1
10009970:	18800115 	stw	r2,4(r3)
10009974:	b0800117 	ldw	r2,4(r22)
10009978:	a009883a 	mov	r4,r20
1000997c:	1080004c 	andi	r2,r2,1
10009980:	1462b03a 	or	r17,r2,r17
10009984:	b4400115 	stw	r17,4(r22)
10009988:	000f9ac0 	call	1000f9ac <__malloc_unlock>
1000998c:	9005883a 	mov	r2,r18
10009990:	003f4006 	br	10009694 <__alt_data_end+0xf8009694>
10009994:	a8c00217 	ldw	r3,8(r21)
10009998:	90c00215 	stw	r3,8(r18)
1000999c:	a8c00317 	ldw	r3,12(r21)
100099a0:	90c00315 	stw	r3,12(r18)
100099a4:	30801126 	beq	r6,r2,100099ec <_realloc_r+0x4c8>
100099a8:	90800404 	addi	r2,r18,16
100099ac:	a8c00404 	addi	r3,r21,16
100099b0:	003f1906 	br	10009618 <__alt_data_end+0xf8009618>
100099b4:	90ffff17 	ldw	r3,-4(r18)
100099b8:	00bfff04 	movi	r2,-4
100099bc:	a825883a 	mov	r18,r21
100099c0:	1884703a 	and	r2,r3,r2
100099c4:	80a1883a 	add	r16,r16,r2
100099c8:	003f2406 	br	1000965c <__alt_data_end+0xf800965c>
100099cc:	a8800217 	ldw	r2,8(r21)
100099d0:	b0800415 	stw	r2,16(r22)
100099d4:	a8800317 	ldw	r2,12(r21)
100099d8:	b0800515 	stw	r2,20(r22)
100099dc:	31000a26 	beq	r6,r4,10009a08 <_realloc_r+0x4e4>
100099e0:	b0800604 	addi	r2,r22,24
100099e4:	ad400404 	addi	r21,r21,16
100099e8:	003fa906 	br	10009890 <__alt_data_end+0xf8009890>
100099ec:	a9000417 	ldw	r4,16(r21)
100099f0:	90800604 	addi	r2,r18,24
100099f4:	a8c00604 	addi	r3,r21,24
100099f8:	91000415 	stw	r4,16(r18)
100099fc:	a9000517 	ldw	r4,20(r21)
10009a00:	91000515 	stw	r4,20(r18)
10009a04:	003f0406 	br	10009618 <__alt_data_end+0xf8009618>
10009a08:	a8c00417 	ldw	r3,16(r21)
10009a0c:	ad400604 	addi	r21,r21,24
10009a10:	b0800804 	addi	r2,r22,32
10009a14:	b0c00615 	stw	r3,24(r22)
10009a18:	a8ffff17 	ldw	r3,-4(r21)
10009a1c:	b0c00715 	stw	r3,28(r22)
10009a20:	003f9b06 	br	10009890 <__alt_data_end+0xf8009890>
10009a24:	9005883a 	mov	r2,r18
10009a28:	003fc706 	br	10009948 <__alt_data_end+0xf8009948>
10009a2c:	a80b883a 	mov	r5,r21
10009a30:	9009883a 	mov	r4,r18
10009a34:	00081e80 	call	100081e8 <memmove>
10009a38:	003fc906 	br	10009960 <__alt_data_end+0xf8009960>
10009a3c:	a8800217 	ldw	r2,8(r21)
10009a40:	b0800415 	stw	r2,16(r22)
10009a44:	a8800317 	ldw	r2,12(r21)
10009a48:	b0800515 	stw	r2,20(r22)
10009a4c:	31000726 	beq	r6,r4,10009a6c <_realloc_r+0x548>
10009a50:	b0800604 	addi	r2,r22,24
10009a54:	ad400404 	addi	r21,r21,16
10009a58:	003fbb06 	br	10009948 <__alt_data_end+0xf8009948>
10009a5c:	a009883a 	mov	r4,r20
10009a60:	000f9ac0 	call	1000f9ac <__malloc_unlock>
10009a64:	0005883a 	mov	r2,zero
10009a68:	003f0a06 	br	10009694 <__alt_data_end+0xf8009694>
10009a6c:	a8c00417 	ldw	r3,16(r21)
10009a70:	ad400604 	addi	r21,r21,24
10009a74:	b0800804 	addi	r2,r22,32
10009a78:	b0c00615 	stw	r3,24(r22)
10009a7c:	a8ffff17 	ldw	r3,-4(r21)
10009a80:	b0c00715 	stw	r3,28(r22)
10009a84:	003fb006 	br	10009948 <__alt_data_end+0xf8009948>

10009a88 <__fpclassifyd>:
10009a88:	00a00034 	movhi	r2,32768
10009a8c:	10bfffc4 	addi	r2,r2,-1
10009a90:	2884703a 	and	r2,r5,r2
10009a94:	10000726 	beq	r2,zero,10009ab4 <__fpclassifyd+0x2c>
10009a98:	00fffc34 	movhi	r3,65520
10009a9c:	019ff834 	movhi	r6,32736
10009aa0:	28c7883a 	add	r3,r5,r3
10009aa4:	31bfffc4 	addi	r6,r6,-1
10009aa8:	30c00536 	bltu	r6,r3,10009ac0 <__fpclassifyd+0x38>
10009aac:	00800104 	movi	r2,4
10009ab0:	f800283a 	ret
10009ab4:	2000021e 	bne	r4,zero,10009ac0 <__fpclassifyd+0x38>
10009ab8:	00800084 	movi	r2,2
10009abc:	f800283a 	ret
10009ac0:	00dffc34 	movhi	r3,32752
10009ac4:	019ff834 	movhi	r6,32736
10009ac8:	28cb883a 	add	r5,r5,r3
10009acc:	31bfffc4 	addi	r6,r6,-1
10009ad0:	317ff62e 	bgeu	r6,r5,10009aac <__alt_data_end+0xf8009aac>
10009ad4:	01400434 	movhi	r5,16
10009ad8:	297fffc4 	addi	r5,r5,-1
10009adc:	28800236 	bltu	r5,r2,10009ae8 <__fpclassifyd+0x60>
10009ae0:	008000c4 	movi	r2,3
10009ae4:	f800283a 	ret
10009ae8:	10c00226 	beq	r2,r3,10009af4 <__fpclassifyd+0x6c>
10009aec:	0005883a 	mov	r2,zero
10009af0:	f800283a 	ret
10009af4:	2005003a 	cmpeq	r2,r4,zero
10009af8:	f800283a 	ret

10009afc <_sbrk_r>:
10009afc:	defffd04 	addi	sp,sp,-12
10009b00:	dc000015 	stw	r16,0(sp)
10009b04:	04040074 	movhi	r16,4097
10009b08:	dc400115 	stw	r17,4(sp)
10009b0c:	84172904 	addi	r16,r16,23716
10009b10:	2023883a 	mov	r17,r4
10009b14:	2809883a 	mov	r4,r5
10009b18:	dfc00215 	stw	ra,8(sp)
10009b1c:	80000015 	stw	zero,0(r16)
10009b20:	000fb940 	call	1000fb94 <sbrk>
10009b24:	00ffffc4 	movi	r3,-1
10009b28:	10c00526 	beq	r2,r3,10009b40 <_sbrk_r+0x44>
10009b2c:	dfc00217 	ldw	ra,8(sp)
10009b30:	dc400117 	ldw	r17,4(sp)
10009b34:	dc000017 	ldw	r16,0(sp)
10009b38:	dec00304 	addi	sp,sp,12
10009b3c:	f800283a 	ret
10009b40:	80c00017 	ldw	r3,0(r16)
10009b44:	183ff926 	beq	r3,zero,10009b2c <__alt_data_end+0xf8009b2c>
10009b48:	88c00015 	stw	r3,0(r17)
10009b4c:	003ff706 	br	10009b2c <__alt_data_end+0xf8009b2c>

10009b50 <__sread>:
10009b50:	defffe04 	addi	sp,sp,-8
10009b54:	dc000015 	stw	r16,0(sp)
10009b58:	2821883a 	mov	r16,r5
10009b5c:	2940038f 	ldh	r5,14(r5)
10009b60:	dfc00115 	stw	ra,4(sp)
10009b64:	000ba0c0 	call	1000ba0c <_read_r>
10009b68:	10000716 	blt	r2,zero,10009b88 <__sread+0x38>
10009b6c:	80c01417 	ldw	r3,80(r16)
10009b70:	1887883a 	add	r3,r3,r2
10009b74:	80c01415 	stw	r3,80(r16)
10009b78:	dfc00117 	ldw	ra,4(sp)
10009b7c:	dc000017 	ldw	r16,0(sp)
10009b80:	dec00204 	addi	sp,sp,8
10009b84:	f800283a 	ret
10009b88:	80c0030b 	ldhu	r3,12(r16)
10009b8c:	18fbffcc 	andi	r3,r3,61439
10009b90:	80c0030d 	sth	r3,12(r16)
10009b94:	dfc00117 	ldw	ra,4(sp)
10009b98:	dc000017 	ldw	r16,0(sp)
10009b9c:	dec00204 	addi	sp,sp,8
10009ba0:	f800283a 	ret

10009ba4 <__seofread>:
10009ba4:	0005883a 	mov	r2,zero
10009ba8:	f800283a 	ret

10009bac <__swrite>:
10009bac:	2880030b 	ldhu	r2,12(r5)
10009bb0:	defffb04 	addi	sp,sp,-20
10009bb4:	dcc00315 	stw	r19,12(sp)
10009bb8:	dc800215 	stw	r18,8(sp)
10009bbc:	dc400115 	stw	r17,4(sp)
10009bc0:	dc000015 	stw	r16,0(sp)
10009bc4:	dfc00415 	stw	ra,16(sp)
10009bc8:	10c0400c 	andi	r3,r2,256
10009bcc:	2821883a 	mov	r16,r5
10009bd0:	2023883a 	mov	r17,r4
10009bd4:	3025883a 	mov	r18,r6
10009bd8:	3827883a 	mov	r19,r7
10009bdc:	18000526 	beq	r3,zero,10009bf4 <__swrite+0x48>
10009be0:	2940038f 	ldh	r5,14(r5)
10009be4:	01c00084 	movi	r7,2
10009be8:	000d883a 	mov	r6,zero
10009bec:	000b9ac0 	call	1000b9ac <_lseek_r>
10009bf0:	8080030b 	ldhu	r2,12(r16)
10009bf4:	8140038f 	ldh	r5,14(r16)
10009bf8:	10bbffcc 	andi	r2,r2,61439
10009bfc:	980f883a 	mov	r7,r19
10009c00:	900d883a 	mov	r6,r18
10009c04:	8809883a 	mov	r4,r17
10009c08:	8080030d 	sth	r2,12(r16)
10009c0c:	dfc00417 	ldw	ra,16(sp)
10009c10:	dcc00317 	ldw	r19,12(sp)
10009c14:	dc800217 	ldw	r18,8(sp)
10009c18:	dc400117 	ldw	r17,4(sp)
10009c1c:	dc000017 	ldw	r16,0(sp)
10009c20:	dec00504 	addi	sp,sp,20
10009c24:	000b4601 	jmpi	1000b460 <_write_r>

10009c28 <__sseek>:
10009c28:	defffe04 	addi	sp,sp,-8
10009c2c:	dc000015 	stw	r16,0(sp)
10009c30:	2821883a 	mov	r16,r5
10009c34:	2940038f 	ldh	r5,14(r5)
10009c38:	dfc00115 	stw	ra,4(sp)
10009c3c:	000b9ac0 	call	1000b9ac <_lseek_r>
10009c40:	00ffffc4 	movi	r3,-1
10009c44:	10c00826 	beq	r2,r3,10009c68 <__sseek+0x40>
10009c48:	80c0030b 	ldhu	r3,12(r16)
10009c4c:	80801415 	stw	r2,80(r16)
10009c50:	18c40014 	ori	r3,r3,4096
10009c54:	80c0030d 	sth	r3,12(r16)
10009c58:	dfc00117 	ldw	ra,4(sp)
10009c5c:	dc000017 	ldw	r16,0(sp)
10009c60:	dec00204 	addi	sp,sp,8
10009c64:	f800283a 	ret
10009c68:	80c0030b 	ldhu	r3,12(r16)
10009c6c:	18fbffcc 	andi	r3,r3,61439
10009c70:	80c0030d 	sth	r3,12(r16)
10009c74:	dfc00117 	ldw	ra,4(sp)
10009c78:	dc000017 	ldw	r16,0(sp)
10009c7c:	dec00204 	addi	sp,sp,8
10009c80:	f800283a 	ret

10009c84 <__sclose>:
10009c84:	2940038f 	ldh	r5,14(r5)
10009c88:	000b4c01 	jmpi	1000b4c0 <_close_r>

10009c8c <strcmp>:
10009c8c:	2144b03a 	or	r2,r4,r5
10009c90:	108000cc 	andi	r2,r2,3
10009c94:	1000171e 	bne	r2,zero,10009cf4 <strcmp+0x68>
10009c98:	20800017 	ldw	r2,0(r4)
10009c9c:	28c00017 	ldw	r3,0(r5)
10009ca0:	10c0141e 	bne	r2,r3,10009cf4 <strcmp+0x68>
10009ca4:	027fbff4 	movhi	r9,65279
10009ca8:	4a7fbfc4 	addi	r9,r9,-257
10009cac:	0086303a 	nor	r3,zero,r2
10009cb0:	02202074 	movhi	r8,32897
10009cb4:	1245883a 	add	r2,r2,r9
10009cb8:	42202004 	addi	r8,r8,-32640
10009cbc:	10c4703a 	and	r2,r2,r3
10009cc0:	1204703a 	and	r2,r2,r8
10009cc4:	10000226 	beq	r2,zero,10009cd0 <strcmp+0x44>
10009cc8:	00002306 	br	10009d58 <strcmp+0xcc>
10009ccc:	1000221e 	bne	r2,zero,10009d58 <strcmp+0xcc>
10009cd0:	21000104 	addi	r4,r4,4
10009cd4:	20c00017 	ldw	r3,0(r4)
10009cd8:	29400104 	addi	r5,r5,4
10009cdc:	29800017 	ldw	r6,0(r5)
10009ce0:	1a4f883a 	add	r7,r3,r9
10009ce4:	00c4303a 	nor	r2,zero,r3
10009ce8:	3884703a 	and	r2,r7,r2
10009cec:	1204703a 	and	r2,r2,r8
10009cf0:	19bff626 	beq	r3,r6,10009ccc <__alt_data_end+0xf8009ccc>
10009cf4:	20800003 	ldbu	r2,0(r4)
10009cf8:	10c03fcc 	andi	r3,r2,255
10009cfc:	18c0201c 	xori	r3,r3,128
10009d00:	18ffe004 	addi	r3,r3,-128
10009d04:	18000c26 	beq	r3,zero,10009d38 <strcmp+0xac>
10009d08:	29800007 	ldb	r6,0(r5)
10009d0c:	19800326 	beq	r3,r6,10009d1c <strcmp+0x90>
10009d10:	00001306 	br	10009d60 <strcmp+0xd4>
10009d14:	29800007 	ldb	r6,0(r5)
10009d18:	11800b1e 	bne	r2,r6,10009d48 <strcmp+0xbc>
10009d1c:	21000044 	addi	r4,r4,1
10009d20:	20c00003 	ldbu	r3,0(r4)
10009d24:	29400044 	addi	r5,r5,1
10009d28:	18803fcc 	andi	r2,r3,255
10009d2c:	1080201c 	xori	r2,r2,128
10009d30:	10bfe004 	addi	r2,r2,-128
10009d34:	103ff71e 	bne	r2,zero,10009d14 <__alt_data_end+0xf8009d14>
10009d38:	0007883a 	mov	r3,zero
10009d3c:	28800003 	ldbu	r2,0(r5)
10009d40:	1885c83a 	sub	r2,r3,r2
10009d44:	f800283a 	ret
10009d48:	28800003 	ldbu	r2,0(r5)
10009d4c:	18c03fcc 	andi	r3,r3,255
10009d50:	1885c83a 	sub	r2,r3,r2
10009d54:	f800283a 	ret
10009d58:	0005883a 	mov	r2,zero
10009d5c:	f800283a 	ret
10009d60:	10c03fcc 	andi	r3,r2,255
10009d64:	003ff506 	br	10009d3c <__alt_data_end+0xf8009d3c>

10009d68 <__sprint_r.part.0>:
10009d68:	28801917 	ldw	r2,100(r5)
10009d6c:	defff604 	addi	sp,sp,-40
10009d70:	dd400515 	stw	r21,20(sp)
10009d74:	dfc00915 	stw	ra,36(sp)
10009d78:	df000815 	stw	fp,32(sp)
10009d7c:	ddc00715 	stw	r23,28(sp)
10009d80:	dd800615 	stw	r22,24(sp)
10009d84:	dd000415 	stw	r20,16(sp)
10009d88:	dcc00315 	stw	r19,12(sp)
10009d8c:	dc800215 	stw	r18,8(sp)
10009d90:	dc400115 	stw	r17,4(sp)
10009d94:	dc000015 	stw	r16,0(sp)
10009d98:	1088000c 	andi	r2,r2,8192
10009d9c:	302b883a 	mov	r21,r6
10009da0:	10002e26 	beq	r2,zero,10009e5c <__sprint_r.part.0+0xf4>
10009da4:	30800217 	ldw	r2,8(r6)
10009da8:	35800017 	ldw	r22,0(r6)
10009dac:	10002926 	beq	r2,zero,10009e54 <__sprint_r.part.0+0xec>
10009db0:	2827883a 	mov	r19,r5
10009db4:	2029883a 	mov	r20,r4
10009db8:	b5c00104 	addi	r23,r22,4
10009dbc:	04bfffc4 	movi	r18,-1
10009dc0:	bc400017 	ldw	r17,0(r23)
10009dc4:	b4000017 	ldw	r16,0(r22)
10009dc8:	0039883a 	mov	fp,zero
10009dcc:	8822d0ba 	srli	r17,r17,2
10009dd0:	8800031e 	bne	r17,zero,10009de0 <__sprint_r.part.0+0x78>
10009dd4:	00001806 	br	10009e38 <__sprint_r.part.0+0xd0>
10009dd8:	84000104 	addi	r16,r16,4
10009ddc:	8f001526 	beq	r17,fp,10009e34 <__sprint_r.part.0+0xcc>
10009de0:	81400017 	ldw	r5,0(r16)
10009de4:	980d883a 	mov	r6,r19
10009de8:	a009883a 	mov	r4,r20
10009dec:	000b8580 	call	1000b858 <_fputwc_r>
10009df0:	e7000044 	addi	fp,fp,1
10009df4:	14bff81e 	bne	r2,r18,10009dd8 <__alt_data_end+0xf8009dd8>
10009df8:	9005883a 	mov	r2,r18
10009dfc:	a8000215 	stw	zero,8(r21)
10009e00:	a8000115 	stw	zero,4(r21)
10009e04:	dfc00917 	ldw	ra,36(sp)
10009e08:	df000817 	ldw	fp,32(sp)
10009e0c:	ddc00717 	ldw	r23,28(sp)
10009e10:	dd800617 	ldw	r22,24(sp)
10009e14:	dd400517 	ldw	r21,20(sp)
10009e18:	dd000417 	ldw	r20,16(sp)
10009e1c:	dcc00317 	ldw	r19,12(sp)
10009e20:	dc800217 	ldw	r18,8(sp)
10009e24:	dc400117 	ldw	r17,4(sp)
10009e28:	dc000017 	ldw	r16,0(sp)
10009e2c:	dec00a04 	addi	sp,sp,40
10009e30:	f800283a 	ret
10009e34:	a8800217 	ldw	r2,8(r21)
10009e38:	8c63883a 	add	r17,r17,r17
10009e3c:	8c63883a 	add	r17,r17,r17
10009e40:	1445c83a 	sub	r2,r2,r17
10009e44:	a8800215 	stw	r2,8(r21)
10009e48:	b5800204 	addi	r22,r22,8
10009e4c:	bdc00204 	addi	r23,r23,8
10009e50:	103fdb1e 	bne	r2,zero,10009dc0 <__alt_data_end+0xf8009dc0>
10009e54:	0005883a 	mov	r2,zero
10009e58:	003fe806 	br	10009dfc <__alt_data_end+0xf8009dfc>
10009e5c:	0006ec80 	call	10006ec8 <__sfvwrite_r>
10009e60:	003fe606 	br	10009dfc <__alt_data_end+0xf8009dfc>

10009e64 <__sprint_r>:
10009e64:	30c00217 	ldw	r3,8(r6)
10009e68:	18000126 	beq	r3,zero,10009e70 <__sprint_r+0xc>
10009e6c:	0009d681 	jmpi	10009d68 <__sprint_r.part.0>
10009e70:	30000115 	stw	zero,4(r6)
10009e74:	0005883a 	mov	r2,zero
10009e78:	f800283a 	ret

10009e7c <___vfiprintf_internal_r>:
10009e7c:	deffca04 	addi	sp,sp,-216
10009e80:	dd403115 	stw	r21,196(sp)
10009e84:	dfc03515 	stw	ra,212(sp)
10009e88:	df003415 	stw	fp,208(sp)
10009e8c:	ddc03315 	stw	r23,204(sp)
10009e90:	dd803215 	stw	r22,200(sp)
10009e94:	dd003015 	stw	r20,192(sp)
10009e98:	dcc02f15 	stw	r19,188(sp)
10009e9c:	dc802e15 	stw	r18,184(sp)
10009ea0:	dc402d15 	stw	r17,180(sp)
10009ea4:	dc002c15 	stw	r16,176(sp)
10009ea8:	d9002115 	stw	r4,132(sp)
10009eac:	d9402015 	stw	r5,128(sp)
10009eb0:	d9c02215 	stw	r7,136(sp)
10009eb4:	302b883a 	mov	r21,r6
10009eb8:	20000226 	beq	r4,zero,10009ec4 <___vfiprintf_internal_r+0x48>
10009ebc:	20800e17 	ldw	r2,56(r4)
10009ec0:	1000cf26 	beq	r2,zero,1000a200 <___vfiprintf_internal_r+0x384>
10009ec4:	d8c02017 	ldw	r3,128(sp)
10009ec8:	1880030b 	ldhu	r2,12(r3)
10009ecc:	10c8000c 	andi	r3,r2,8192
10009ed0:	1800071e 	bne	r3,zero,10009ef0 <___vfiprintf_internal_r+0x74>
10009ed4:	d9402017 	ldw	r5,128(sp)
10009ed8:	00f7ffc4 	movi	r3,-8193
10009edc:	10880014 	ori	r2,r2,8192
10009ee0:	29001917 	ldw	r4,100(r5)
10009ee4:	2880030d 	sth	r2,12(r5)
10009ee8:	20c6703a 	and	r3,r4,r3
10009eec:	28c01915 	stw	r3,100(r5)
10009ef0:	10c0020c 	andi	r3,r2,8
10009ef4:	1800a526 	beq	r3,zero,1000a18c <___vfiprintf_internal_r+0x310>
10009ef8:	d9002017 	ldw	r4,128(sp)
10009efc:	20c00417 	ldw	r3,16(r4)
10009f00:	1800a226 	beq	r3,zero,1000a18c <___vfiprintf_internal_r+0x310>
10009f04:	1080068c 	andi	r2,r2,26
10009f08:	00c00284 	movi	r3,10
10009f0c:	10c0a826 	beq	r2,r3,1000a1b0 <___vfiprintf_internal_r+0x334>
10009f10:	d9001a04 	addi	r4,sp,104
10009f14:	d94019c4 	addi	r5,sp,103
10009f18:	04840074 	movhi	r18,4097
10009f1c:	2145c83a 	sub	r2,r4,r5
10009f20:	94895504 	addi	r18,r18,9556
10009f24:	d9001e15 	stw	r4,120(sp)
10009f28:	d9401f15 	stw	r5,124(sp)
10009f2c:	dec01a15 	stw	sp,104(sp)
10009f30:	d8001c15 	stw	zero,112(sp)
10009f34:	d8001b15 	stw	zero,108(sp)
10009f38:	d811883a 	mov	r8,sp
10009f3c:	d8002615 	stw	zero,152(sp)
10009f40:	d8002415 	stw	zero,144(sp)
10009f44:	d8802815 	stw	r2,160(sp)
10009f48:	a82d883a 	mov	r22,r21
10009f4c:	b0800007 	ldb	r2,0(r22)
10009f50:	10040d26 	beq	r2,zero,1000af88 <___vfiprintf_internal_r+0x110c>
10009f54:	00c00944 	movi	r3,37
10009f58:	b029883a 	mov	r20,r22
10009f5c:	10c0021e 	bne	r2,r3,10009f68 <___vfiprintf_internal_r+0xec>
10009f60:	00001606 	br	10009fbc <___vfiprintf_internal_r+0x140>
10009f64:	10c00326 	beq	r2,r3,10009f74 <___vfiprintf_internal_r+0xf8>
10009f68:	a5000044 	addi	r20,r20,1
10009f6c:	a0800007 	ldb	r2,0(r20)
10009f70:	103ffc1e 	bne	r2,zero,10009f64 <__alt_data_end+0xf8009f64>
10009f74:	a5a1c83a 	sub	r16,r20,r22
10009f78:	80001026 	beq	r16,zero,10009fbc <___vfiprintf_internal_r+0x140>
10009f7c:	d8c01c17 	ldw	r3,112(sp)
10009f80:	d8801b17 	ldw	r2,108(sp)
10009f84:	45800015 	stw	r22,0(r8)
10009f88:	80c7883a 	add	r3,r16,r3
10009f8c:	10800044 	addi	r2,r2,1
10009f90:	44000115 	stw	r16,4(r8)
10009f94:	d8c01c15 	stw	r3,112(sp)
10009f98:	d8801b15 	stw	r2,108(sp)
10009f9c:	010001c4 	movi	r4,7
10009fa0:	2080750e 	bge	r4,r2,1000a178 <___vfiprintf_internal_r+0x2fc>
10009fa4:	1803951e 	bne	r3,zero,1000adfc <___vfiprintf_internal_r+0xf80>
10009fa8:	d8c02417 	ldw	r3,144(sp)
10009fac:	d8001b15 	stw	zero,108(sp)
10009fb0:	d811883a 	mov	r8,sp
10009fb4:	1c07883a 	add	r3,r3,r16
10009fb8:	d8c02415 	stw	r3,144(sp)
10009fbc:	a0800007 	ldb	r2,0(r20)
10009fc0:	1002e026 	beq	r2,zero,1000ab44 <___vfiprintf_internal_r+0xcc8>
10009fc4:	a5800044 	addi	r22,r20,1
10009fc8:	a0c00047 	ldb	r3,1(r20)
10009fcc:	d8001d85 	stb	zero,118(sp)
10009fd0:	0027883a 	mov	r19,zero
10009fd4:	d8002305 	stb	zero,140(sp)
10009fd8:	043fffc4 	movi	r16,-1
10009fdc:	d8002515 	stw	zero,148(sp)
10009fe0:	0023883a 	mov	r17,zero
10009fe4:	05001604 	movi	r20,88
10009fe8:	05400244 	movi	r21,9
10009fec:	402f883a 	mov	r23,r8
10009ff0:	b5800044 	addi	r22,r22,1
10009ff4:	18bff804 	addi	r2,r3,-32
10009ff8:	a0827736 	bltu	r20,r2,1000a9d8 <___vfiprintf_internal_r+0xb5c>
10009ffc:	100490ba 	slli	r2,r2,2
1000a000:	01040074 	movhi	r4,4097
1000a004:	21280504 	addi	r4,r4,-24556
1000a008:	1105883a 	add	r2,r2,r4
1000a00c:	10800017 	ldw	r2,0(r2)
1000a010:	1000683a 	jmp	r2
1000a014:	1000a6d8 	cmpnei	zero,r2,667
1000a018:	1000a9d8 	cmpnei	zero,r2,679
1000a01c:	1000a9d8 	cmpnei	zero,r2,679
1000a020:	1000a6f4 	orhi	zero,r2,667
1000a024:	1000a9d8 	cmpnei	zero,r2,679
1000a028:	1000a9d8 	cmpnei	zero,r2,679
1000a02c:	1000a9d8 	cmpnei	zero,r2,679
1000a030:	1000a9d8 	cmpnei	zero,r2,679
1000a034:	1000a9d8 	cmpnei	zero,r2,679
1000a038:	1000a9d8 	cmpnei	zero,r2,679
1000a03c:	1000a8fc 	xorhi	zero,r2,675
1000a040:	1000a920 	cmpeqi	zero,r2,676
1000a044:	1000a9d8 	cmpnei	zero,r2,679
1000a048:	1000a218 	cmpnei	zero,r2,648
1000a04c:	1000a934 	orhi	zero,r2,676
1000a050:	1000a9d8 	cmpnei	zero,r2,679
1000a054:	1000a700 	call	11000a70 <_gp+0xfe491c>
1000a058:	1000a70c 	andi	zero,r2,668
1000a05c:	1000a70c 	andi	zero,r2,668
1000a060:	1000a70c 	andi	zero,r2,668
1000a064:	1000a70c 	andi	zero,r2,668
1000a068:	1000a70c 	andi	zero,r2,668
1000a06c:	1000a70c 	andi	zero,r2,668
1000a070:	1000a70c 	andi	zero,r2,668
1000a074:	1000a70c 	andi	zero,r2,668
1000a078:	1000a70c 	andi	zero,r2,668
1000a07c:	1000a9d8 	cmpnei	zero,r2,679
1000a080:	1000a9d8 	cmpnei	zero,r2,679
1000a084:	1000a9d8 	cmpnei	zero,r2,679
1000a088:	1000a9d8 	cmpnei	zero,r2,679
1000a08c:	1000a9d8 	cmpnei	zero,r2,679
1000a090:	1000a9d8 	cmpnei	zero,r2,679
1000a094:	1000a9d8 	cmpnei	zero,r2,679
1000a098:	1000a9d8 	cmpnei	zero,r2,679
1000a09c:	1000a9d8 	cmpnei	zero,r2,679
1000a0a0:	1000a9d8 	cmpnei	zero,r2,679
1000a0a4:	1000a74c 	andi	zero,r2,669
1000a0a8:	1000a9d8 	cmpnei	zero,r2,679
1000a0ac:	1000a9d8 	cmpnei	zero,r2,679
1000a0b0:	1000a9d8 	cmpnei	zero,r2,679
1000a0b4:	1000a9d8 	cmpnei	zero,r2,679
1000a0b8:	1000a9d8 	cmpnei	zero,r2,679
1000a0bc:	1000a9d8 	cmpnei	zero,r2,679
1000a0c0:	1000a9d8 	cmpnei	zero,r2,679
1000a0c4:	1000a9d8 	cmpnei	zero,r2,679
1000a0c8:	1000a9d8 	cmpnei	zero,r2,679
1000a0cc:	1000a9d8 	cmpnei	zero,r2,679
1000a0d0:	1000a788 	cmpgei	zero,r2,670
1000a0d4:	1000a9d8 	cmpnei	zero,r2,679
1000a0d8:	1000a9d8 	cmpnei	zero,r2,679
1000a0dc:	1000a9d8 	cmpnei	zero,r2,679
1000a0e0:	1000a9d8 	cmpnei	zero,r2,679
1000a0e4:	1000a9d8 	cmpnei	zero,r2,679
1000a0e8:	1000a7e4 	muli	zero,r2,671
1000a0ec:	1000a9d8 	cmpnei	zero,r2,679
1000a0f0:	1000a9d8 	cmpnei	zero,r2,679
1000a0f4:	1000a858 	cmpnei	zero,r2,673
1000a0f8:	1000a9d8 	cmpnei	zero,r2,679
1000a0fc:	1000a9d8 	cmpnei	zero,r2,679
1000a100:	1000a9d8 	cmpnei	zero,r2,679
1000a104:	1000a9d8 	cmpnei	zero,r2,679
1000a108:	1000a9d8 	cmpnei	zero,r2,679
1000a10c:	1000a9d8 	cmpnei	zero,r2,679
1000a110:	1000a9d8 	cmpnei	zero,r2,679
1000a114:	1000a9d8 	cmpnei	zero,r2,679
1000a118:	1000a9d8 	cmpnei	zero,r2,679
1000a11c:	1000a9d8 	cmpnei	zero,r2,679
1000a120:	1000a600 	call	11000a60 <_gp+0xfe490c>
1000a124:	1000a630 	cmpltui	zero,r2,664
1000a128:	1000a9d8 	cmpnei	zero,r2,679
1000a12c:	1000a9d8 	cmpnei	zero,r2,679
1000a130:	1000a9d8 	cmpnei	zero,r2,679
1000a134:	1000a980 	call	11000a98 <_gp+0xfe4944>
1000a138:	1000a630 	cmpltui	zero,r2,664
1000a13c:	1000a9d8 	cmpnei	zero,r2,679
1000a140:	1000a9d8 	cmpnei	zero,r2,679
1000a144:	1000a4d8 	cmpnei	zero,r2,659
1000a148:	1000a9d8 	cmpnei	zero,r2,679
1000a14c:	1000a4ec 	andhi	zero,r2,659
1000a150:	1000a524 	muli	zero,r2,660
1000a154:	1000a224 	muli	zero,r2,648
1000a158:	1000a4cc 	andi	zero,r2,659
1000a15c:	1000a9d8 	cmpnei	zero,r2,679
1000a160:	1000a898 	cmpnei	zero,r2,674
1000a164:	1000a9d8 	cmpnei	zero,r2,679
1000a168:	1000a8e4 	muli	zero,r2,675
1000a16c:	1000a9d8 	cmpnei	zero,r2,679
1000a170:	1000a9d8 	cmpnei	zero,r2,679
1000a174:	1000a5a8 	cmpgeui	zero,r2,662
1000a178:	42000204 	addi	r8,r8,8
1000a17c:	d8c02417 	ldw	r3,144(sp)
1000a180:	1c07883a 	add	r3,r3,r16
1000a184:	d8c02415 	stw	r3,144(sp)
1000a188:	003f8c06 	br	10009fbc <__alt_data_end+0xf8009fbc>
1000a18c:	d9402017 	ldw	r5,128(sp)
1000a190:	d9002117 	ldw	r4,132(sp)
1000a194:	0004a380 	call	10004a38 <__swsetup_r>
1000a198:	1003c11e 	bne	r2,zero,1000b0a0 <___vfiprintf_internal_r+0x1224>
1000a19c:	d9402017 	ldw	r5,128(sp)
1000a1a0:	00c00284 	movi	r3,10
1000a1a4:	2880030b 	ldhu	r2,12(r5)
1000a1a8:	1080068c 	andi	r2,r2,26
1000a1ac:	10ff581e 	bne	r2,r3,10009f10 <__alt_data_end+0xf8009f10>
1000a1b0:	d8c02017 	ldw	r3,128(sp)
1000a1b4:	1880038f 	ldh	r2,14(r3)
1000a1b8:	103f5516 	blt	r2,zero,10009f10 <__alt_data_end+0xf8009f10>
1000a1bc:	d9c02217 	ldw	r7,136(sp)
1000a1c0:	d9002117 	ldw	r4,132(sp)
1000a1c4:	a80d883a 	mov	r6,r21
1000a1c8:	180b883a 	mov	r5,r3
1000a1cc:	000b3a40 	call	1000b3a4 <__sbprintf>
1000a1d0:	dfc03517 	ldw	ra,212(sp)
1000a1d4:	df003417 	ldw	fp,208(sp)
1000a1d8:	ddc03317 	ldw	r23,204(sp)
1000a1dc:	dd803217 	ldw	r22,200(sp)
1000a1e0:	dd403117 	ldw	r21,196(sp)
1000a1e4:	dd003017 	ldw	r20,192(sp)
1000a1e8:	dcc02f17 	ldw	r19,188(sp)
1000a1ec:	dc802e17 	ldw	r18,184(sp)
1000a1f0:	dc402d17 	ldw	r17,180(sp)
1000a1f4:	dc002c17 	ldw	r16,176(sp)
1000a1f8:	dec03604 	addi	sp,sp,216
1000a1fc:	f800283a 	ret
1000a200:	0006a440 	call	10006a44 <__sinit>
1000a204:	003f2f06 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a208:	d8c02517 	ldw	r3,148(sp)
1000a20c:	d8802215 	stw	r2,136(sp)
1000a210:	00c7c83a 	sub	r3,zero,r3
1000a214:	d8c02515 	stw	r3,148(sp)
1000a218:	8c400114 	ori	r17,r17,4
1000a21c:	b0c00007 	ldb	r3,0(r22)
1000a220:	003f7306 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a224:	00800c04 	movi	r2,48
1000a228:	d9402217 	ldw	r5,136(sp)
1000a22c:	d8801d05 	stb	r2,116(sp)
1000a230:	00801e04 	movi	r2,120
1000a234:	d8801d45 	stb	r2,117(sp)
1000a238:	d8001d85 	stb	zero,118(sp)
1000a23c:	b811883a 	mov	r8,r23
1000a240:	28c00104 	addi	r3,r5,4
1000a244:	2cc00017 	ldw	r19,0(r5)
1000a248:	0029883a 	mov	r20,zero
1000a24c:	88800094 	ori	r2,r17,2
1000a250:	80032516 	blt	r16,zero,1000aee8 <___vfiprintf_internal_r+0x106c>
1000a254:	00bfdfc4 	movi	r2,-129
1000a258:	88a2703a 	and	r17,r17,r2
1000a25c:	d8c02215 	stw	r3,136(sp)
1000a260:	8c400094 	ori	r17,r17,2
1000a264:	98032a1e 	bne	r19,zero,1000af10 <___vfiprintf_internal_r+0x1094>
1000a268:	00840074 	movhi	r2,4097
1000a26c:	1088f404 	addi	r2,r2,9168
1000a270:	d8802615 	stw	r2,152(sp)
1000a274:	002b883a 	mov	r21,zero
1000a278:	8001741e 	bne	r16,zero,1000a84c <___vfiprintf_internal_r+0x9d0>
1000a27c:	0021883a 	mov	r16,zero
1000a280:	0029883a 	mov	r20,zero
1000a284:	ddc01a04 	addi	r23,sp,104
1000a288:	8027883a 	mov	r19,r16
1000a28c:	8500010e 	bge	r16,r20,1000a294 <___vfiprintf_internal_r+0x418>
1000a290:	a027883a 	mov	r19,r20
1000a294:	ad403fcc 	andi	r21,r21,255
1000a298:	ad40201c 	xori	r21,r21,128
1000a29c:	ad7fe004 	addi	r21,r21,-128
1000a2a0:	a8000126 	beq	r21,zero,1000a2a8 <___vfiprintf_internal_r+0x42c>
1000a2a4:	9cc00044 	addi	r19,r19,1
1000a2a8:	89c0008c 	andi	r7,r17,2
1000a2ac:	38000126 	beq	r7,zero,1000a2b4 <___vfiprintf_internal_r+0x438>
1000a2b0:	9cc00084 	addi	r19,r19,2
1000a2b4:	88c0210c 	andi	r3,r17,132
1000a2b8:	1801dd1e 	bne	r3,zero,1000aa30 <___vfiprintf_internal_r+0xbb4>
1000a2bc:	d9402517 	ldw	r5,148(sp)
1000a2c0:	2cebc83a 	sub	r21,r5,r19
1000a2c4:	0541da0e 	bge	zero,r21,1000aa30 <___vfiprintf_internal_r+0xbb4>
1000a2c8:	07000404 	movi	fp,16
1000a2cc:	d8801c17 	ldw	r2,112(sp)
1000a2d0:	e543be0e 	bge	fp,r21,1000b1cc <___vfiprintf_internal_r+0x1350>
1000a2d4:	01440074 	movhi	r5,4097
1000a2d8:	29495904 	addi	r5,r5,9572
1000a2dc:	dc002715 	stw	r16,156(sp)
1000a2e0:	d9801b17 	ldw	r6,108(sp)
1000a2e4:	a821883a 	mov	r16,r21
1000a2e8:	d9402315 	stw	r5,140(sp)
1000a2ec:	028001c4 	movi	r10,7
1000a2f0:	d9c02915 	stw	r7,164(sp)
1000a2f4:	182b883a 	mov	r21,r3
1000a2f8:	00000506 	br	1000a310 <___vfiprintf_internal_r+0x494>
1000a2fc:	31000084 	addi	r4,r6,2
1000a300:	42000204 	addi	r8,r8,8
1000a304:	180d883a 	mov	r6,r3
1000a308:	843ffc04 	addi	r16,r16,-16
1000a30c:	e4000f0e 	bge	fp,r16,1000a34c <___vfiprintf_internal_r+0x4d0>
1000a310:	01040074 	movhi	r4,4097
1000a314:	10800404 	addi	r2,r2,16
1000a318:	30c00044 	addi	r3,r6,1
1000a31c:	21095904 	addi	r4,r4,9572
1000a320:	41000015 	stw	r4,0(r8)
1000a324:	47000115 	stw	fp,4(r8)
1000a328:	d8801c15 	stw	r2,112(sp)
1000a32c:	d8c01b15 	stw	r3,108(sp)
1000a330:	50fff20e 	bge	r10,r3,1000a2fc <__alt_data_end+0xf800a2fc>
1000a334:	1001b21e 	bne	r2,zero,1000aa00 <___vfiprintf_internal_r+0xb84>
1000a338:	843ffc04 	addi	r16,r16,-16
1000a33c:	000d883a 	mov	r6,zero
1000a340:	01000044 	movi	r4,1
1000a344:	d811883a 	mov	r8,sp
1000a348:	e43ff116 	blt	fp,r16,1000a310 <__alt_data_end+0xf800a310>
1000a34c:	a807883a 	mov	r3,r21
1000a350:	d9c02917 	ldw	r7,164(sp)
1000a354:	802b883a 	mov	r21,r16
1000a358:	dc002717 	ldw	r16,156(sp)
1000a35c:	d9402317 	ldw	r5,140(sp)
1000a360:	a885883a 	add	r2,r21,r2
1000a364:	45400115 	stw	r21,4(r8)
1000a368:	41400015 	stw	r5,0(r8)
1000a36c:	d8801c15 	stw	r2,112(sp)
1000a370:	d9001b15 	stw	r4,108(sp)
1000a374:	014001c4 	movi	r5,7
1000a378:	29026216 	blt	r5,r4,1000ad04 <___vfiprintf_internal_r+0xe88>
1000a37c:	d9801d87 	ldb	r6,118(sp)
1000a380:	42000204 	addi	r8,r8,8
1000a384:	21400044 	addi	r5,r4,1
1000a388:	3001ae1e 	bne	r6,zero,1000aa44 <___vfiprintf_internal_r+0xbc8>
1000a38c:	3801bb26 	beq	r7,zero,1000aa7c <___vfiprintf_internal_r+0xc00>
1000a390:	d9001d04 	addi	r4,sp,116
1000a394:	10800084 	addi	r2,r2,2
1000a398:	41000015 	stw	r4,0(r8)
1000a39c:	01000084 	movi	r4,2
1000a3a0:	41000115 	stw	r4,4(r8)
1000a3a4:	d8801c15 	stw	r2,112(sp)
1000a3a8:	d9401b15 	stw	r5,108(sp)
1000a3ac:	010001c4 	movi	r4,7
1000a3b0:	2142680e 	bge	r4,r5,1000ad54 <___vfiprintf_internal_r+0xed8>
1000a3b4:	1002b11e 	bne	r2,zero,1000ae7c <___vfiprintf_internal_r+0x1000>
1000a3b8:	01802004 	movi	r6,128
1000a3bc:	01400044 	movi	r5,1
1000a3c0:	0009883a 	mov	r4,zero
1000a3c4:	d811883a 	mov	r8,sp
1000a3c8:	1981ae1e 	bne	r3,r6,1000aa84 <___vfiprintf_internal_r+0xc08>
1000a3cc:	d8c02517 	ldw	r3,148(sp)
1000a3d0:	1cf9c83a 	sub	fp,r3,r19
1000a3d4:	0701ab0e 	bge	zero,fp,1000aa84 <___vfiprintf_internal_r+0xc08>
1000a3d8:	05400404 	movi	r21,16
1000a3dc:	af03a90e 	bge	r21,fp,1000b284 <___vfiprintf_internal_r+0x1408>
1000a3e0:	01440074 	movhi	r5,4097
1000a3e4:	29495504 	addi	r5,r5,9556
1000a3e8:	d9402315 	stw	r5,140(sp)
1000a3ec:	01c001c4 	movi	r7,7
1000a3f0:	00000506 	br	1000a408 <___vfiprintf_internal_r+0x58c>
1000a3f4:	21800084 	addi	r6,r4,2
1000a3f8:	42000204 	addi	r8,r8,8
1000a3fc:	1809883a 	mov	r4,r3
1000a400:	e73ffc04 	addi	fp,fp,-16
1000a404:	af000d0e 	bge	r21,fp,1000a43c <___vfiprintf_internal_r+0x5c0>
1000a408:	10800404 	addi	r2,r2,16
1000a40c:	20c00044 	addi	r3,r4,1
1000a410:	44800015 	stw	r18,0(r8)
1000a414:	45400115 	stw	r21,4(r8)
1000a418:	d8801c15 	stw	r2,112(sp)
1000a41c:	d8c01b15 	stw	r3,108(sp)
1000a420:	38fff40e 	bge	r7,r3,1000a3f4 <__alt_data_end+0xf800a3f4>
1000a424:	10022b1e 	bne	r2,zero,1000acd4 <___vfiprintf_internal_r+0xe58>
1000a428:	e73ffc04 	addi	fp,fp,-16
1000a42c:	01800044 	movi	r6,1
1000a430:	0009883a 	mov	r4,zero
1000a434:	d811883a 	mov	r8,sp
1000a438:	af3ff316 	blt	r21,fp,1000a408 <__alt_data_end+0xf800a408>
1000a43c:	d8c02317 	ldw	r3,140(sp)
1000a440:	1705883a 	add	r2,r2,fp
1000a444:	47000115 	stw	fp,4(r8)
1000a448:	40c00015 	stw	r3,0(r8)
1000a44c:	d8801c15 	stw	r2,112(sp)
1000a450:	d9801b15 	stw	r6,108(sp)
1000a454:	00c001c4 	movi	r3,7
1000a458:	19829416 	blt	r3,r6,1000aeac <___vfiprintf_internal_r+0x1030>
1000a45c:	8521c83a 	sub	r16,r16,r20
1000a460:	42000204 	addi	r8,r8,8
1000a464:	31400044 	addi	r5,r6,1
1000a468:	3009883a 	mov	r4,r6
1000a46c:	04018716 	blt	zero,r16,1000aa8c <___vfiprintf_internal_r+0xc10>
1000a470:	a085883a 	add	r2,r20,r2
1000a474:	45c00015 	stw	r23,0(r8)
1000a478:	45000115 	stw	r20,4(r8)
1000a47c:	d8801c15 	stw	r2,112(sp)
1000a480:	d9401b15 	stw	r5,108(sp)
1000a484:	00c001c4 	movi	r3,7
1000a488:	1941c20e 	bge	r3,r5,1000ab94 <___vfiprintf_internal_r+0xd18>
1000a48c:	1002531e 	bne	r2,zero,1000addc <___vfiprintf_internal_r+0xf60>
1000a490:	d8001b15 	stw	zero,108(sp)
1000a494:	8c40010c 	andi	r17,r17,4
1000a498:	88023226 	beq	r17,zero,1000ad64 <___vfiprintf_internal_r+0xee8>
1000a49c:	d9002517 	ldw	r4,148(sp)
1000a4a0:	24e3c83a 	sub	r17,r4,r19
1000a4a4:	04432916 	blt	zero,r17,1000b14c <___vfiprintf_internal_r+0x12d0>
1000a4a8:	d8802517 	ldw	r2,148(sp)
1000a4ac:	14c0010e 	bge	r2,r19,1000a4b4 <___vfiprintf_internal_r+0x638>
1000a4b0:	9805883a 	mov	r2,r19
1000a4b4:	d8c02417 	ldw	r3,144(sp)
1000a4b8:	1887883a 	add	r3,r3,r2
1000a4bc:	d8c02415 	stw	r3,144(sp)
1000a4c0:	d8001b15 	stw	zero,108(sp)
1000a4c4:	d811883a 	mov	r8,sp
1000a4c8:	003ea006 	br	10009f4c <__alt_data_end+0xf8009f4c>
1000a4cc:	8c400814 	ori	r17,r17,32
1000a4d0:	b0c00007 	ldb	r3,0(r22)
1000a4d4:	003ec606 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a4d8:	b0c00007 	ldb	r3,0(r22)
1000a4dc:	00801b04 	movi	r2,108
1000a4e0:	18832026 	beq	r3,r2,1000b164 <___vfiprintf_internal_r+0x12e8>
1000a4e4:	8c400414 	ori	r17,r17,16
1000a4e8:	003ec106 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a4ec:	9cc03fcc 	andi	r19,r19,255
1000a4f0:	b811883a 	mov	r8,r23
1000a4f4:	9803981e 	bne	r19,zero,1000b358 <___vfiprintf_internal_r+0x14dc>
1000a4f8:	8880080c 	andi	r2,r17,32
1000a4fc:	1002be26 	beq	r2,zero,1000aff8 <___vfiprintf_internal_r+0x117c>
1000a500:	d9002217 	ldw	r4,136(sp)
1000a504:	d9402417 	ldw	r5,144(sp)
1000a508:	20800017 	ldw	r2,0(r4)
1000a50c:	2807d7fa 	srai	r3,r5,31
1000a510:	21000104 	addi	r4,r4,4
1000a514:	d9002215 	stw	r4,136(sp)
1000a518:	11400015 	stw	r5,0(r2)
1000a51c:	10c00115 	stw	r3,4(r2)
1000a520:	003e8a06 	br	10009f4c <__alt_data_end+0xf8009f4c>
1000a524:	9cc03fcc 	andi	r19,r19,255
1000a528:	b811883a 	mov	r8,r23
1000a52c:	9803871e 	bne	r19,zero,1000b34c <___vfiprintf_internal_r+0x14d0>
1000a530:	8880080c 	andi	r2,r17,32
1000a534:	10009a26 	beq	r2,zero,1000a7a0 <___vfiprintf_internal_r+0x924>
1000a538:	d9002217 	ldw	r4,136(sp)
1000a53c:	d8001d85 	stb	zero,118(sp)
1000a540:	20800204 	addi	r2,r4,8
1000a544:	24c00017 	ldw	r19,0(r4)
1000a548:	25000117 	ldw	r20,4(r4)
1000a54c:	8002a416 	blt	r16,zero,1000afe0 <___vfiprintf_internal_r+0x1164>
1000a550:	013fdfc4 	movi	r4,-129
1000a554:	9d06b03a 	or	r3,r19,r20
1000a558:	d8802215 	stw	r2,136(sp)
1000a55c:	8922703a 	and	r17,r17,r4
1000a560:	18009b26 	beq	r3,zero,1000a7d0 <___vfiprintf_internal_r+0x954>
1000a564:	002b883a 	mov	r21,zero
1000a568:	ddc01a04 	addi	r23,sp,104
1000a56c:	9806d0fa 	srli	r3,r19,3
1000a570:	a008977a 	slli	r4,r20,29
1000a574:	a028d0fa 	srli	r20,r20,3
1000a578:	9cc001cc 	andi	r19,r19,7
1000a57c:	98800c04 	addi	r2,r19,48
1000a580:	bdffffc4 	addi	r23,r23,-1
1000a584:	20e6b03a 	or	r19,r4,r3
1000a588:	b8800005 	stb	r2,0(r23)
1000a58c:	9d06b03a 	or	r3,r19,r20
1000a590:	183ff61e 	bne	r3,zero,1000a56c <__alt_data_end+0xf800a56c>
1000a594:	88c0004c 	andi	r3,r17,1
1000a598:	18021f1e 	bne	r3,zero,1000ae18 <___vfiprintf_internal_r+0xf9c>
1000a59c:	d9401e17 	ldw	r5,120(sp)
1000a5a0:	2de9c83a 	sub	r20,r5,r23
1000a5a4:	003f3806 	br	1000a288 <__alt_data_end+0xf800a288>
1000a5a8:	9cc03fcc 	andi	r19,r19,255
1000a5ac:	b811883a 	mov	r8,r23
1000a5b0:	98034f1e 	bne	r19,zero,1000b2f0 <___vfiprintf_internal_r+0x1474>
1000a5b4:	00840074 	movhi	r2,4097
1000a5b8:	1088f404 	addi	r2,r2,9168
1000a5bc:	d8802615 	stw	r2,152(sp)
1000a5c0:	8880080c 	andi	r2,r17,32
1000a5c4:	1000ac26 	beq	r2,zero,1000a878 <___vfiprintf_internal_r+0x9fc>
1000a5c8:	d9002217 	ldw	r4,136(sp)
1000a5cc:	24c00017 	ldw	r19,0(r4)
1000a5d0:	25000117 	ldw	r20,4(r4)
1000a5d4:	21000204 	addi	r4,r4,8
1000a5d8:	d9002215 	stw	r4,136(sp)
1000a5dc:	8880004c 	andi	r2,r17,1
1000a5e0:	1001e726 	beq	r2,zero,1000ad80 <___vfiprintf_internal_r+0xf04>
1000a5e4:	9d04b03a 	or	r2,r19,r20
1000a5e8:	10025c1e 	bne	r2,zero,1000af5c <___vfiprintf_internal_r+0x10e0>
1000a5ec:	d8001d85 	stb	zero,118(sp)
1000a5f0:	80024416 	blt	r16,zero,1000af04 <___vfiprintf_internal_r+0x1088>
1000a5f4:	00bfdfc4 	movi	r2,-129
1000a5f8:	88a2703a 	and	r17,r17,r2
1000a5fc:	003f1d06 	br	1000a274 <__alt_data_end+0xf800a274>
1000a600:	d8c02217 	ldw	r3,136(sp)
1000a604:	04c00044 	movi	r19,1
1000a608:	b811883a 	mov	r8,r23
1000a60c:	18800017 	ldw	r2,0(r3)
1000a610:	18c00104 	addi	r3,r3,4
1000a614:	d8001d85 	stb	zero,118(sp)
1000a618:	d8801005 	stb	r2,64(sp)
1000a61c:	d8c02215 	stw	r3,136(sp)
1000a620:	9829883a 	mov	r20,r19
1000a624:	ddc01004 	addi	r23,sp,64
1000a628:	0021883a 	mov	r16,zero
1000a62c:	003f1e06 	br	1000a2a8 <__alt_data_end+0xf800a2a8>
1000a630:	9cc03fcc 	andi	r19,r19,255
1000a634:	b811883a 	mov	r8,r23
1000a638:	9803331e 	bne	r19,zero,1000b308 <___vfiprintf_internal_r+0x148c>
1000a63c:	8880080c 	andi	r2,r17,32
1000a640:	10004826 	beq	r2,zero,1000a764 <___vfiprintf_internal_r+0x8e8>
1000a644:	d9002217 	ldw	r4,136(sp)
1000a648:	20800117 	ldw	r2,4(r4)
1000a64c:	24c00017 	ldw	r19,0(r4)
1000a650:	21000204 	addi	r4,r4,8
1000a654:	d9002215 	stw	r4,136(sp)
1000a658:	1029883a 	mov	r20,r2
1000a65c:	10024c16 	blt	r2,zero,1000af90 <___vfiprintf_internal_r+0x1114>
1000a660:	dd401d83 	ldbu	r21,118(sp)
1000a664:	80007116 	blt	r16,zero,1000a82c <___vfiprintf_internal_r+0x9b0>
1000a668:	00ffdfc4 	movi	r3,-129
1000a66c:	9d04b03a 	or	r2,r19,r20
1000a670:	88e2703a 	and	r17,r17,r3
1000a674:	1000d126 	beq	r2,zero,1000a9bc <___vfiprintf_internal_r+0xb40>
1000a678:	a0023526 	beq	r20,zero,1000af50 <___vfiprintf_internal_r+0x10d4>
1000a67c:	ddc01a04 	addi	r23,sp,104
1000a680:	4039883a 	mov	fp,r8
1000a684:	9809883a 	mov	r4,r19
1000a688:	a00b883a 	mov	r5,r20
1000a68c:	01800284 	movi	r6,10
1000a690:	000f883a 	mov	r7,zero
1000a694:	000c3a80 	call	1000c3a8 <__umoddi3>
1000a698:	10800c04 	addi	r2,r2,48
1000a69c:	bdffffc4 	addi	r23,r23,-1
1000a6a0:	9809883a 	mov	r4,r19
1000a6a4:	a00b883a 	mov	r5,r20
1000a6a8:	b8800005 	stb	r2,0(r23)
1000a6ac:	01800284 	movi	r6,10
1000a6b0:	000f883a 	mov	r7,zero
1000a6b4:	000bdac0 	call	1000bdac <__udivdi3>
1000a6b8:	1027883a 	mov	r19,r2
1000a6bc:	10c4b03a 	or	r2,r2,r3
1000a6c0:	1829883a 	mov	r20,r3
1000a6c4:	103fef1e 	bne	r2,zero,1000a684 <__alt_data_end+0xf800a684>
1000a6c8:	d9001e17 	ldw	r4,120(sp)
1000a6cc:	e011883a 	mov	r8,fp
1000a6d0:	25e9c83a 	sub	r20,r4,r23
1000a6d4:	003eec06 	br	1000a288 <__alt_data_end+0xf800a288>
1000a6d8:	d8802307 	ldb	r2,140(sp)
1000a6dc:	1002361e 	bne	r2,zero,1000afb8 <___vfiprintf_internal_r+0x113c>
1000a6e0:	00c00804 	movi	r3,32
1000a6e4:	d8c02305 	stb	r3,140(sp)
1000a6e8:	04c00044 	movi	r19,1
1000a6ec:	b0c00007 	ldb	r3,0(r22)
1000a6f0:	003e3f06 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a6f4:	8c400054 	ori	r17,r17,1
1000a6f8:	b0c00007 	ldb	r3,0(r22)
1000a6fc:	003e3c06 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a700:	8c402014 	ori	r17,r17,128
1000a704:	b0c00007 	ldb	r3,0(r22)
1000a708:	003e3906 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a70c:	dc002715 	stw	r16,156(sp)
1000a710:	d8002515 	stw	zero,148(sp)
1000a714:	1f3ff404 	addi	fp,r3,-48
1000a718:	0009883a 	mov	r4,zero
1000a71c:	b021883a 	mov	r16,r22
1000a720:	01400284 	movi	r5,10
1000a724:	000cb200 	call	1000cb20 <__mulsi3>
1000a728:	80c00007 	ldb	r3,0(r16)
1000a72c:	e089883a 	add	r4,fp,r2
1000a730:	b5800044 	addi	r22,r22,1
1000a734:	1f3ff404 	addi	fp,r3,-48
1000a738:	b021883a 	mov	r16,r22
1000a73c:	af3ff82e 	bgeu	r21,fp,1000a720 <__alt_data_end+0xf800a720>
1000a740:	d9002515 	stw	r4,148(sp)
1000a744:	dc002717 	ldw	r16,156(sp)
1000a748:	003e2a06 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a74c:	9cc03fcc 	andi	r19,r19,255
1000a750:	b811883a 	mov	r8,r23
1000a754:	9802e91e 	bne	r19,zero,1000b2fc <___vfiprintf_internal_r+0x1480>
1000a758:	8c400414 	ori	r17,r17,16
1000a75c:	8880080c 	andi	r2,r17,32
1000a760:	103fb81e 	bne	r2,zero,1000a644 <__alt_data_end+0xf800a644>
1000a764:	8880040c 	andi	r2,r17,16
1000a768:	10022e26 	beq	r2,zero,1000b024 <___vfiprintf_internal_r+0x11a8>
1000a76c:	d9402217 	ldw	r5,136(sp)
1000a770:	2cc00017 	ldw	r19,0(r5)
1000a774:	29400104 	addi	r5,r5,4
1000a778:	d9402215 	stw	r5,136(sp)
1000a77c:	9829d7fa 	srai	r20,r19,31
1000a780:	a005883a 	mov	r2,r20
1000a784:	003fb506 	br	1000a65c <__alt_data_end+0xf800a65c>
1000a788:	9cc03fcc 	andi	r19,r19,255
1000a78c:	b811883a 	mov	r8,r23
1000a790:	9802fa1e 	bne	r19,zero,1000b37c <___vfiprintf_internal_r+0x1500>
1000a794:	8c400414 	ori	r17,r17,16
1000a798:	8880080c 	andi	r2,r17,32
1000a79c:	103f661e 	bne	r2,zero,1000a538 <__alt_data_end+0xf800a538>
1000a7a0:	8880040c 	andi	r2,r17,16
1000a7a4:	10020626 	beq	r2,zero,1000afc0 <___vfiprintf_internal_r+0x1144>
1000a7a8:	d9402217 	ldw	r5,136(sp)
1000a7ac:	d8001d85 	stb	zero,118(sp)
1000a7b0:	0029883a 	mov	r20,zero
1000a7b4:	28800104 	addi	r2,r5,4
1000a7b8:	2cc00017 	ldw	r19,0(r5)
1000a7bc:	80020816 	blt	r16,zero,1000afe0 <___vfiprintf_internal_r+0x1164>
1000a7c0:	00ffdfc4 	movi	r3,-129
1000a7c4:	d8802215 	stw	r2,136(sp)
1000a7c8:	88e2703a 	and	r17,r17,r3
1000a7cc:	983f651e 	bne	r19,zero,1000a564 <__alt_data_end+0xf800a564>
1000a7d0:	002b883a 	mov	r21,zero
1000a7d4:	8002cf26 	beq	r16,zero,1000b314 <___vfiprintf_internal_r+0x1498>
1000a7d8:	0027883a 	mov	r19,zero
1000a7dc:	0029883a 	mov	r20,zero
1000a7e0:	003f6106 	br	1000a568 <__alt_data_end+0xf800a568>
1000a7e4:	9cc03fcc 	andi	r19,r19,255
1000a7e8:	b811883a 	mov	r8,r23
1000a7ec:	9802e01e 	bne	r19,zero,1000b370 <___vfiprintf_internal_r+0x14f4>
1000a7f0:	8c400414 	ori	r17,r17,16
1000a7f4:	8880080c 	andi	r2,r17,32
1000a7f8:	1000641e 	bne	r2,zero,1000a98c <___vfiprintf_internal_r+0xb10>
1000a7fc:	8880040c 	andi	r2,r17,16
1000a800:	1001c81e 	bne	r2,zero,1000af24 <___vfiprintf_internal_r+0x10a8>
1000a804:	8880100c 	andi	r2,r17,64
1000a808:	d8001d85 	stb	zero,118(sp)
1000a80c:	1002281e 	bne	r2,zero,1000b0b0 <___vfiprintf_internal_r+0x1234>
1000a810:	d9002217 	ldw	r4,136(sp)
1000a814:	0029883a 	mov	r20,zero
1000a818:	20800104 	addi	r2,r4,4
1000a81c:	24c00017 	ldw	r19,0(r4)
1000a820:	8001c60e 	bge	r16,zero,1000af3c <___vfiprintf_internal_r+0x10c0>
1000a824:	d8802215 	stw	r2,136(sp)
1000a828:	002b883a 	mov	r21,zero
1000a82c:	9d04b03a 	or	r2,r19,r20
1000a830:	103f911e 	bne	r2,zero,1000a678 <__alt_data_end+0xf800a678>
1000a834:	00800044 	movi	r2,1
1000a838:	10803fcc 	andi	r2,r2,255
1000a83c:	00c00044 	movi	r3,1
1000a840:	10c05f26 	beq	r2,r3,1000a9c0 <___vfiprintf_internal_r+0xb44>
1000a844:	00c00084 	movi	r3,2
1000a848:	10ffe31e 	bne	r2,r3,1000a7d8 <__alt_data_end+0xf800a7d8>
1000a84c:	0027883a 	mov	r19,zero
1000a850:	0029883a 	mov	r20,zero
1000a854:	00015106 	br	1000ad9c <___vfiprintf_internal_r+0xf20>
1000a858:	9cc03fcc 	andi	r19,r19,255
1000a85c:	b811883a 	mov	r8,r23
1000a860:	9802c01e 	bne	r19,zero,1000b364 <___vfiprintf_internal_r+0x14e8>
1000a864:	01440074 	movhi	r5,4097
1000a868:	2948ef04 	addi	r5,r5,9148
1000a86c:	d9402615 	stw	r5,152(sp)
1000a870:	8880080c 	andi	r2,r17,32
1000a874:	103f541e 	bne	r2,zero,1000a5c8 <__alt_data_end+0xf800a5c8>
1000a878:	8880040c 	andi	r2,r17,16
1000a87c:	1001f226 	beq	r2,zero,1000b048 <___vfiprintf_internal_r+0x11cc>
1000a880:	d9402217 	ldw	r5,136(sp)
1000a884:	0029883a 	mov	r20,zero
1000a888:	2cc00017 	ldw	r19,0(r5)
1000a88c:	29400104 	addi	r5,r5,4
1000a890:	d9402215 	stw	r5,136(sp)
1000a894:	003f5106 	br	1000a5dc <__alt_data_end+0xf800a5dc>
1000a898:	d8c02217 	ldw	r3,136(sp)
1000a89c:	b811883a 	mov	r8,r23
1000a8a0:	d8001d85 	stb	zero,118(sp)
1000a8a4:	1dc00017 	ldw	r23,0(r3)
1000a8a8:	1f000104 	addi	fp,r3,4
1000a8ac:	b8025926 	beq	r23,zero,1000b214 <___vfiprintf_internal_r+0x1398>
1000a8b0:	80023316 	blt	r16,zero,1000b180 <___vfiprintf_internal_r+0x1304>
1000a8b4:	800d883a 	mov	r6,r16
1000a8b8:	000b883a 	mov	r5,zero
1000a8bc:	b809883a 	mov	r4,r23
1000a8c0:	da002a15 	stw	r8,168(sp)
1000a8c4:	0007fbc0 	call	10007fbc <memchr>
1000a8c8:	da002a17 	ldw	r8,168(sp)
1000a8cc:	10026826 	beq	r2,zero,1000b270 <___vfiprintf_internal_r+0x13f4>
1000a8d0:	15e9c83a 	sub	r20,r2,r23
1000a8d4:	dd401d83 	ldbu	r21,118(sp)
1000a8d8:	df002215 	stw	fp,136(sp)
1000a8dc:	0021883a 	mov	r16,zero
1000a8e0:	003e6906 	br	1000a288 <__alt_data_end+0xf800a288>
1000a8e4:	9cc03fcc 	andi	r19,r19,255
1000a8e8:	b811883a 	mov	r8,r23
1000a8ec:	983fc126 	beq	r19,zero,1000a7f4 <__alt_data_end+0xf800a7f4>
1000a8f0:	d8c02303 	ldbu	r3,140(sp)
1000a8f4:	d8c01d85 	stb	r3,118(sp)
1000a8f8:	003fbe06 	br	1000a7f4 <__alt_data_end+0xf800a7f4>
1000a8fc:	d9002217 	ldw	r4,136(sp)
1000a900:	d9402217 	ldw	r5,136(sp)
1000a904:	21000017 	ldw	r4,0(r4)
1000a908:	28800104 	addi	r2,r5,4
1000a90c:	d9002515 	stw	r4,148(sp)
1000a910:	203e3d16 	blt	r4,zero,1000a208 <__alt_data_end+0xf800a208>
1000a914:	d8802215 	stw	r2,136(sp)
1000a918:	b0c00007 	ldb	r3,0(r22)
1000a91c:	003db406 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a920:	00c00ac4 	movi	r3,43
1000a924:	d8c02305 	stb	r3,140(sp)
1000a928:	04c00044 	movi	r19,1
1000a92c:	b0c00007 	ldb	r3,0(r22)
1000a930:	003daf06 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a934:	b0c00007 	ldb	r3,0(r22)
1000a938:	01000a84 	movi	r4,42
1000a93c:	b4000044 	addi	r16,r22,1
1000a940:	19025e26 	beq	r3,r4,1000b2bc <___vfiprintf_internal_r+0x1440>
1000a944:	1f3ff404 	addi	fp,r3,-48
1000a948:	0009883a 	mov	r4,zero
1000a94c:	af025236 	bltu	r21,fp,1000b298 <___vfiprintf_internal_r+0x141c>
1000a950:	01400284 	movi	r5,10
1000a954:	000cb200 	call	1000cb20 <__mulsi3>
1000a958:	80c00007 	ldb	r3,0(r16)
1000a95c:	1709883a 	add	r4,r2,fp
1000a960:	85800044 	addi	r22,r16,1
1000a964:	1f3ff404 	addi	fp,r3,-48
1000a968:	b021883a 	mov	r16,r22
1000a96c:	af3ff82e 	bgeu	r21,fp,1000a950 <__alt_data_end+0xf800a950>
1000a970:	2021883a 	mov	r16,r4
1000a974:	203d9f0e 	bge	r4,zero,10009ff4 <__alt_data_end+0xf8009ff4>
1000a978:	043fffc4 	movi	r16,-1
1000a97c:	003d9d06 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a980:	8c401014 	ori	r17,r17,64
1000a984:	b0c00007 	ldb	r3,0(r22)
1000a988:	003d9906 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000a98c:	d9002217 	ldw	r4,136(sp)
1000a990:	d8001d85 	stb	zero,118(sp)
1000a994:	20c00204 	addi	r3,r4,8
1000a998:	24c00017 	ldw	r19,0(r4)
1000a99c:	25000117 	ldw	r20,4(r4)
1000a9a0:	8001e716 	blt	r16,zero,1000b140 <___vfiprintf_internal_r+0x12c4>
1000a9a4:	013fdfc4 	movi	r4,-129
1000a9a8:	9d04b03a 	or	r2,r19,r20
1000a9ac:	d8c02215 	stw	r3,136(sp)
1000a9b0:	8922703a 	and	r17,r17,r4
1000a9b4:	002b883a 	mov	r21,zero
1000a9b8:	103f2f1e 	bne	r2,zero,1000a678 <__alt_data_end+0xf800a678>
1000a9bc:	803e2f26 	beq	r16,zero,1000a27c <__alt_data_end+0xf800a27c>
1000a9c0:	0027883a 	mov	r19,zero
1000a9c4:	9cc00c04 	addi	r19,r19,48
1000a9c8:	dcc019c5 	stb	r19,103(sp)
1000a9cc:	dd002817 	ldw	r20,160(sp)
1000a9d0:	ddc019c4 	addi	r23,sp,103
1000a9d4:	003e2c06 	br	1000a288 <__alt_data_end+0xf800a288>
1000a9d8:	9cc03fcc 	andi	r19,r19,255
1000a9dc:	b811883a 	mov	r8,r23
1000a9e0:	9802571e 	bne	r19,zero,1000b340 <___vfiprintf_internal_r+0x14c4>
1000a9e4:	18005726 	beq	r3,zero,1000ab44 <___vfiprintf_internal_r+0xcc8>
1000a9e8:	04c00044 	movi	r19,1
1000a9ec:	d8c01005 	stb	r3,64(sp)
1000a9f0:	d8001d85 	stb	zero,118(sp)
1000a9f4:	9829883a 	mov	r20,r19
1000a9f8:	ddc01004 	addi	r23,sp,64
1000a9fc:	003f0a06 	br	1000a628 <__alt_data_end+0xf800a628>
1000aa00:	d9402017 	ldw	r5,128(sp)
1000aa04:	d9002117 	ldw	r4,132(sp)
1000aa08:	d9801a04 	addi	r6,sp,104
1000aa0c:	da802a15 	stw	r10,168(sp)
1000aa10:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000aa14:	da802a17 	ldw	r10,168(sp)
1000aa18:	1000501e 	bne	r2,zero,1000ab5c <___vfiprintf_internal_r+0xce0>
1000aa1c:	d9801b17 	ldw	r6,108(sp)
1000aa20:	d8801c17 	ldw	r2,112(sp)
1000aa24:	d811883a 	mov	r8,sp
1000aa28:	31000044 	addi	r4,r6,1
1000aa2c:	003e3606 	br	1000a308 <__alt_data_end+0xf800a308>
1000aa30:	d9001b17 	ldw	r4,108(sp)
1000aa34:	d8801c17 	ldw	r2,112(sp)
1000aa38:	21400044 	addi	r5,r4,1
1000aa3c:	d9801d87 	ldb	r6,118(sp)
1000aa40:	303e5226 	beq	r6,zero,1000a38c <__alt_data_end+0xf800a38c>
1000aa44:	01800044 	movi	r6,1
1000aa48:	d9001d84 	addi	r4,sp,118
1000aa4c:	1185883a 	add	r2,r2,r6
1000aa50:	41000015 	stw	r4,0(r8)
1000aa54:	41800115 	stw	r6,4(r8)
1000aa58:	d8801c15 	stw	r2,112(sp)
1000aa5c:	d9401b15 	stw	r5,108(sp)
1000aa60:	010001c4 	movi	r4,7
1000aa64:	2140b00e 	bge	r4,r5,1000ad28 <___vfiprintf_internal_r+0xeac>
1000aa68:	1000f61e 	bne	r2,zero,1000ae44 <___vfiprintf_internal_r+0xfc8>
1000aa6c:	3800b31e 	bne	r7,zero,1000ad3c <___vfiprintf_internal_r+0xec0>
1000aa70:	0009883a 	mov	r4,zero
1000aa74:	300b883a 	mov	r5,r6
1000aa78:	d811883a 	mov	r8,sp
1000aa7c:	01802004 	movi	r6,128
1000aa80:	19be5226 	beq	r3,r6,1000a3cc <__alt_data_end+0xf800a3cc>
1000aa84:	8521c83a 	sub	r16,r16,r20
1000aa88:	043e790e 	bge	zero,r16,1000a470 <__alt_data_end+0xf800a470>
1000aa8c:	05400404 	movi	r21,16
1000aa90:	ac01b00e 	bge	r21,r16,1000b154 <___vfiprintf_internal_r+0x12d8>
1000aa94:	01440074 	movhi	r5,4097
1000aa98:	29495504 	addi	r5,r5,9556
1000aa9c:	d9402315 	stw	r5,140(sp)
1000aaa0:	070001c4 	movi	fp,7
1000aaa4:	00000506 	br	1000aabc <___vfiprintf_internal_r+0xc40>
1000aaa8:	21400084 	addi	r5,r4,2
1000aaac:	42000204 	addi	r8,r8,8
1000aab0:	1809883a 	mov	r4,r3
1000aab4:	843ffc04 	addi	r16,r16,-16
1000aab8:	ac000d0e 	bge	r21,r16,1000aaf0 <___vfiprintf_internal_r+0xc74>
1000aabc:	10800404 	addi	r2,r2,16
1000aac0:	20c00044 	addi	r3,r4,1
1000aac4:	44800015 	stw	r18,0(r8)
1000aac8:	45400115 	stw	r21,4(r8)
1000aacc:	d8801c15 	stw	r2,112(sp)
1000aad0:	d8c01b15 	stw	r3,108(sp)
1000aad4:	e0fff40e 	bge	fp,r3,1000aaa8 <__alt_data_end+0xf800aaa8>
1000aad8:	1000101e 	bne	r2,zero,1000ab1c <___vfiprintf_internal_r+0xca0>
1000aadc:	843ffc04 	addi	r16,r16,-16
1000aae0:	01400044 	movi	r5,1
1000aae4:	0009883a 	mov	r4,zero
1000aae8:	d811883a 	mov	r8,sp
1000aaec:	ac3ff316 	blt	r21,r16,1000aabc <__alt_data_end+0xf800aabc>
1000aaf0:	d8c02317 	ldw	r3,140(sp)
1000aaf4:	1405883a 	add	r2,r2,r16
1000aaf8:	44000115 	stw	r16,4(r8)
1000aafc:	40c00015 	stw	r3,0(r8)
1000ab00:	d8801c15 	stw	r2,112(sp)
1000ab04:	d9401b15 	stw	r5,108(sp)
1000ab08:	00c001c4 	movi	r3,7
1000ab0c:	19401916 	blt	r3,r5,1000ab74 <___vfiprintf_internal_r+0xcf8>
1000ab10:	42000204 	addi	r8,r8,8
1000ab14:	29400044 	addi	r5,r5,1
1000ab18:	003e5506 	br	1000a470 <__alt_data_end+0xf800a470>
1000ab1c:	d9402017 	ldw	r5,128(sp)
1000ab20:	d9002117 	ldw	r4,132(sp)
1000ab24:	d9801a04 	addi	r6,sp,104
1000ab28:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000ab2c:	10000b1e 	bne	r2,zero,1000ab5c <___vfiprintf_internal_r+0xce0>
1000ab30:	d9001b17 	ldw	r4,108(sp)
1000ab34:	d8801c17 	ldw	r2,112(sp)
1000ab38:	d811883a 	mov	r8,sp
1000ab3c:	21400044 	addi	r5,r4,1
1000ab40:	003fdc06 	br	1000aab4 <__alt_data_end+0xf800aab4>
1000ab44:	d8801c17 	ldw	r2,112(sp)
1000ab48:	10000426 	beq	r2,zero,1000ab5c <___vfiprintf_internal_r+0xce0>
1000ab4c:	d9402017 	ldw	r5,128(sp)
1000ab50:	d9002117 	ldw	r4,132(sp)
1000ab54:	d9801a04 	addi	r6,sp,104
1000ab58:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000ab5c:	d9402017 	ldw	r5,128(sp)
1000ab60:	2880030b 	ldhu	r2,12(r5)
1000ab64:	1080100c 	andi	r2,r2,64
1000ab68:	10014d1e 	bne	r2,zero,1000b0a0 <___vfiprintf_internal_r+0x1224>
1000ab6c:	d8802417 	ldw	r2,144(sp)
1000ab70:	003d9706 	br	1000a1d0 <__alt_data_end+0xf800a1d0>
1000ab74:	1000d21e 	bne	r2,zero,1000aec0 <___vfiprintf_internal_r+0x1044>
1000ab78:	00c00044 	movi	r3,1
1000ab7c:	a005883a 	mov	r2,r20
1000ab80:	ddc00015 	stw	r23,0(sp)
1000ab84:	dd000115 	stw	r20,4(sp)
1000ab88:	dd001c15 	stw	r20,112(sp)
1000ab8c:	d8c01b15 	stw	r3,108(sp)
1000ab90:	d811883a 	mov	r8,sp
1000ab94:	42000204 	addi	r8,r8,8
1000ab98:	8c40010c 	andi	r17,r17,4
1000ab9c:	88004026 	beq	r17,zero,1000aca0 <___vfiprintf_internal_r+0xe24>
1000aba0:	d9002517 	ldw	r4,148(sp)
1000aba4:	24e3c83a 	sub	r17,r4,r19
1000aba8:	04403d0e 	bge	zero,r17,1000aca0 <___vfiprintf_internal_r+0xe24>
1000abac:	04000404 	movi	r16,16
1000abb0:	8441a90e 	bge	r16,r17,1000b258 <___vfiprintf_internal_r+0x13dc>
1000abb4:	00c40074 	movhi	r3,4097
1000abb8:	18c95904 	addi	r3,r3,9572
1000abbc:	d9001b17 	ldw	r4,108(sp)
1000abc0:	d8c02315 	stw	r3,140(sp)
1000abc4:	050001c4 	movi	r20,7
1000abc8:	dd402117 	ldw	r21,132(sp)
1000abcc:	ddc02017 	ldw	r23,128(sp)
1000abd0:	00000506 	br	1000abe8 <___vfiprintf_internal_r+0xd6c>
1000abd4:	21400084 	addi	r5,r4,2
1000abd8:	42000204 	addi	r8,r8,8
1000abdc:	1809883a 	mov	r4,r3
1000abe0:	8c7ffc04 	addi	r17,r17,-16
1000abe4:	84400f0e 	bge	r16,r17,1000ac24 <___vfiprintf_internal_r+0xda8>
1000abe8:	01440074 	movhi	r5,4097
1000abec:	10800404 	addi	r2,r2,16
1000abf0:	20c00044 	addi	r3,r4,1
1000abf4:	29495904 	addi	r5,r5,9572
1000abf8:	41400015 	stw	r5,0(r8)
1000abfc:	44000115 	stw	r16,4(r8)
1000ac00:	d8801c15 	stw	r2,112(sp)
1000ac04:	d8c01b15 	stw	r3,108(sp)
1000ac08:	a0fff20e 	bge	r20,r3,1000abd4 <__alt_data_end+0xf800abd4>
1000ac0c:	1000141e 	bne	r2,zero,1000ac60 <___vfiprintf_internal_r+0xde4>
1000ac10:	8c7ffc04 	addi	r17,r17,-16
1000ac14:	01400044 	movi	r5,1
1000ac18:	0009883a 	mov	r4,zero
1000ac1c:	d811883a 	mov	r8,sp
1000ac20:	847ff116 	blt	r16,r17,1000abe8 <__alt_data_end+0xf800abe8>
1000ac24:	d8c02317 	ldw	r3,140(sp)
1000ac28:	1445883a 	add	r2,r2,r17
1000ac2c:	44400115 	stw	r17,4(r8)
1000ac30:	40c00015 	stw	r3,0(r8)
1000ac34:	d8801c15 	stw	r2,112(sp)
1000ac38:	d9401b15 	stw	r5,108(sp)
1000ac3c:	00c001c4 	movi	r3,7
1000ac40:	1940170e 	bge	r3,r5,1000aca0 <___vfiprintf_internal_r+0xe24>
1000ac44:	1000101e 	bne	r2,zero,1000ac88 <___vfiprintf_internal_r+0xe0c>
1000ac48:	d8802517 	ldw	r2,148(sp)
1000ac4c:	14c11616 	blt	r2,r19,1000b0a8 <___vfiprintf_internal_r+0x122c>
1000ac50:	d9002417 	ldw	r4,144(sp)
1000ac54:	2089883a 	add	r4,r4,r2
1000ac58:	d9002415 	stw	r4,144(sp)
1000ac5c:	003e1806 	br	1000a4c0 <__alt_data_end+0xf800a4c0>
1000ac60:	d9801a04 	addi	r6,sp,104
1000ac64:	b80b883a 	mov	r5,r23
1000ac68:	a809883a 	mov	r4,r21
1000ac6c:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000ac70:	103fba1e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000ac74:	d9001b17 	ldw	r4,108(sp)
1000ac78:	d8801c17 	ldw	r2,112(sp)
1000ac7c:	d811883a 	mov	r8,sp
1000ac80:	21400044 	addi	r5,r4,1
1000ac84:	003fd606 	br	1000abe0 <__alt_data_end+0xf800abe0>
1000ac88:	d9402017 	ldw	r5,128(sp)
1000ac8c:	d9002117 	ldw	r4,132(sp)
1000ac90:	d9801a04 	addi	r6,sp,104
1000ac94:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000ac98:	103fb01e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000ac9c:	d8801c17 	ldw	r2,112(sp)
1000aca0:	d8c02517 	ldw	r3,148(sp)
1000aca4:	1cc0010e 	bge	r3,r19,1000acac <___vfiprintf_internal_r+0xe30>
1000aca8:	9807883a 	mov	r3,r19
1000acac:	d9002417 	ldw	r4,144(sp)
1000acb0:	20c9883a 	add	r4,r4,r3
1000acb4:	d9002415 	stw	r4,144(sp)
1000acb8:	103e0126 	beq	r2,zero,1000a4c0 <__alt_data_end+0xf800a4c0>
1000acbc:	d9402017 	ldw	r5,128(sp)
1000acc0:	d9002117 	ldw	r4,132(sp)
1000acc4:	d9801a04 	addi	r6,sp,104
1000acc8:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000accc:	103dfc26 	beq	r2,zero,1000a4c0 <__alt_data_end+0xf800a4c0>
1000acd0:	003fa206 	br	1000ab5c <__alt_data_end+0xf800ab5c>
1000acd4:	d9402017 	ldw	r5,128(sp)
1000acd8:	d9002117 	ldw	r4,132(sp)
1000acdc:	d9801a04 	addi	r6,sp,104
1000ace0:	d9c02b15 	stw	r7,172(sp)
1000ace4:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000ace8:	d9c02b17 	ldw	r7,172(sp)
1000acec:	103f9b1e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000acf0:	d9001b17 	ldw	r4,108(sp)
1000acf4:	d8801c17 	ldw	r2,112(sp)
1000acf8:	d811883a 	mov	r8,sp
1000acfc:	21800044 	addi	r6,r4,1
1000ad00:	003dbf06 	br	1000a400 <__alt_data_end+0xf800a400>
1000ad04:	1000d81e 	bne	r2,zero,1000b068 <___vfiprintf_internal_r+0x11ec>
1000ad08:	d9001d87 	ldb	r4,118(sp)
1000ad0c:	20000a26 	beq	r4,zero,1000ad38 <___vfiprintf_internal_r+0xebc>
1000ad10:	00800044 	movi	r2,1
1000ad14:	d9001d84 	addi	r4,sp,118
1000ad18:	100b883a 	mov	r5,r2
1000ad1c:	d9000015 	stw	r4,0(sp)
1000ad20:	d8800115 	stw	r2,4(sp)
1000ad24:	d811883a 	mov	r8,sp
1000ad28:	2809883a 	mov	r4,r5
1000ad2c:	42000204 	addi	r8,r8,8
1000ad30:	29400044 	addi	r5,r5,1
1000ad34:	003d9506 	br	1000a38c <__alt_data_end+0xf800a38c>
1000ad38:	3800fd26 	beq	r7,zero,1000b130 <___vfiprintf_internal_r+0x12b4>
1000ad3c:	00800084 	movi	r2,2
1000ad40:	d9001d04 	addi	r4,sp,116
1000ad44:	d9000015 	stw	r4,0(sp)
1000ad48:	d8800115 	stw	r2,4(sp)
1000ad4c:	01400044 	movi	r5,1
1000ad50:	d811883a 	mov	r8,sp
1000ad54:	2809883a 	mov	r4,r5
1000ad58:	42000204 	addi	r8,r8,8
1000ad5c:	29400044 	addi	r5,r5,1
1000ad60:	003f4606 	br	1000aa7c <__alt_data_end+0xf800aa7c>
1000ad64:	d8802517 	ldw	r2,148(sp)
1000ad68:	14c0010e 	bge	r2,r19,1000ad70 <___vfiprintf_internal_r+0xef4>
1000ad6c:	9805883a 	mov	r2,r19
1000ad70:	d9402417 	ldw	r5,144(sp)
1000ad74:	288b883a 	add	r5,r5,r2
1000ad78:	d9402415 	stw	r5,144(sp)
1000ad7c:	003dd006 	br	1000a4c0 <__alt_data_end+0xf800a4c0>
1000ad80:	d8001d85 	stb	zero,118(sp)
1000ad84:	80005d16 	blt	r16,zero,1000aefc <___vfiprintf_internal_r+0x1080>
1000ad88:	00ffdfc4 	movi	r3,-129
1000ad8c:	9d04b03a 	or	r2,r19,r20
1000ad90:	88e2703a 	and	r17,r17,r3
1000ad94:	103d3726 	beq	r2,zero,1000a274 <__alt_data_end+0xf800a274>
1000ad98:	002b883a 	mov	r21,zero
1000ad9c:	d9002617 	ldw	r4,152(sp)
1000ada0:	ddc01a04 	addi	r23,sp,104
1000ada4:	988003cc 	andi	r2,r19,15
1000ada8:	a006973a 	slli	r3,r20,28
1000adac:	2085883a 	add	r2,r4,r2
1000adb0:	9826d13a 	srli	r19,r19,4
1000adb4:	10800003 	ldbu	r2,0(r2)
1000adb8:	a028d13a 	srli	r20,r20,4
1000adbc:	bdffffc4 	addi	r23,r23,-1
1000adc0:	1ce6b03a 	or	r19,r3,r19
1000adc4:	b8800005 	stb	r2,0(r23)
1000adc8:	9d04b03a 	or	r2,r19,r20
1000adcc:	103ff51e 	bne	r2,zero,1000ada4 <__alt_data_end+0xf800ada4>
1000add0:	d8801e17 	ldw	r2,120(sp)
1000add4:	15e9c83a 	sub	r20,r2,r23
1000add8:	003d2b06 	br	1000a288 <__alt_data_end+0xf800a288>
1000addc:	d9402017 	ldw	r5,128(sp)
1000ade0:	d9002117 	ldw	r4,132(sp)
1000ade4:	d9801a04 	addi	r6,sp,104
1000ade8:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000adec:	103f5b1e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000adf0:	d8801c17 	ldw	r2,112(sp)
1000adf4:	d811883a 	mov	r8,sp
1000adf8:	003f6706 	br	1000ab98 <__alt_data_end+0xf800ab98>
1000adfc:	d9402017 	ldw	r5,128(sp)
1000ae00:	d9002117 	ldw	r4,132(sp)
1000ae04:	d9801a04 	addi	r6,sp,104
1000ae08:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000ae0c:	103f531e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000ae10:	d811883a 	mov	r8,sp
1000ae14:	003cd906 	br	1000a17c <__alt_data_end+0xf800a17c>
1000ae18:	10803fcc 	andi	r2,r2,255
1000ae1c:	1080201c 	xori	r2,r2,128
1000ae20:	10bfe004 	addi	r2,r2,-128
1000ae24:	00c00c04 	movi	r3,48
1000ae28:	10ffe926 	beq	r2,r3,1000add0 <__alt_data_end+0xf800add0>
1000ae2c:	b8ffffc5 	stb	r3,-1(r23)
1000ae30:	d8c01e17 	ldw	r3,120(sp)
1000ae34:	b8bfffc4 	addi	r2,r23,-1
1000ae38:	102f883a 	mov	r23,r2
1000ae3c:	18a9c83a 	sub	r20,r3,r2
1000ae40:	003d1106 	br	1000a288 <__alt_data_end+0xf800a288>
1000ae44:	d9402017 	ldw	r5,128(sp)
1000ae48:	d9002117 	ldw	r4,132(sp)
1000ae4c:	d9801a04 	addi	r6,sp,104
1000ae50:	d8c02a15 	stw	r3,168(sp)
1000ae54:	d9c02b15 	stw	r7,172(sp)
1000ae58:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000ae5c:	d8c02a17 	ldw	r3,168(sp)
1000ae60:	d9c02b17 	ldw	r7,172(sp)
1000ae64:	103f3d1e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000ae68:	d9001b17 	ldw	r4,108(sp)
1000ae6c:	d8801c17 	ldw	r2,112(sp)
1000ae70:	d811883a 	mov	r8,sp
1000ae74:	21400044 	addi	r5,r4,1
1000ae78:	003d4406 	br	1000a38c <__alt_data_end+0xf800a38c>
1000ae7c:	d9402017 	ldw	r5,128(sp)
1000ae80:	d9002117 	ldw	r4,132(sp)
1000ae84:	d9801a04 	addi	r6,sp,104
1000ae88:	d8c02a15 	stw	r3,168(sp)
1000ae8c:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000ae90:	d8c02a17 	ldw	r3,168(sp)
1000ae94:	103f311e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000ae98:	d9001b17 	ldw	r4,108(sp)
1000ae9c:	d8801c17 	ldw	r2,112(sp)
1000aea0:	d811883a 	mov	r8,sp
1000aea4:	21400044 	addi	r5,r4,1
1000aea8:	003ef406 	br	1000aa7c <__alt_data_end+0xf800aa7c>
1000aeac:	1000bd1e 	bne	r2,zero,1000b1a4 <___vfiprintf_internal_r+0x1328>
1000aeb0:	01400044 	movi	r5,1
1000aeb4:	0009883a 	mov	r4,zero
1000aeb8:	d811883a 	mov	r8,sp
1000aebc:	003ef106 	br	1000aa84 <__alt_data_end+0xf800aa84>
1000aec0:	d9402017 	ldw	r5,128(sp)
1000aec4:	d9002117 	ldw	r4,132(sp)
1000aec8:	d9801a04 	addi	r6,sp,104
1000aecc:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000aed0:	103f221e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000aed4:	d9401b17 	ldw	r5,108(sp)
1000aed8:	d8801c17 	ldw	r2,112(sp)
1000aedc:	d811883a 	mov	r8,sp
1000aee0:	29400044 	addi	r5,r5,1
1000aee4:	003d6206 	br	1000a470 <__alt_data_end+0xf800a470>
1000aee8:	01440074 	movhi	r5,4097
1000aeec:	2948f404 	addi	r5,r5,9168
1000aef0:	d9402615 	stw	r5,152(sp)
1000aef4:	d8c02215 	stw	r3,136(sp)
1000aef8:	1023883a 	mov	r17,r2
1000aefc:	9d04b03a 	or	r2,r19,r20
1000af00:	103fa51e 	bne	r2,zero,1000ad98 <__alt_data_end+0xf800ad98>
1000af04:	002b883a 	mov	r21,zero
1000af08:	00800084 	movi	r2,2
1000af0c:	003e4a06 	br	1000a838 <__alt_data_end+0xf800a838>
1000af10:	01440074 	movhi	r5,4097
1000af14:	2948f404 	addi	r5,r5,9168
1000af18:	002b883a 	mov	r21,zero
1000af1c:	d9402615 	stw	r5,152(sp)
1000af20:	003f9e06 	br	1000ad9c <__alt_data_end+0xf800ad9c>
1000af24:	d9402217 	ldw	r5,136(sp)
1000af28:	d8001d85 	stb	zero,118(sp)
1000af2c:	0029883a 	mov	r20,zero
1000af30:	28800104 	addi	r2,r5,4
1000af34:	2cc00017 	ldw	r19,0(r5)
1000af38:	803e3a16 	blt	r16,zero,1000a824 <__alt_data_end+0xf800a824>
1000af3c:	00ffdfc4 	movi	r3,-129
1000af40:	d8802215 	stw	r2,136(sp)
1000af44:	88e2703a 	and	r17,r17,r3
1000af48:	002b883a 	mov	r21,zero
1000af4c:	983e9b26 	beq	r19,zero,1000a9bc <__alt_data_end+0xf800a9bc>
1000af50:	00800244 	movi	r2,9
1000af54:	14fdc936 	bltu	r2,r19,1000a67c <__alt_data_end+0xf800a67c>
1000af58:	003e9a06 	br	1000a9c4 <__alt_data_end+0xf800a9c4>
1000af5c:	00800c04 	movi	r2,48
1000af60:	d8c01d45 	stb	r3,117(sp)
1000af64:	d8801d05 	stb	r2,116(sp)
1000af68:	d8001d85 	stb	zero,118(sp)
1000af6c:	88c00094 	ori	r3,r17,2
1000af70:	80009c16 	blt	r16,zero,1000b1e4 <___vfiprintf_internal_r+0x1368>
1000af74:	00bfdfc4 	movi	r2,-129
1000af78:	88a2703a 	and	r17,r17,r2
1000af7c:	8c400094 	ori	r17,r17,2
1000af80:	002b883a 	mov	r21,zero
1000af84:	003f8506 	br	1000ad9c <__alt_data_end+0xf800ad9c>
1000af88:	b029883a 	mov	r20,r22
1000af8c:	003c0b06 	br	10009fbc <__alt_data_end+0xf8009fbc>
1000af90:	04e7c83a 	sub	r19,zero,r19
1000af94:	05400b44 	movi	r21,45
1000af98:	9804c03a 	cmpne	r2,r19,zero
1000af9c:	0529c83a 	sub	r20,zero,r20
1000afa0:	dd401d85 	stb	r21,118(sp)
1000afa4:	a0a9c83a 	sub	r20,r20,r2
1000afa8:	80009716 	blt	r16,zero,1000b208 <___vfiprintf_internal_r+0x138c>
1000afac:	00bfdfc4 	movi	r2,-129
1000afb0:	88a2703a 	and	r17,r17,r2
1000afb4:	003db006 	br	1000a678 <__alt_data_end+0xf800a678>
1000afb8:	b0c00007 	ldb	r3,0(r22)
1000afbc:	003c0c06 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000afc0:	8880100c 	andi	r2,r17,64
1000afc4:	d8001d85 	stb	zero,118(sp)
1000afc8:	1000461e 	bne	r2,zero,1000b0e4 <___vfiprintf_internal_r+0x1268>
1000afcc:	d9002217 	ldw	r4,136(sp)
1000afd0:	0029883a 	mov	r20,zero
1000afd4:	20800104 	addi	r2,r4,4
1000afd8:	24c00017 	ldw	r19,0(r4)
1000afdc:	803df80e 	bge	r16,zero,1000a7c0 <__alt_data_end+0xf800a7c0>
1000afe0:	9d06b03a 	or	r3,r19,r20
1000afe4:	d8802215 	stw	r2,136(sp)
1000afe8:	183d5e1e 	bne	r3,zero,1000a564 <__alt_data_end+0xf800a564>
1000afec:	002b883a 	mov	r21,zero
1000aff0:	0005883a 	mov	r2,zero
1000aff4:	003e1006 	br	1000a838 <__alt_data_end+0xf800a838>
1000aff8:	8880040c 	andi	r2,r17,16
1000affc:	1000321e 	bne	r2,zero,1000b0c8 <___vfiprintf_internal_r+0x124c>
1000b000:	8c40100c 	andi	r17,r17,64
1000b004:	88008d26 	beq	r17,zero,1000b23c <___vfiprintf_internal_r+0x13c0>
1000b008:	d9402217 	ldw	r5,136(sp)
1000b00c:	d8c02417 	ldw	r3,144(sp)
1000b010:	28800017 	ldw	r2,0(r5)
1000b014:	29400104 	addi	r5,r5,4
1000b018:	d9402215 	stw	r5,136(sp)
1000b01c:	10c0000d 	sth	r3,0(r2)
1000b020:	003bca06 	br	10009f4c <__alt_data_end+0xf8009f4c>
1000b024:	8880100c 	andi	r2,r17,64
1000b028:	10003a26 	beq	r2,zero,1000b114 <___vfiprintf_internal_r+0x1298>
1000b02c:	d8802217 	ldw	r2,136(sp)
1000b030:	14c0000f 	ldh	r19,0(r2)
1000b034:	10800104 	addi	r2,r2,4
1000b038:	d8802215 	stw	r2,136(sp)
1000b03c:	9829d7fa 	srai	r20,r19,31
1000b040:	a005883a 	mov	r2,r20
1000b044:	003d8506 	br	1000a65c <__alt_data_end+0xf800a65c>
1000b048:	8880100c 	andi	r2,r17,64
1000b04c:	10002b26 	beq	r2,zero,1000b0fc <___vfiprintf_internal_r+0x1280>
1000b050:	d8802217 	ldw	r2,136(sp)
1000b054:	0029883a 	mov	r20,zero
1000b058:	14c0000b 	ldhu	r19,0(r2)
1000b05c:	10800104 	addi	r2,r2,4
1000b060:	d8802215 	stw	r2,136(sp)
1000b064:	003d5d06 	br	1000a5dc <__alt_data_end+0xf800a5dc>
1000b068:	d9402017 	ldw	r5,128(sp)
1000b06c:	d9002117 	ldw	r4,132(sp)
1000b070:	d9801a04 	addi	r6,sp,104
1000b074:	d8c02a15 	stw	r3,168(sp)
1000b078:	d9c02b15 	stw	r7,172(sp)
1000b07c:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000b080:	d8c02a17 	ldw	r3,168(sp)
1000b084:	d9c02b17 	ldw	r7,172(sp)
1000b088:	103eb41e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000b08c:	d9001b17 	ldw	r4,108(sp)
1000b090:	d8801c17 	ldw	r2,112(sp)
1000b094:	d811883a 	mov	r8,sp
1000b098:	21400044 	addi	r5,r4,1
1000b09c:	003e6706 	br	1000aa3c <__alt_data_end+0xf800aa3c>
1000b0a0:	00bfffc4 	movi	r2,-1
1000b0a4:	003c4a06 	br	1000a1d0 <__alt_data_end+0xf800a1d0>
1000b0a8:	9805883a 	mov	r2,r19
1000b0ac:	003ee806 	br	1000ac50 <__alt_data_end+0xf800ac50>
1000b0b0:	d8c02217 	ldw	r3,136(sp)
1000b0b4:	0029883a 	mov	r20,zero
1000b0b8:	18800104 	addi	r2,r3,4
1000b0bc:	1cc0000b 	ldhu	r19,0(r3)
1000b0c0:	803f9e0e 	bge	r16,zero,1000af3c <__alt_data_end+0xf800af3c>
1000b0c4:	003dd706 	br	1000a824 <__alt_data_end+0xf800a824>
1000b0c8:	d8c02217 	ldw	r3,136(sp)
1000b0cc:	d9002417 	ldw	r4,144(sp)
1000b0d0:	18800017 	ldw	r2,0(r3)
1000b0d4:	18c00104 	addi	r3,r3,4
1000b0d8:	d8c02215 	stw	r3,136(sp)
1000b0dc:	11000015 	stw	r4,0(r2)
1000b0e0:	003b9a06 	br	10009f4c <__alt_data_end+0xf8009f4c>
1000b0e4:	d8c02217 	ldw	r3,136(sp)
1000b0e8:	0029883a 	mov	r20,zero
1000b0ec:	18800104 	addi	r2,r3,4
1000b0f0:	1cc0000b 	ldhu	r19,0(r3)
1000b0f4:	803db20e 	bge	r16,zero,1000a7c0 <__alt_data_end+0xf800a7c0>
1000b0f8:	003fb906 	br	1000afe0 <__alt_data_end+0xf800afe0>
1000b0fc:	d9002217 	ldw	r4,136(sp)
1000b100:	0029883a 	mov	r20,zero
1000b104:	24c00017 	ldw	r19,0(r4)
1000b108:	21000104 	addi	r4,r4,4
1000b10c:	d9002215 	stw	r4,136(sp)
1000b110:	003d3206 	br	1000a5dc <__alt_data_end+0xf800a5dc>
1000b114:	d8c02217 	ldw	r3,136(sp)
1000b118:	1cc00017 	ldw	r19,0(r3)
1000b11c:	18c00104 	addi	r3,r3,4
1000b120:	d8c02215 	stw	r3,136(sp)
1000b124:	9829d7fa 	srai	r20,r19,31
1000b128:	a005883a 	mov	r2,r20
1000b12c:	003d4b06 	br	1000a65c <__alt_data_end+0xf800a65c>
1000b130:	0009883a 	mov	r4,zero
1000b134:	01400044 	movi	r5,1
1000b138:	d811883a 	mov	r8,sp
1000b13c:	003e4f06 	br	1000aa7c <__alt_data_end+0xf800aa7c>
1000b140:	d8c02215 	stw	r3,136(sp)
1000b144:	002b883a 	mov	r21,zero
1000b148:	003db806 	br	1000a82c <__alt_data_end+0xf800a82c>
1000b14c:	d811883a 	mov	r8,sp
1000b150:	003e9606 	br	1000abac <__alt_data_end+0xf800abac>
1000b154:	01040074 	movhi	r4,4097
1000b158:	21095504 	addi	r4,r4,9556
1000b15c:	d9002315 	stw	r4,140(sp)
1000b160:	003e6306 	br	1000aaf0 <__alt_data_end+0xf800aaf0>
1000b164:	b0c00043 	ldbu	r3,1(r22)
1000b168:	8c400814 	ori	r17,r17,32
1000b16c:	b5800044 	addi	r22,r22,1
1000b170:	18c03fcc 	andi	r3,r3,255
1000b174:	18c0201c 	xori	r3,r3,128
1000b178:	18ffe004 	addi	r3,r3,-128
1000b17c:	003b9c06 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000b180:	b809883a 	mov	r4,r23
1000b184:	da002a15 	stw	r8,168(sp)
1000b188:	00025ec0 	call	100025ec <strlen>
1000b18c:	1029883a 	mov	r20,r2
1000b190:	dd401d83 	ldbu	r21,118(sp)
1000b194:	df002215 	stw	fp,136(sp)
1000b198:	0021883a 	mov	r16,zero
1000b19c:	da002a17 	ldw	r8,168(sp)
1000b1a0:	003c3906 	br	1000a288 <__alt_data_end+0xf800a288>
1000b1a4:	d9402017 	ldw	r5,128(sp)
1000b1a8:	d9002117 	ldw	r4,132(sp)
1000b1ac:	d9801a04 	addi	r6,sp,104
1000b1b0:	0009d680 	call	10009d68 <__sprint_r.part.0>
1000b1b4:	103e691e 	bne	r2,zero,1000ab5c <__alt_data_end+0xf800ab5c>
1000b1b8:	d9001b17 	ldw	r4,108(sp)
1000b1bc:	d8801c17 	ldw	r2,112(sp)
1000b1c0:	d811883a 	mov	r8,sp
1000b1c4:	21400044 	addi	r5,r4,1
1000b1c8:	003e2e06 	br	1000aa84 <__alt_data_end+0xf800aa84>
1000b1cc:	01040074 	movhi	r4,4097
1000b1d0:	21095904 	addi	r4,r4,9572
1000b1d4:	d9002315 	stw	r4,140(sp)
1000b1d8:	d9001b17 	ldw	r4,108(sp)
1000b1dc:	21000044 	addi	r4,r4,1
1000b1e0:	003c5e06 	br	1000a35c <__alt_data_end+0xf800a35c>
1000b1e4:	002b883a 	mov	r21,zero
1000b1e8:	00800084 	movi	r2,2
1000b1ec:	10803fcc 	andi	r2,r2,255
1000b1f0:	01000044 	movi	r4,1
1000b1f4:	11002b26 	beq	r2,r4,1000b2a4 <___vfiprintf_internal_r+0x1428>
1000b1f8:	01000084 	movi	r4,2
1000b1fc:	11002b1e 	bne	r2,r4,1000b2ac <___vfiprintf_internal_r+0x1430>
1000b200:	1823883a 	mov	r17,r3
1000b204:	003ee506 	br	1000ad9c <__alt_data_end+0xf800ad9c>
1000b208:	8807883a 	mov	r3,r17
1000b20c:	00800044 	movi	r2,1
1000b210:	003ff606 	br	1000b1ec <__alt_data_end+0xf800b1ec>
1000b214:	00800184 	movi	r2,6
1000b218:	1400012e 	bgeu	r2,r16,1000b220 <___vfiprintf_internal_r+0x13a4>
1000b21c:	1021883a 	mov	r16,r2
1000b220:	8029883a 	mov	r20,r16
1000b224:	8027883a 	mov	r19,r16
1000b228:	80002216 	blt	r16,zero,1000b2b4 <___vfiprintf_internal_r+0x1438>
1000b22c:	05c40074 	movhi	r23,4097
1000b230:	df002215 	stw	fp,136(sp)
1000b234:	bdc8f904 	addi	r23,r23,9188
1000b238:	003cfb06 	br	1000a628 <__alt_data_end+0xf800a628>
1000b23c:	d9002217 	ldw	r4,136(sp)
1000b240:	d9402417 	ldw	r5,144(sp)
1000b244:	20800017 	ldw	r2,0(r4)
1000b248:	21000104 	addi	r4,r4,4
1000b24c:	d9002215 	stw	r4,136(sp)
1000b250:	11400015 	stw	r5,0(r2)
1000b254:	003b3d06 	br	10009f4c <__alt_data_end+0xf8009f4c>
1000b258:	01440074 	movhi	r5,4097
1000b25c:	29495904 	addi	r5,r5,9572
1000b260:	d9402315 	stw	r5,140(sp)
1000b264:	d9401b17 	ldw	r5,108(sp)
1000b268:	29400044 	addi	r5,r5,1
1000b26c:	003e6d06 	br	1000ac24 <__alt_data_end+0xf800ac24>
1000b270:	8029883a 	mov	r20,r16
1000b274:	dd401d83 	ldbu	r21,118(sp)
1000b278:	df002215 	stw	fp,136(sp)
1000b27c:	0021883a 	mov	r16,zero
1000b280:	003c0106 	br	1000a288 <__alt_data_end+0xf800a288>
1000b284:	00c40074 	movhi	r3,4097
1000b288:	18c95504 	addi	r3,r3,9556
1000b28c:	d8c02315 	stw	r3,140(sp)
1000b290:	280d883a 	mov	r6,r5
1000b294:	003c6906 	br	1000a43c <__alt_data_end+0xf800a43c>
1000b298:	802d883a 	mov	r22,r16
1000b29c:	0021883a 	mov	r16,zero
1000b2a0:	003b5406 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000b2a4:	1823883a 	mov	r17,r3
1000b2a8:	003cf306 	br	1000a678 <__alt_data_end+0xf800a678>
1000b2ac:	1823883a 	mov	r17,r3
1000b2b0:	003cad06 	br	1000a568 <__alt_data_end+0xf800a568>
1000b2b4:	0027883a 	mov	r19,zero
1000b2b8:	003fdc06 	br	1000b22c <__alt_data_end+0xf800b22c>
1000b2bc:	d9402217 	ldw	r5,136(sp)
1000b2c0:	8005883a 	mov	r2,r16
1000b2c4:	b0c00043 	ldbu	r3,1(r22)
1000b2c8:	2c000017 	ldw	r16,0(r5)
1000b2cc:	29000104 	addi	r4,r5,4
1000b2d0:	d9002215 	stw	r4,136(sp)
1000b2d4:	102d883a 	mov	r22,r2
1000b2d8:	803fa50e 	bge	r16,zero,1000b170 <__alt_data_end+0xf800b170>
1000b2dc:	18c03fcc 	andi	r3,r3,255
1000b2e0:	18c0201c 	xori	r3,r3,128
1000b2e4:	043fffc4 	movi	r16,-1
1000b2e8:	18ffe004 	addi	r3,r3,-128
1000b2ec:	003b4006 	br	10009ff0 <__alt_data_end+0xf8009ff0>
1000b2f0:	d9402303 	ldbu	r5,140(sp)
1000b2f4:	d9401d85 	stb	r5,118(sp)
1000b2f8:	003cae06 	br	1000a5b4 <__alt_data_end+0xf800a5b4>
1000b2fc:	d8c02303 	ldbu	r3,140(sp)
1000b300:	d8c01d85 	stb	r3,118(sp)
1000b304:	003d1406 	br	1000a758 <__alt_data_end+0xf800a758>
1000b308:	d8c02303 	ldbu	r3,140(sp)
1000b30c:	d8c01d85 	stb	r3,118(sp)
1000b310:	003cca06 	br	1000a63c <__alt_data_end+0xf800a63c>
1000b314:	8880004c 	andi	r2,r17,1
1000b318:	002b883a 	mov	r21,zero
1000b31c:	10000526 	beq	r2,zero,1000b334 <___vfiprintf_internal_r+0x14b8>
1000b320:	00800c04 	movi	r2,48
1000b324:	d88019c5 	stb	r2,103(sp)
1000b328:	dd002817 	ldw	r20,160(sp)
1000b32c:	ddc019c4 	addi	r23,sp,103
1000b330:	003bd506 	br	1000a288 <__alt_data_end+0xf800a288>
1000b334:	0029883a 	mov	r20,zero
1000b338:	ddc01a04 	addi	r23,sp,104
1000b33c:	003bd206 	br	1000a288 <__alt_data_end+0xf800a288>
1000b340:	d9002303 	ldbu	r4,140(sp)
1000b344:	d9001d85 	stb	r4,118(sp)
1000b348:	003da606 	br	1000a9e4 <__alt_data_end+0xf800a9e4>
1000b34c:	d8c02303 	ldbu	r3,140(sp)
1000b350:	d8c01d85 	stb	r3,118(sp)
1000b354:	003c7606 	br	1000a530 <__alt_data_end+0xf800a530>
1000b358:	d8c02303 	ldbu	r3,140(sp)
1000b35c:	d8c01d85 	stb	r3,118(sp)
1000b360:	003c6506 	br	1000a4f8 <__alt_data_end+0xf800a4f8>
1000b364:	d9002303 	ldbu	r4,140(sp)
1000b368:	d9001d85 	stb	r4,118(sp)
1000b36c:	003d3d06 	br	1000a864 <__alt_data_end+0xf800a864>
1000b370:	d8c02303 	ldbu	r3,140(sp)
1000b374:	d8c01d85 	stb	r3,118(sp)
1000b378:	003d1d06 	br	1000a7f0 <__alt_data_end+0xf800a7f0>
1000b37c:	d8c02303 	ldbu	r3,140(sp)
1000b380:	d8c01d85 	stb	r3,118(sp)
1000b384:	003d0306 	br	1000a794 <__alt_data_end+0xf800a794>

1000b388 <__vfiprintf_internal>:
1000b388:	00840074 	movhi	r2,4097
1000b38c:	10905704 	addi	r2,r2,16732
1000b390:	300f883a 	mov	r7,r6
1000b394:	280d883a 	mov	r6,r5
1000b398:	200b883a 	mov	r5,r4
1000b39c:	11000017 	ldw	r4,0(r2)
1000b3a0:	0009e7c1 	jmpi	10009e7c <___vfiprintf_internal_r>

1000b3a4 <__sbprintf>:
1000b3a4:	2880030b 	ldhu	r2,12(r5)
1000b3a8:	2ac01917 	ldw	r11,100(r5)
1000b3ac:	2a80038b 	ldhu	r10,14(r5)
1000b3b0:	2a400717 	ldw	r9,28(r5)
1000b3b4:	2a000917 	ldw	r8,36(r5)
1000b3b8:	defee204 	addi	sp,sp,-1144
1000b3bc:	00c10004 	movi	r3,1024
1000b3c0:	dc011a15 	stw	r16,1128(sp)
1000b3c4:	10bfff4c 	andi	r2,r2,65533
1000b3c8:	2821883a 	mov	r16,r5
1000b3cc:	d8cb883a 	add	r5,sp,r3
1000b3d0:	dc811c15 	stw	r18,1136(sp)
1000b3d4:	dc411b15 	stw	r17,1132(sp)
1000b3d8:	dfc11d15 	stw	ra,1140(sp)
1000b3dc:	2025883a 	mov	r18,r4
1000b3e0:	d881030d 	sth	r2,1036(sp)
1000b3e4:	dac11915 	stw	r11,1124(sp)
1000b3e8:	da81038d 	sth	r10,1038(sp)
1000b3ec:	da410715 	stw	r9,1052(sp)
1000b3f0:	da010915 	stw	r8,1060(sp)
1000b3f4:	dec10015 	stw	sp,1024(sp)
1000b3f8:	dec10415 	stw	sp,1040(sp)
1000b3fc:	d8c10215 	stw	r3,1032(sp)
1000b400:	d8c10515 	stw	r3,1044(sp)
1000b404:	d8010615 	stw	zero,1048(sp)
1000b408:	0009e7c0 	call	10009e7c <___vfiprintf_internal_r>
1000b40c:	1023883a 	mov	r17,r2
1000b410:	10000416 	blt	r2,zero,1000b424 <__sbprintf+0x80>
1000b414:	d9410004 	addi	r5,sp,1024
1000b418:	9009883a 	mov	r4,r18
1000b41c:	00066580 	call	10006658 <_fflush_r>
1000b420:	10000d1e 	bne	r2,zero,1000b458 <__sbprintf+0xb4>
1000b424:	d881030b 	ldhu	r2,1036(sp)
1000b428:	1080100c 	andi	r2,r2,64
1000b42c:	10000326 	beq	r2,zero,1000b43c <__sbprintf+0x98>
1000b430:	8080030b 	ldhu	r2,12(r16)
1000b434:	10801014 	ori	r2,r2,64
1000b438:	8080030d 	sth	r2,12(r16)
1000b43c:	8805883a 	mov	r2,r17
1000b440:	dfc11d17 	ldw	ra,1140(sp)
1000b444:	dc811c17 	ldw	r18,1136(sp)
1000b448:	dc411b17 	ldw	r17,1132(sp)
1000b44c:	dc011a17 	ldw	r16,1128(sp)
1000b450:	dec11e04 	addi	sp,sp,1144
1000b454:	f800283a 	ret
1000b458:	047fffc4 	movi	r17,-1
1000b45c:	003ff106 	br	1000b424 <__alt_data_end+0xf800b424>

1000b460 <_write_r>:
1000b460:	defffd04 	addi	sp,sp,-12
1000b464:	2805883a 	mov	r2,r5
1000b468:	dc000015 	stw	r16,0(sp)
1000b46c:	04040074 	movhi	r16,4097
1000b470:	dc400115 	stw	r17,4(sp)
1000b474:	300b883a 	mov	r5,r6
1000b478:	84172904 	addi	r16,r16,23716
1000b47c:	2023883a 	mov	r17,r4
1000b480:	380d883a 	mov	r6,r7
1000b484:	1009883a 	mov	r4,r2
1000b488:	dfc00215 	stw	ra,8(sp)
1000b48c:	80000015 	stw	zero,0(r16)
1000b490:	000fcb00 	call	1000fcb0 <write>
1000b494:	00ffffc4 	movi	r3,-1
1000b498:	10c00526 	beq	r2,r3,1000b4b0 <_write_r+0x50>
1000b49c:	dfc00217 	ldw	ra,8(sp)
1000b4a0:	dc400117 	ldw	r17,4(sp)
1000b4a4:	dc000017 	ldw	r16,0(sp)
1000b4a8:	dec00304 	addi	sp,sp,12
1000b4ac:	f800283a 	ret
1000b4b0:	80c00017 	ldw	r3,0(r16)
1000b4b4:	183ff926 	beq	r3,zero,1000b49c <__alt_data_end+0xf800b49c>
1000b4b8:	88c00015 	stw	r3,0(r17)
1000b4bc:	003ff706 	br	1000b49c <__alt_data_end+0xf800b49c>

1000b4c0 <_close_r>:
1000b4c0:	defffd04 	addi	sp,sp,-12
1000b4c4:	dc000015 	stw	r16,0(sp)
1000b4c8:	04040074 	movhi	r16,4097
1000b4cc:	dc400115 	stw	r17,4(sp)
1000b4d0:	84172904 	addi	r16,r16,23716
1000b4d4:	2023883a 	mov	r17,r4
1000b4d8:	2809883a 	mov	r4,r5
1000b4dc:	dfc00215 	stw	ra,8(sp)
1000b4e0:	80000015 	stw	zero,0(r16)
1000b4e4:	000f4280 	call	1000f428 <close>
1000b4e8:	00ffffc4 	movi	r3,-1
1000b4ec:	10c00526 	beq	r2,r3,1000b504 <_close_r+0x44>
1000b4f0:	dfc00217 	ldw	ra,8(sp)
1000b4f4:	dc400117 	ldw	r17,4(sp)
1000b4f8:	dc000017 	ldw	r16,0(sp)
1000b4fc:	dec00304 	addi	sp,sp,12
1000b500:	f800283a 	ret
1000b504:	80c00017 	ldw	r3,0(r16)
1000b508:	183ff926 	beq	r3,zero,1000b4f0 <__alt_data_end+0xf800b4f0>
1000b50c:	88c00015 	stw	r3,0(r17)
1000b510:	003ff706 	br	1000b4f0 <__alt_data_end+0xf800b4f0>

1000b514 <_calloc_r>:
1000b514:	defffe04 	addi	sp,sp,-8
1000b518:	2805883a 	mov	r2,r5
1000b51c:	dc000015 	stw	r16,0(sp)
1000b520:	300b883a 	mov	r5,r6
1000b524:	2021883a 	mov	r16,r4
1000b528:	1009883a 	mov	r4,r2
1000b52c:	dfc00115 	stw	ra,4(sp)
1000b530:	000cb200 	call	1000cb20 <__mulsi3>
1000b534:	100b883a 	mov	r5,r2
1000b538:	8009883a 	mov	r4,r16
1000b53c:	00077b00 	call	100077b0 <_malloc_r>
1000b540:	10002926 	beq	r2,zero,1000b5e8 <_calloc_r+0xd4>
1000b544:	11bfff17 	ldw	r6,-4(r2)
1000b548:	1021883a 	mov	r16,r2
1000b54c:	00bfff04 	movi	r2,-4
1000b550:	308c703a 	and	r6,r6,r2
1000b554:	00c00904 	movi	r3,36
1000b558:	308d883a 	add	r6,r6,r2
1000b55c:	19801636 	bltu	r3,r6,1000b5b8 <_calloc_r+0xa4>
1000b560:	008004c4 	movi	r2,19
1000b564:	11800b2e 	bgeu	r2,r6,1000b594 <_calloc_r+0x80>
1000b568:	80000015 	stw	zero,0(r16)
1000b56c:	80000115 	stw	zero,4(r16)
1000b570:	008006c4 	movi	r2,27
1000b574:	11801a2e 	bgeu	r2,r6,1000b5e0 <_calloc_r+0xcc>
1000b578:	80000215 	stw	zero,8(r16)
1000b57c:	80000315 	stw	zero,12(r16)
1000b580:	30c0151e 	bne	r6,r3,1000b5d8 <_calloc_r+0xc4>
1000b584:	80000415 	stw	zero,16(r16)
1000b588:	80800604 	addi	r2,r16,24
1000b58c:	80000515 	stw	zero,20(r16)
1000b590:	00000106 	br	1000b598 <_calloc_r+0x84>
1000b594:	8005883a 	mov	r2,r16
1000b598:	10000015 	stw	zero,0(r2)
1000b59c:	10000115 	stw	zero,4(r2)
1000b5a0:	10000215 	stw	zero,8(r2)
1000b5a4:	8005883a 	mov	r2,r16
1000b5a8:	dfc00117 	ldw	ra,4(sp)
1000b5ac:	dc000017 	ldw	r16,0(sp)
1000b5b0:	dec00204 	addi	sp,sp,8
1000b5b4:	f800283a 	ret
1000b5b8:	000b883a 	mov	r5,zero
1000b5bc:	8009883a 	mov	r4,r16
1000b5c0:	00083440 	call	10008344 <memset>
1000b5c4:	8005883a 	mov	r2,r16
1000b5c8:	dfc00117 	ldw	ra,4(sp)
1000b5cc:	dc000017 	ldw	r16,0(sp)
1000b5d0:	dec00204 	addi	sp,sp,8
1000b5d4:	f800283a 	ret
1000b5d8:	80800404 	addi	r2,r16,16
1000b5dc:	003fee06 	br	1000b598 <__alt_data_end+0xf800b598>
1000b5e0:	80800204 	addi	r2,r16,8
1000b5e4:	003fec06 	br	1000b598 <__alt_data_end+0xf800b598>
1000b5e8:	0005883a 	mov	r2,zero
1000b5ec:	003fee06 	br	1000b5a8 <__alt_data_end+0xf800b5a8>

1000b5f0 <_fclose_r>:
1000b5f0:	28003926 	beq	r5,zero,1000b6d8 <_fclose_r+0xe8>
1000b5f4:	defffc04 	addi	sp,sp,-16
1000b5f8:	dc400115 	stw	r17,4(sp)
1000b5fc:	dc000015 	stw	r16,0(sp)
1000b600:	dfc00315 	stw	ra,12(sp)
1000b604:	dc800215 	stw	r18,8(sp)
1000b608:	2023883a 	mov	r17,r4
1000b60c:	2821883a 	mov	r16,r5
1000b610:	20000226 	beq	r4,zero,1000b61c <_fclose_r+0x2c>
1000b614:	20800e17 	ldw	r2,56(r4)
1000b618:	10002726 	beq	r2,zero,1000b6b8 <_fclose_r+0xc8>
1000b61c:	8080030f 	ldh	r2,12(r16)
1000b620:	1000071e 	bne	r2,zero,1000b640 <_fclose_r+0x50>
1000b624:	0005883a 	mov	r2,zero
1000b628:	dfc00317 	ldw	ra,12(sp)
1000b62c:	dc800217 	ldw	r18,8(sp)
1000b630:	dc400117 	ldw	r17,4(sp)
1000b634:	dc000017 	ldw	r16,0(sp)
1000b638:	dec00404 	addi	sp,sp,16
1000b63c:	f800283a 	ret
1000b640:	800b883a 	mov	r5,r16
1000b644:	8809883a 	mov	r4,r17
1000b648:	000643c0 	call	1000643c <__sflush_r>
1000b64c:	1025883a 	mov	r18,r2
1000b650:	80800b17 	ldw	r2,44(r16)
1000b654:	10000426 	beq	r2,zero,1000b668 <_fclose_r+0x78>
1000b658:	81400717 	ldw	r5,28(r16)
1000b65c:	8809883a 	mov	r4,r17
1000b660:	103ee83a 	callr	r2
1000b664:	10001616 	blt	r2,zero,1000b6c0 <_fclose_r+0xd0>
1000b668:	8080030b 	ldhu	r2,12(r16)
1000b66c:	1080200c 	andi	r2,r2,128
1000b670:	1000151e 	bne	r2,zero,1000b6c8 <_fclose_r+0xd8>
1000b674:	81400c17 	ldw	r5,48(r16)
1000b678:	28000526 	beq	r5,zero,1000b690 <_fclose_r+0xa0>
1000b67c:	80801004 	addi	r2,r16,64
1000b680:	28800226 	beq	r5,r2,1000b68c <_fclose_r+0x9c>
1000b684:	8809883a 	mov	r4,r17
1000b688:	0006bb80 	call	10006bb8 <_free_r>
1000b68c:	80000c15 	stw	zero,48(r16)
1000b690:	81401117 	ldw	r5,68(r16)
1000b694:	28000326 	beq	r5,zero,1000b6a4 <_fclose_r+0xb4>
1000b698:	8809883a 	mov	r4,r17
1000b69c:	0006bb80 	call	10006bb8 <_free_r>
1000b6a0:	80001115 	stw	zero,68(r16)
1000b6a4:	0006a540 	call	10006a54 <__sfp_lock_acquire>
1000b6a8:	8000030d 	sth	zero,12(r16)
1000b6ac:	0006a580 	call	10006a58 <__sfp_lock_release>
1000b6b0:	9005883a 	mov	r2,r18
1000b6b4:	003fdc06 	br	1000b628 <__alt_data_end+0xf800b628>
1000b6b8:	0006a440 	call	10006a44 <__sinit>
1000b6bc:	003fd706 	br	1000b61c <__alt_data_end+0xf800b61c>
1000b6c0:	04bfffc4 	movi	r18,-1
1000b6c4:	003fe806 	br	1000b668 <__alt_data_end+0xf800b668>
1000b6c8:	81400417 	ldw	r5,16(r16)
1000b6cc:	8809883a 	mov	r4,r17
1000b6d0:	0006bb80 	call	10006bb8 <_free_r>
1000b6d4:	003fe706 	br	1000b674 <__alt_data_end+0xf800b674>
1000b6d8:	0005883a 	mov	r2,zero
1000b6dc:	f800283a 	ret

1000b6e0 <fclose>:
1000b6e0:	00840074 	movhi	r2,4097
1000b6e4:	10905704 	addi	r2,r2,16732
1000b6e8:	200b883a 	mov	r5,r4
1000b6ec:	11000017 	ldw	r4,0(r2)
1000b6f0:	000b5f01 	jmpi	1000b5f0 <_fclose_r>

1000b6f4 <__fputwc>:
1000b6f4:	defff804 	addi	sp,sp,-32
1000b6f8:	dcc00415 	stw	r19,16(sp)
1000b6fc:	dc800315 	stw	r18,12(sp)
1000b700:	dc000115 	stw	r16,4(sp)
1000b704:	dfc00715 	stw	ra,28(sp)
1000b708:	dd400615 	stw	r21,24(sp)
1000b70c:	dd000515 	stw	r20,20(sp)
1000b710:	dc400215 	stw	r17,8(sp)
1000b714:	2027883a 	mov	r19,r4
1000b718:	2825883a 	mov	r18,r5
1000b71c:	3021883a 	mov	r16,r6
1000b720:	00075a00 	call	100075a0 <__locale_mb_cur_max>
1000b724:	00c00044 	movi	r3,1
1000b728:	10c03e26 	beq	r2,r3,1000b824 <__fputwc+0x130>
1000b72c:	81c01704 	addi	r7,r16,92
1000b730:	900d883a 	mov	r6,r18
1000b734:	d80b883a 	mov	r5,sp
1000b738:	9809883a 	mov	r4,r19
1000b73c:	000bbc40 	call	1000bbc4 <_wcrtomb_r>
1000b740:	1029883a 	mov	r20,r2
1000b744:	00bfffc4 	movi	r2,-1
1000b748:	a0802026 	beq	r20,r2,1000b7cc <__fputwc+0xd8>
1000b74c:	d9400003 	ldbu	r5,0(sp)
1000b750:	a0001c26 	beq	r20,zero,1000b7c4 <__fputwc+0xd0>
1000b754:	0023883a 	mov	r17,zero
1000b758:	05400284 	movi	r21,10
1000b75c:	00000906 	br	1000b784 <__fputwc+0x90>
1000b760:	80800017 	ldw	r2,0(r16)
1000b764:	11400005 	stb	r5,0(r2)
1000b768:	80c00017 	ldw	r3,0(r16)
1000b76c:	18c00044 	addi	r3,r3,1
1000b770:	80c00015 	stw	r3,0(r16)
1000b774:	8c400044 	addi	r17,r17,1
1000b778:	dc45883a 	add	r2,sp,r17
1000b77c:	8d00112e 	bgeu	r17,r20,1000b7c4 <__fputwc+0xd0>
1000b780:	11400003 	ldbu	r5,0(r2)
1000b784:	80c00217 	ldw	r3,8(r16)
1000b788:	18ffffc4 	addi	r3,r3,-1
1000b78c:	80c00215 	stw	r3,8(r16)
1000b790:	183ff30e 	bge	r3,zero,1000b760 <__alt_data_end+0xf800b760>
1000b794:	80800617 	ldw	r2,24(r16)
1000b798:	18801916 	blt	r3,r2,1000b800 <__fputwc+0x10c>
1000b79c:	80800017 	ldw	r2,0(r16)
1000b7a0:	11400005 	stb	r5,0(r2)
1000b7a4:	80800017 	ldw	r2,0(r16)
1000b7a8:	10c00003 	ldbu	r3,0(r2)
1000b7ac:	10800044 	addi	r2,r2,1
1000b7b0:	1d402326 	beq	r3,r21,1000b840 <__fputwc+0x14c>
1000b7b4:	80800015 	stw	r2,0(r16)
1000b7b8:	8c400044 	addi	r17,r17,1
1000b7bc:	dc45883a 	add	r2,sp,r17
1000b7c0:	8d3fef36 	bltu	r17,r20,1000b780 <__alt_data_end+0xf800b780>
1000b7c4:	9005883a 	mov	r2,r18
1000b7c8:	00000406 	br	1000b7dc <__fputwc+0xe8>
1000b7cc:	80c0030b 	ldhu	r3,12(r16)
1000b7d0:	a005883a 	mov	r2,r20
1000b7d4:	18c01014 	ori	r3,r3,64
1000b7d8:	80c0030d 	sth	r3,12(r16)
1000b7dc:	dfc00717 	ldw	ra,28(sp)
1000b7e0:	dd400617 	ldw	r21,24(sp)
1000b7e4:	dd000517 	ldw	r20,20(sp)
1000b7e8:	dcc00417 	ldw	r19,16(sp)
1000b7ec:	dc800317 	ldw	r18,12(sp)
1000b7f0:	dc400217 	ldw	r17,8(sp)
1000b7f4:	dc000117 	ldw	r16,4(sp)
1000b7f8:	dec00804 	addi	sp,sp,32
1000b7fc:	f800283a 	ret
1000b800:	800d883a 	mov	r6,r16
1000b804:	29403fcc 	andi	r5,r5,255
1000b808:	9809883a 	mov	r4,r19
1000b80c:	000ba6c0 	call	1000ba6c <__swbuf_r>
1000b810:	10bfffe0 	cmpeqi	r2,r2,-1
1000b814:	10803fcc 	andi	r2,r2,255
1000b818:	103fd626 	beq	r2,zero,1000b774 <__alt_data_end+0xf800b774>
1000b81c:	00bfffc4 	movi	r2,-1
1000b820:	003fee06 	br	1000b7dc <__alt_data_end+0xf800b7dc>
1000b824:	90ffffc4 	addi	r3,r18,-1
1000b828:	01003f84 	movi	r4,254
1000b82c:	20ffbf36 	bltu	r4,r3,1000b72c <__alt_data_end+0xf800b72c>
1000b830:	900b883a 	mov	r5,r18
1000b834:	dc800005 	stb	r18,0(sp)
1000b838:	1029883a 	mov	r20,r2
1000b83c:	003fc506 	br	1000b754 <__alt_data_end+0xf800b754>
1000b840:	800d883a 	mov	r6,r16
1000b844:	a80b883a 	mov	r5,r21
1000b848:	9809883a 	mov	r4,r19
1000b84c:	000ba6c0 	call	1000ba6c <__swbuf_r>
1000b850:	10bfffe0 	cmpeqi	r2,r2,-1
1000b854:	003fef06 	br	1000b814 <__alt_data_end+0xf800b814>

1000b858 <_fputwc_r>:
1000b858:	3080030b 	ldhu	r2,12(r6)
1000b85c:	10c8000c 	andi	r3,r2,8192
1000b860:	1800051e 	bne	r3,zero,1000b878 <_fputwc_r+0x20>
1000b864:	30c01917 	ldw	r3,100(r6)
1000b868:	10880014 	ori	r2,r2,8192
1000b86c:	3080030d 	sth	r2,12(r6)
1000b870:	18880014 	ori	r2,r3,8192
1000b874:	30801915 	stw	r2,100(r6)
1000b878:	000b6f41 	jmpi	1000b6f4 <__fputwc>

1000b87c <fputwc>:
1000b87c:	00840074 	movhi	r2,4097
1000b880:	defffc04 	addi	sp,sp,-16
1000b884:	10905704 	addi	r2,r2,16732
1000b888:	dc000115 	stw	r16,4(sp)
1000b88c:	14000017 	ldw	r16,0(r2)
1000b890:	dc400215 	stw	r17,8(sp)
1000b894:	dfc00315 	stw	ra,12(sp)
1000b898:	2023883a 	mov	r17,r4
1000b89c:	80000226 	beq	r16,zero,1000b8a8 <fputwc+0x2c>
1000b8a0:	80800e17 	ldw	r2,56(r16)
1000b8a4:	10001026 	beq	r2,zero,1000b8e8 <fputwc+0x6c>
1000b8a8:	2880030b 	ldhu	r2,12(r5)
1000b8ac:	10c8000c 	andi	r3,r2,8192
1000b8b0:	1800051e 	bne	r3,zero,1000b8c8 <fputwc+0x4c>
1000b8b4:	28c01917 	ldw	r3,100(r5)
1000b8b8:	10880014 	ori	r2,r2,8192
1000b8bc:	2880030d 	sth	r2,12(r5)
1000b8c0:	18880014 	ori	r2,r3,8192
1000b8c4:	28801915 	stw	r2,100(r5)
1000b8c8:	280d883a 	mov	r6,r5
1000b8cc:	8009883a 	mov	r4,r16
1000b8d0:	880b883a 	mov	r5,r17
1000b8d4:	dfc00317 	ldw	ra,12(sp)
1000b8d8:	dc400217 	ldw	r17,8(sp)
1000b8dc:	dc000117 	ldw	r16,4(sp)
1000b8e0:	dec00404 	addi	sp,sp,16
1000b8e4:	000b6f41 	jmpi	1000b6f4 <__fputwc>
1000b8e8:	8009883a 	mov	r4,r16
1000b8ec:	d9400015 	stw	r5,0(sp)
1000b8f0:	0006a440 	call	10006a44 <__sinit>
1000b8f4:	d9400017 	ldw	r5,0(sp)
1000b8f8:	003feb06 	br	1000b8a8 <__alt_data_end+0xf800b8a8>

1000b8fc <_fstat_r>:
1000b8fc:	defffd04 	addi	sp,sp,-12
1000b900:	2805883a 	mov	r2,r5
1000b904:	dc000015 	stw	r16,0(sp)
1000b908:	04040074 	movhi	r16,4097
1000b90c:	dc400115 	stw	r17,4(sp)
1000b910:	84172904 	addi	r16,r16,23716
1000b914:	2023883a 	mov	r17,r4
1000b918:	300b883a 	mov	r5,r6
1000b91c:	1009883a 	mov	r4,r2
1000b920:	dfc00215 	stw	ra,8(sp)
1000b924:	80000015 	stw	zero,0(r16)
1000b928:	000f5680 	call	1000f568 <fstat>
1000b92c:	00ffffc4 	movi	r3,-1
1000b930:	10c00526 	beq	r2,r3,1000b948 <_fstat_r+0x4c>
1000b934:	dfc00217 	ldw	ra,8(sp)
1000b938:	dc400117 	ldw	r17,4(sp)
1000b93c:	dc000017 	ldw	r16,0(sp)
1000b940:	dec00304 	addi	sp,sp,12
1000b944:	f800283a 	ret
1000b948:	80c00017 	ldw	r3,0(r16)
1000b94c:	183ff926 	beq	r3,zero,1000b934 <__alt_data_end+0xf800b934>
1000b950:	88c00015 	stw	r3,0(r17)
1000b954:	003ff706 	br	1000b934 <__alt_data_end+0xf800b934>

1000b958 <_isatty_r>:
1000b958:	defffd04 	addi	sp,sp,-12
1000b95c:	dc000015 	stw	r16,0(sp)
1000b960:	04040074 	movhi	r16,4097
1000b964:	dc400115 	stw	r17,4(sp)
1000b968:	84172904 	addi	r16,r16,23716
1000b96c:	2023883a 	mov	r17,r4
1000b970:	2809883a 	mov	r4,r5
1000b974:	dfc00215 	stw	ra,8(sp)
1000b978:	80000015 	stw	zero,0(r16)
1000b97c:	000f65c0 	call	1000f65c <isatty>
1000b980:	00ffffc4 	movi	r3,-1
1000b984:	10c00526 	beq	r2,r3,1000b99c <_isatty_r+0x44>
1000b988:	dfc00217 	ldw	ra,8(sp)
1000b98c:	dc400117 	ldw	r17,4(sp)
1000b990:	dc000017 	ldw	r16,0(sp)
1000b994:	dec00304 	addi	sp,sp,12
1000b998:	f800283a 	ret
1000b99c:	80c00017 	ldw	r3,0(r16)
1000b9a0:	183ff926 	beq	r3,zero,1000b988 <__alt_data_end+0xf800b988>
1000b9a4:	88c00015 	stw	r3,0(r17)
1000b9a8:	003ff706 	br	1000b988 <__alt_data_end+0xf800b988>

1000b9ac <_lseek_r>:
1000b9ac:	defffd04 	addi	sp,sp,-12
1000b9b0:	2805883a 	mov	r2,r5
1000b9b4:	dc000015 	stw	r16,0(sp)
1000b9b8:	04040074 	movhi	r16,4097
1000b9bc:	dc400115 	stw	r17,4(sp)
1000b9c0:	300b883a 	mov	r5,r6
1000b9c4:	84172904 	addi	r16,r16,23716
1000b9c8:	2023883a 	mov	r17,r4
1000b9cc:	380d883a 	mov	r6,r7
1000b9d0:	1009883a 	mov	r4,r2
1000b9d4:	dfc00215 	stw	ra,8(sp)
1000b9d8:	80000015 	stw	zero,0(r16)
1000b9dc:	000f8300 	call	1000f830 <lseek>
1000b9e0:	00ffffc4 	movi	r3,-1
1000b9e4:	10c00526 	beq	r2,r3,1000b9fc <_lseek_r+0x50>
1000b9e8:	dfc00217 	ldw	ra,8(sp)
1000b9ec:	dc400117 	ldw	r17,4(sp)
1000b9f0:	dc000017 	ldw	r16,0(sp)
1000b9f4:	dec00304 	addi	sp,sp,12
1000b9f8:	f800283a 	ret
1000b9fc:	80c00017 	ldw	r3,0(r16)
1000ba00:	183ff926 	beq	r3,zero,1000b9e8 <__alt_data_end+0xf800b9e8>
1000ba04:	88c00015 	stw	r3,0(r17)
1000ba08:	003ff706 	br	1000b9e8 <__alt_data_end+0xf800b9e8>

1000ba0c <_read_r>:
1000ba0c:	defffd04 	addi	sp,sp,-12
1000ba10:	2805883a 	mov	r2,r5
1000ba14:	dc000015 	stw	r16,0(sp)
1000ba18:	04040074 	movhi	r16,4097
1000ba1c:	dc400115 	stw	r17,4(sp)
1000ba20:	300b883a 	mov	r5,r6
1000ba24:	84172904 	addi	r16,r16,23716
1000ba28:	2023883a 	mov	r17,r4
1000ba2c:	380d883a 	mov	r6,r7
1000ba30:	1009883a 	mov	r4,r2
1000ba34:	dfc00215 	stw	ra,8(sp)
1000ba38:	80000015 	stw	zero,0(r16)
1000ba3c:	000fa0c0 	call	1000fa0c <read>
1000ba40:	00ffffc4 	movi	r3,-1
1000ba44:	10c00526 	beq	r2,r3,1000ba5c <_read_r+0x50>
1000ba48:	dfc00217 	ldw	ra,8(sp)
1000ba4c:	dc400117 	ldw	r17,4(sp)
1000ba50:	dc000017 	ldw	r16,0(sp)
1000ba54:	dec00304 	addi	sp,sp,12
1000ba58:	f800283a 	ret
1000ba5c:	80c00017 	ldw	r3,0(r16)
1000ba60:	183ff926 	beq	r3,zero,1000ba48 <__alt_data_end+0xf800ba48>
1000ba64:	88c00015 	stw	r3,0(r17)
1000ba68:	003ff706 	br	1000ba48 <__alt_data_end+0xf800ba48>

1000ba6c <__swbuf_r>:
1000ba6c:	defffb04 	addi	sp,sp,-20
1000ba70:	dcc00315 	stw	r19,12(sp)
1000ba74:	dc800215 	stw	r18,8(sp)
1000ba78:	dc000015 	stw	r16,0(sp)
1000ba7c:	dfc00415 	stw	ra,16(sp)
1000ba80:	dc400115 	stw	r17,4(sp)
1000ba84:	2025883a 	mov	r18,r4
1000ba88:	2827883a 	mov	r19,r5
1000ba8c:	3021883a 	mov	r16,r6
1000ba90:	20000226 	beq	r4,zero,1000ba9c <__swbuf_r+0x30>
1000ba94:	20800e17 	ldw	r2,56(r4)
1000ba98:	10004226 	beq	r2,zero,1000bba4 <__swbuf_r+0x138>
1000ba9c:	80800617 	ldw	r2,24(r16)
1000baa0:	8100030b 	ldhu	r4,12(r16)
1000baa4:	80800215 	stw	r2,8(r16)
1000baa8:	2080020c 	andi	r2,r4,8
1000baac:	10003626 	beq	r2,zero,1000bb88 <__swbuf_r+0x11c>
1000bab0:	80c00417 	ldw	r3,16(r16)
1000bab4:	18003426 	beq	r3,zero,1000bb88 <__swbuf_r+0x11c>
1000bab8:	2088000c 	andi	r2,r4,8192
1000babc:	9c403fcc 	andi	r17,r19,255
1000bac0:	10001a26 	beq	r2,zero,1000bb2c <__swbuf_r+0xc0>
1000bac4:	80800017 	ldw	r2,0(r16)
1000bac8:	81000517 	ldw	r4,20(r16)
1000bacc:	10c7c83a 	sub	r3,r2,r3
1000bad0:	1900200e 	bge	r3,r4,1000bb54 <__swbuf_r+0xe8>
1000bad4:	18c00044 	addi	r3,r3,1
1000bad8:	81000217 	ldw	r4,8(r16)
1000badc:	11400044 	addi	r5,r2,1
1000bae0:	81400015 	stw	r5,0(r16)
1000bae4:	213fffc4 	addi	r4,r4,-1
1000bae8:	81000215 	stw	r4,8(r16)
1000baec:	14c00005 	stb	r19,0(r2)
1000baf0:	80800517 	ldw	r2,20(r16)
1000baf4:	10c01e26 	beq	r2,r3,1000bb70 <__swbuf_r+0x104>
1000baf8:	8080030b 	ldhu	r2,12(r16)
1000bafc:	1080004c 	andi	r2,r2,1
1000bb00:	10000226 	beq	r2,zero,1000bb0c <__swbuf_r+0xa0>
1000bb04:	00800284 	movi	r2,10
1000bb08:	88801926 	beq	r17,r2,1000bb70 <__swbuf_r+0x104>
1000bb0c:	8805883a 	mov	r2,r17
1000bb10:	dfc00417 	ldw	ra,16(sp)
1000bb14:	dcc00317 	ldw	r19,12(sp)
1000bb18:	dc800217 	ldw	r18,8(sp)
1000bb1c:	dc400117 	ldw	r17,4(sp)
1000bb20:	dc000017 	ldw	r16,0(sp)
1000bb24:	dec00504 	addi	sp,sp,20
1000bb28:	f800283a 	ret
1000bb2c:	81401917 	ldw	r5,100(r16)
1000bb30:	00b7ffc4 	movi	r2,-8193
1000bb34:	21080014 	ori	r4,r4,8192
1000bb38:	2884703a 	and	r2,r5,r2
1000bb3c:	80801915 	stw	r2,100(r16)
1000bb40:	80800017 	ldw	r2,0(r16)
1000bb44:	8100030d 	sth	r4,12(r16)
1000bb48:	81000517 	ldw	r4,20(r16)
1000bb4c:	10c7c83a 	sub	r3,r2,r3
1000bb50:	193fe016 	blt	r3,r4,1000bad4 <__alt_data_end+0xf800bad4>
1000bb54:	800b883a 	mov	r5,r16
1000bb58:	9009883a 	mov	r4,r18
1000bb5c:	00066580 	call	10006658 <_fflush_r>
1000bb60:	1000071e 	bne	r2,zero,1000bb80 <__swbuf_r+0x114>
1000bb64:	80800017 	ldw	r2,0(r16)
1000bb68:	00c00044 	movi	r3,1
1000bb6c:	003fda06 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000bb70:	800b883a 	mov	r5,r16
1000bb74:	9009883a 	mov	r4,r18
1000bb78:	00066580 	call	10006658 <_fflush_r>
1000bb7c:	103fe326 	beq	r2,zero,1000bb0c <__alt_data_end+0xf800bb0c>
1000bb80:	00bfffc4 	movi	r2,-1
1000bb84:	003fe206 	br	1000bb10 <__alt_data_end+0xf800bb10>
1000bb88:	800b883a 	mov	r5,r16
1000bb8c:	9009883a 	mov	r4,r18
1000bb90:	0004a380 	call	10004a38 <__swsetup_r>
1000bb94:	103ffa1e 	bne	r2,zero,1000bb80 <__alt_data_end+0xf800bb80>
1000bb98:	8100030b 	ldhu	r4,12(r16)
1000bb9c:	80c00417 	ldw	r3,16(r16)
1000bba0:	003fc506 	br	1000bab8 <__alt_data_end+0xf800bab8>
1000bba4:	0006a440 	call	10006a44 <__sinit>
1000bba8:	003fbc06 	br	1000ba9c <__alt_data_end+0xf800ba9c>

1000bbac <__swbuf>:
1000bbac:	00840074 	movhi	r2,4097
1000bbb0:	10905704 	addi	r2,r2,16732
1000bbb4:	280d883a 	mov	r6,r5
1000bbb8:	200b883a 	mov	r5,r4
1000bbbc:	11000017 	ldw	r4,0(r2)
1000bbc0:	000ba6c1 	jmpi	1000ba6c <__swbuf_r>

1000bbc4 <_wcrtomb_r>:
1000bbc4:	defff604 	addi	sp,sp,-40
1000bbc8:	00840074 	movhi	r2,4097
1000bbcc:	dc800815 	stw	r18,32(sp)
1000bbd0:	dc400715 	stw	r17,28(sp)
1000bbd4:	dc000615 	stw	r16,24(sp)
1000bbd8:	10905b04 	addi	r2,r2,16748
1000bbdc:	dfc00915 	stw	ra,36(sp)
1000bbe0:	2021883a 	mov	r16,r4
1000bbe4:	3823883a 	mov	r17,r7
1000bbe8:	14800017 	ldw	r18,0(r2)
1000bbec:	28001426 	beq	r5,zero,1000bc40 <_wcrtomb_r+0x7c>
1000bbf0:	d9400415 	stw	r5,16(sp)
1000bbf4:	d9800515 	stw	r6,20(sp)
1000bbf8:	00075940 	call	10007594 <__locale_charset>
1000bbfc:	d9800517 	ldw	r6,20(sp)
1000bc00:	d9400417 	ldw	r5,16(sp)
1000bc04:	100f883a 	mov	r7,r2
1000bc08:	dc400015 	stw	r17,0(sp)
1000bc0c:	8009883a 	mov	r4,r16
1000bc10:	903ee83a 	callr	r18
1000bc14:	00ffffc4 	movi	r3,-1
1000bc18:	10c0031e 	bne	r2,r3,1000bc28 <_wcrtomb_r+0x64>
1000bc1c:	88000015 	stw	zero,0(r17)
1000bc20:	00c02284 	movi	r3,138
1000bc24:	80c00015 	stw	r3,0(r16)
1000bc28:	dfc00917 	ldw	ra,36(sp)
1000bc2c:	dc800817 	ldw	r18,32(sp)
1000bc30:	dc400717 	ldw	r17,28(sp)
1000bc34:	dc000617 	ldw	r16,24(sp)
1000bc38:	dec00a04 	addi	sp,sp,40
1000bc3c:	f800283a 	ret
1000bc40:	00075940 	call	10007594 <__locale_charset>
1000bc44:	100f883a 	mov	r7,r2
1000bc48:	dc400015 	stw	r17,0(sp)
1000bc4c:	000d883a 	mov	r6,zero
1000bc50:	d9400104 	addi	r5,sp,4
1000bc54:	8009883a 	mov	r4,r16
1000bc58:	903ee83a 	callr	r18
1000bc5c:	003fed06 	br	1000bc14 <__alt_data_end+0xf800bc14>

1000bc60 <wcrtomb>:
1000bc60:	defff604 	addi	sp,sp,-40
1000bc64:	00840074 	movhi	r2,4097
1000bc68:	dc800615 	stw	r18,24(sp)
1000bc6c:	dc400515 	stw	r17,20(sp)
1000bc70:	10905704 	addi	r2,r2,16732
1000bc74:	dfc00915 	stw	ra,36(sp)
1000bc78:	dd000815 	stw	r20,32(sp)
1000bc7c:	dcc00715 	stw	r19,28(sp)
1000bc80:	dc000415 	stw	r16,16(sp)
1000bc84:	3025883a 	mov	r18,r6
1000bc88:	14400017 	ldw	r17,0(r2)
1000bc8c:	20001926 	beq	r4,zero,1000bcf4 <wcrtomb+0x94>
1000bc90:	00840074 	movhi	r2,4097
1000bc94:	10905b04 	addi	r2,r2,16748
1000bc98:	15000017 	ldw	r20,0(r2)
1000bc9c:	2021883a 	mov	r16,r4
1000bca0:	2827883a 	mov	r19,r5
1000bca4:	00075940 	call	10007594 <__locale_charset>
1000bca8:	100f883a 	mov	r7,r2
1000bcac:	dc800015 	stw	r18,0(sp)
1000bcb0:	980d883a 	mov	r6,r19
1000bcb4:	800b883a 	mov	r5,r16
1000bcb8:	8809883a 	mov	r4,r17
1000bcbc:	a03ee83a 	callr	r20
1000bcc0:	00ffffc4 	movi	r3,-1
1000bcc4:	10c0031e 	bne	r2,r3,1000bcd4 <wcrtomb+0x74>
1000bcc8:	90000015 	stw	zero,0(r18)
1000bccc:	00c02284 	movi	r3,138
1000bcd0:	88c00015 	stw	r3,0(r17)
1000bcd4:	dfc00917 	ldw	ra,36(sp)
1000bcd8:	dd000817 	ldw	r20,32(sp)
1000bcdc:	dcc00717 	ldw	r19,28(sp)
1000bce0:	dc800617 	ldw	r18,24(sp)
1000bce4:	dc400517 	ldw	r17,20(sp)
1000bce8:	dc000417 	ldw	r16,16(sp)
1000bcec:	dec00a04 	addi	sp,sp,40
1000bcf0:	f800283a 	ret
1000bcf4:	00840074 	movhi	r2,4097
1000bcf8:	10905b04 	addi	r2,r2,16748
1000bcfc:	14000017 	ldw	r16,0(r2)
1000bd00:	00075940 	call	10007594 <__locale_charset>
1000bd04:	100f883a 	mov	r7,r2
1000bd08:	dc800015 	stw	r18,0(sp)
1000bd0c:	000d883a 	mov	r6,zero
1000bd10:	d9400104 	addi	r5,sp,4
1000bd14:	8809883a 	mov	r4,r17
1000bd18:	803ee83a 	callr	r16
1000bd1c:	003fe806 	br	1000bcc0 <__alt_data_end+0xf800bcc0>

1000bd20 <__ascii_wctomb>:
1000bd20:	28000526 	beq	r5,zero,1000bd38 <__ascii_wctomb+0x18>
1000bd24:	00803fc4 	movi	r2,255
1000bd28:	11800536 	bltu	r2,r6,1000bd40 <__ascii_wctomb+0x20>
1000bd2c:	29800005 	stb	r6,0(r5)
1000bd30:	00800044 	movi	r2,1
1000bd34:	f800283a 	ret
1000bd38:	0005883a 	mov	r2,zero
1000bd3c:	f800283a 	ret
1000bd40:	00802284 	movi	r2,138
1000bd44:	20800015 	stw	r2,0(r4)
1000bd48:	00bfffc4 	movi	r2,-1
1000bd4c:	f800283a 	ret

1000bd50 <_wctomb_r>:
1000bd50:	00840074 	movhi	r2,4097
1000bd54:	defff904 	addi	sp,sp,-28
1000bd58:	10905b04 	addi	r2,r2,16748
1000bd5c:	dfc00615 	stw	ra,24(sp)
1000bd60:	dc400515 	stw	r17,20(sp)
1000bd64:	dc000415 	stw	r16,16(sp)
1000bd68:	3823883a 	mov	r17,r7
1000bd6c:	14000017 	ldw	r16,0(r2)
1000bd70:	d9000115 	stw	r4,4(sp)
1000bd74:	d9400215 	stw	r5,8(sp)
1000bd78:	d9800315 	stw	r6,12(sp)
1000bd7c:	00075940 	call	10007594 <__locale_charset>
1000bd80:	d9800317 	ldw	r6,12(sp)
1000bd84:	d9400217 	ldw	r5,8(sp)
1000bd88:	d9000117 	ldw	r4,4(sp)
1000bd8c:	100f883a 	mov	r7,r2
1000bd90:	dc400015 	stw	r17,0(sp)
1000bd94:	803ee83a 	callr	r16
1000bd98:	dfc00617 	ldw	ra,24(sp)
1000bd9c:	dc400517 	ldw	r17,20(sp)
1000bda0:	dc000417 	ldw	r16,16(sp)
1000bda4:	dec00704 	addi	sp,sp,28
1000bda8:	f800283a 	ret

1000bdac <__udivdi3>:
1000bdac:	defff404 	addi	sp,sp,-48
1000bdb0:	dcc00515 	stw	r19,20(sp)
1000bdb4:	dc000215 	stw	r16,8(sp)
1000bdb8:	dfc00b15 	stw	ra,44(sp)
1000bdbc:	df000a15 	stw	fp,40(sp)
1000bdc0:	ddc00915 	stw	r23,36(sp)
1000bdc4:	dd800815 	stw	r22,32(sp)
1000bdc8:	dd400715 	stw	r21,28(sp)
1000bdcc:	dd000615 	stw	r20,24(sp)
1000bdd0:	dc800415 	stw	r18,16(sp)
1000bdd4:	dc400315 	stw	r17,12(sp)
1000bdd8:	2027883a 	mov	r19,r4
1000bddc:	2821883a 	mov	r16,r5
1000bde0:	3800461e 	bne	r7,zero,1000befc <__udivdi3+0x150>
1000bde4:	3023883a 	mov	r17,r6
1000bde8:	2025883a 	mov	r18,r4
1000bdec:	2980572e 	bgeu	r5,r6,1000bf4c <__udivdi3+0x1a0>
1000bdf0:	00bfffd4 	movui	r2,65535
1000bdf4:	282d883a 	mov	r22,r5
1000bdf8:	1180b236 	bltu	r2,r6,1000c0c4 <__udivdi3+0x318>
1000bdfc:	00803fc4 	movi	r2,255
1000be00:	1185803a 	cmpltu	r2,r2,r6
1000be04:	100490fa 	slli	r2,r2,3
1000be08:	3086d83a 	srl	r3,r6,r2
1000be0c:	01040074 	movhi	r4,4097
1000be10:	21095d04 	addi	r4,r4,9588
1000be14:	20c7883a 	add	r3,r4,r3
1000be18:	18c00003 	ldbu	r3,0(r3)
1000be1c:	1885883a 	add	r2,r3,r2
1000be20:	00c00804 	movi	r3,32
1000be24:	1887c83a 	sub	r3,r3,r2
1000be28:	18000526 	beq	r3,zero,1000be40 <__udivdi3+0x94>
1000be2c:	80e0983a 	sll	r16,r16,r3
1000be30:	9884d83a 	srl	r2,r19,r2
1000be34:	30e2983a 	sll	r17,r6,r3
1000be38:	98e4983a 	sll	r18,r19,r3
1000be3c:	142cb03a 	or	r22,r2,r16
1000be40:	882ad43a 	srli	r21,r17,16
1000be44:	b009883a 	mov	r4,r22
1000be48:	8d3fffcc 	andi	r20,r17,65535
1000be4c:	a80b883a 	mov	r5,r21
1000be50:	000cac80 	call	1000cac8 <__umodsi3>
1000be54:	b009883a 	mov	r4,r22
1000be58:	a80b883a 	mov	r5,r21
1000be5c:	1027883a 	mov	r19,r2
1000be60:	000ca640 	call	1000ca64 <__udivsi3>
1000be64:	100b883a 	mov	r5,r2
1000be68:	a009883a 	mov	r4,r20
1000be6c:	102d883a 	mov	r22,r2
1000be70:	000cb200 	call	1000cb20 <__mulsi3>
1000be74:	9826943a 	slli	r19,r19,16
1000be78:	9006d43a 	srli	r3,r18,16
1000be7c:	1cc6b03a 	or	r3,r3,r19
1000be80:	1880052e 	bgeu	r3,r2,1000be98 <__udivdi3+0xec>
1000be84:	1c47883a 	add	r3,r3,r17
1000be88:	b13fffc4 	addi	r4,r22,-1
1000be8c:	1c400136 	bltu	r3,r17,1000be94 <__udivdi3+0xe8>
1000be90:	18814236 	bltu	r3,r2,1000c39c <__udivdi3+0x5f0>
1000be94:	202d883a 	mov	r22,r4
1000be98:	18a1c83a 	sub	r16,r3,r2
1000be9c:	8009883a 	mov	r4,r16
1000bea0:	a80b883a 	mov	r5,r21
1000bea4:	000cac80 	call	1000cac8 <__umodsi3>
1000bea8:	1027883a 	mov	r19,r2
1000beac:	8009883a 	mov	r4,r16
1000beb0:	a80b883a 	mov	r5,r21
1000beb4:	9826943a 	slli	r19,r19,16
1000beb8:	000ca640 	call	1000ca64 <__udivsi3>
1000bebc:	100b883a 	mov	r5,r2
1000bec0:	a009883a 	mov	r4,r20
1000bec4:	94bfffcc 	andi	r18,r18,65535
1000bec8:	1021883a 	mov	r16,r2
1000becc:	94e4b03a 	or	r18,r18,r19
1000bed0:	000cb200 	call	1000cb20 <__mulsi3>
1000bed4:	9080052e 	bgeu	r18,r2,1000beec <__udivdi3+0x140>
1000bed8:	8ca5883a 	add	r18,r17,r18
1000bedc:	80ffffc4 	addi	r3,r16,-1
1000bee0:	94410c36 	bltu	r18,r17,1000c314 <__udivdi3+0x568>
1000bee4:	90810b2e 	bgeu	r18,r2,1000c314 <__udivdi3+0x568>
1000bee8:	843fff84 	addi	r16,r16,-2
1000beec:	b004943a 	slli	r2,r22,16
1000bef0:	0007883a 	mov	r3,zero
1000bef4:	1404b03a 	or	r2,r2,r16
1000bef8:	00005e06 	br	1000c074 <__udivdi3+0x2c8>
1000befc:	29c05b36 	bltu	r5,r7,1000c06c <__udivdi3+0x2c0>
1000bf00:	00bfffd4 	movui	r2,65535
1000bf04:	11c0672e 	bgeu	r2,r7,1000c0a4 <__udivdi3+0x2f8>
1000bf08:	00804034 	movhi	r2,256
1000bf0c:	10bfffc4 	addi	r2,r2,-1
1000bf10:	11c10a36 	bltu	r2,r7,1000c33c <__udivdi3+0x590>
1000bf14:	00800404 	movi	r2,16
1000bf18:	3886d83a 	srl	r3,r7,r2
1000bf1c:	01040074 	movhi	r4,4097
1000bf20:	21095d04 	addi	r4,r4,9588
1000bf24:	20c7883a 	add	r3,r4,r3
1000bf28:	18c00003 	ldbu	r3,0(r3)
1000bf2c:	05c00804 	movi	r23,32
1000bf30:	1885883a 	add	r2,r3,r2
1000bf34:	b8afc83a 	sub	r23,r23,r2
1000bf38:	b800671e 	bne	r23,zero,1000c0d8 <__udivdi3+0x32c>
1000bf3c:	3c010536 	bltu	r7,r16,1000c354 <__udivdi3+0x5a8>
1000bf40:	9985403a 	cmpgeu	r2,r19,r6
1000bf44:	0007883a 	mov	r3,zero
1000bf48:	00004a06 	br	1000c074 <__udivdi3+0x2c8>
1000bf4c:	3000041e 	bne	r6,zero,1000bf60 <__udivdi3+0x1b4>
1000bf50:	000b883a 	mov	r5,zero
1000bf54:	01000044 	movi	r4,1
1000bf58:	000ca640 	call	1000ca64 <__udivsi3>
1000bf5c:	1023883a 	mov	r17,r2
1000bf60:	00bfffd4 	movui	r2,65535
1000bf64:	1440532e 	bgeu	r2,r17,1000c0b4 <__udivdi3+0x308>
1000bf68:	00804034 	movhi	r2,256
1000bf6c:	10bfffc4 	addi	r2,r2,-1
1000bf70:	1440f436 	bltu	r2,r17,1000c344 <__udivdi3+0x598>
1000bf74:	00800404 	movi	r2,16
1000bf78:	8886d83a 	srl	r3,r17,r2
1000bf7c:	01040074 	movhi	r4,4097
1000bf80:	21095d04 	addi	r4,r4,9588
1000bf84:	20c7883a 	add	r3,r4,r3
1000bf88:	18c00003 	ldbu	r3,0(r3)
1000bf8c:	1885883a 	add	r2,r3,r2
1000bf90:	00c00804 	movi	r3,32
1000bf94:	1887c83a 	sub	r3,r3,r2
1000bf98:	1800a51e 	bne	r3,zero,1000c230 <__udivdi3+0x484>
1000bf9c:	882ad43a 	srli	r21,r17,16
1000bfa0:	8461c83a 	sub	r16,r16,r17
1000bfa4:	8d3fffcc 	andi	r20,r17,65535
1000bfa8:	00c00044 	movi	r3,1
1000bfac:	a80b883a 	mov	r5,r21
1000bfb0:	8009883a 	mov	r4,r16
1000bfb4:	d8c00115 	stw	r3,4(sp)
1000bfb8:	000cac80 	call	1000cac8 <__umodsi3>
1000bfbc:	a80b883a 	mov	r5,r21
1000bfc0:	8009883a 	mov	r4,r16
1000bfc4:	1027883a 	mov	r19,r2
1000bfc8:	000ca640 	call	1000ca64 <__udivsi3>
1000bfcc:	a00b883a 	mov	r5,r20
1000bfd0:	1009883a 	mov	r4,r2
1000bfd4:	102d883a 	mov	r22,r2
1000bfd8:	000cb200 	call	1000cb20 <__mulsi3>
1000bfdc:	9826943a 	slli	r19,r19,16
1000bfe0:	900ed43a 	srli	r7,r18,16
1000bfe4:	d8c00117 	ldw	r3,4(sp)
1000bfe8:	3cceb03a 	or	r7,r7,r19
1000bfec:	3880052e 	bgeu	r7,r2,1000c004 <__udivdi3+0x258>
1000bff0:	3c4f883a 	add	r7,r7,r17
1000bff4:	b13fffc4 	addi	r4,r22,-1
1000bff8:	3c400136 	bltu	r7,r17,1000c000 <__udivdi3+0x254>
1000bffc:	3880e436 	bltu	r7,r2,1000c390 <__udivdi3+0x5e4>
1000c000:	202d883a 	mov	r22,r4
1000c004:	38a1c83a 	sub	r16,r7,r2
1000c008:	8009883a 	mov	r4,r16
1000c00c:	a80b883a 	mov	r5,r21
1000c010:	d8c00115 	stw	r3,4(sp)
1000c014:	000cac80 	call	1000cac8 <__umodsi3>
1000c018:	1027883a 	mov	r19,r2
1000c01c:	8009883a 	mov	r4,r16
1000c020:	a80b883a 	mov	r5,r21
1000c024:	9826943a 	slli	r19,r19,16
1000c028:	000ca640 	call	1000ca64 <__udivsi3>
1000c02c:	a00b883a 	mov	r5,r20
1000c030:	1009883a 	mov	r4,r2
1000c034:	94bfffcc 	andi	r18,r18,65535
1000c038:	1021883a 	mov	r16,r2
1000c03c:	94e4b03a 	or	r18,r18,r19
1000c040:	000cb200 	call	1000cb20 <__mulsi3>
1000c044:	d8c00117 	ldw	r3,4(sp)
1000c048:	9080052e 	bgeu	r18,r2,1000c060 <__udivdi3+0x2b4>
1000c04c:	8ca5883a 	add	r18,r17,r18
1000c050:	813fffc4 	addi	r4,r16,-1
1000c054:	9440ad36 	bltu	r18,r17,1000c30c <__udivdi3+0x560>
1000c058:	9080ac2e 	bgeu	r18,r2,1000c30c <__udivdi3+0x560>
1000c05c:	843fff84 	addi	r16,r16,-2
1000c060:	b004943a 	slli	r2,r22,16
1000c064:	1404b03a 	or	r2,r2,r16
1000c068:	00000206 	br	1000c074 <__udivdi3+0x2c8>
1000c06c:	0007883a 	mov	r3,zero
1000c070:	0005883a 	mov	r2,zero
1000c074:	dfc00b17 	ldw	ra,44(sp)
1000c078:	df000a17 	ldw	fp,40(sp)
1000c07c:	ddc00917 	ldw	r23,36(sp)
1000c080:	dd800817 	ldw	r22,32(sp)
1000c084:	dd400717 	ldw	r21,28(sp)
1000c088:	dd000617 	ldw	r20,24(sp)
1000c08c:	dcc00517 	ldw	r19,20(sp)
1000c090:	dc800417 	ldw	r18,16(sp)
1000c094:	dc400317 	ldw	r17,12(sp)
1000c098:	dc000217 	ldw	r16,8(sp)
1000c09c:	dec00c04 	addi	sp,sp,48
1000c0a0:	f800283a 	ret
1000c0a4:	00803fc4 	movi	r2,255
1000c0a8:	11c5803a 	cmpltu	r2,r2,r7
1000c0ac:	100490fa 	slli	r2,r2,3
1000c0b0:	003f9906 	br	1000bf18 <__alt_data_end+0xf800bf18>
1000c0b4:	00803fc4 	movi	r2,255
1000c0b8:	1445803a 	cmpltu	r2,r2,r17
1000c0bc:	100490fa 	slli	r2,r2,3
1000c0c0:	003fad06 	br	1000bf78 <__alt_data_end+0xf800bf78>
1000c0c4:	00804034 	movhi	r2,256
1000c0c8:	10bfffc4 	addi	r2,r2,-1
1000c0cc:	11809f36 	bltu	r2,r6,1000c34c <__udivdi3+0x5a0>
1000c0d0:	00800404 	movi	r2,16
1000c0d4:	003f4c06 	br	1000be08 <__alt_data_end+0xf800be08>
1000c0d8:	3dce983a 	sll	r7,r7,r23
1000c0dc:	30b8d83a 	srl	fp,r6,r2
1000c0e0:	80a2d83a 	srl	r17,r16,r2
1000c0e4:	35cc983a 	sll	r6,r6,r23
1000c0e8:	3f38b03a 	or	fp,r7,fp
1000c0ec:	e024d43a 	srli	r18,fp,16
1000c0f0:	9884d83a 	srl	r2,r19,r2
1000c0f4:	85e0983a 	sll	r16,r16,r23
1000c0f8:	8809883a 	mov	r4,r17
1000c0fc:	900b883a 	mov	r5,r18
1000c100:	d9800015 	stw	r6,0(sp)
1000c104:	1420b03a 	or	r16,r2,r16
1000c108:	000cac80 	call	1000cac8 <__umodsi3>
1000c10c:	900b883a 	mov	r5,r18
1000c110:	8809883a 	mov	r4,r17
1000c114:	1029883a 	mov	r20,r2
1000c118:	e5bfffcc 	andi	r22,fp,65535
1000c11c:	000ca640 	call	1000ca64 <__udivsi3>
1000c120:	100b883a 	mov	r5,r2
1000c124:	b009883a 	mov	r4,r22
1000c128:	102b883a 	mov	r21,r2
1000c12c:	000cb200 	call	1000cb20 <__mulsi3>
1000c130:	a028943a 	slli	r20,r20,16
1000c134:	8006d43a 	srli	r3,r16,16
1000c138:	1d06b03a 	or	r3,r3,r20
1000c13c:	1880042e 	bgeu	r3,r2,1000c150 <__udivdi3+0x3a4>
1000c140:	1f07883a 	add	r3,r3,fp
1000c144:	a93fffc4 	addi	r4,r21,-1
1000c148:	1f00892e 	bgeu	r3,fp,1000c370 <__udivdi3+0x5c4>
1000c14c:	202b883a 	mov	r21,r4
1000c150:	18a3c83a 	sub	r17,r3,r2
1000c154:	8809883a 	mov	r4,r17
1000c158:	900b883a 	mov	r5,r18
1000c15c:	000cac80 	call	1000cac8 <__umodsi3>
1000c160:	1029883a 	mov	r20,r2
1000c164:	8809883a 	mov	r4,r17
1000c168:	900b883a 	mov	r5,r18
1000c16c:	a028943a 	slli	r20,r20,16
1000c170:	000ca640 	call	1000ca64 <__udivsi3>
1000c174:	100b883a 	mov	r5,r2
1000c178:	b009883a 	mov	r4,r22
1000c17c:	843fffcc 	andi	r16,r16,65535
1000c180:	1023883a 	mov	r17,r2
1000c184:	8520b03a 	or	r16,r16,r20
1000c188:	000cb200 	call	1000cb20 <__mulsi3>
1000c18c:	8080042e 	bgeu	r16,r2,1000c1a0 <__udivdi3+0x3f4>
1000c190:	8721883a 	add	r16,r16,fp
1000c194:	88ffffc4 	addi	r3,r17,-1
1000c198:	8700712e 	bgeu	r16,fp,1000c360 <__udivdi3+0x5b4>
1000c19c:	1823883a 	mov	r17,r3
1000c1a0:	a80e943a 	slli	r7,r21,16
1000c1a4:	d8c00017 	ldw	r3,0(sp)
1000c1a8:	80a1c83a 	sub	r16,r16,r2
1000c1ac:	3c64b03a 	or	r18,r7,r17
1000c1b0:	1d3fffcc 	andi	r20,r3,65535
1000c1b4:	9022d43a 	srli	r17,r18,16
1000c1b8:	95bfffcc 	andi	r22,r18,65535
1000c1bc:	a00b883a 	mov	r5,r20
1000c1c0:	b009883a 	mov	r4,r22
1000c1c4:	182ad43a 	srli	r21,r3,16
1000c1c8:	000cb200 	call	1000cb20 <__mulsi3>
1000c1cc:	a00b883a 	mov	r5,r20
1000c1d0:	8809883a 	mov	r4,r17
1000c1d4:	1039883a 	mov	fp,r2
1000c1d8:	000cb200 	call	1000cb20 <__mulsi3>
1000c1dc:	8809883a 	mov	r4,r17
1000c1e0:	a80b883a 	mov	r5,r21
1000c1e4:	1029883a 	mov	r20,r2
1000c1e8:	000cb200 	call	1000cb20 <__mulsi3>
1000c1ec:	a80b883a 	mov	r5,r21
1000c1f0:	b009883a 	mov	r4,r22
1000c1f4:	1023883a 	mov	r17,r2
1000c1f8:	000cb200 	call	1000cb20 <__mulsi3>
1000c1fc:	e006d43a 	srli	r3,fp,16
1000c200:	1505883a 	add	r2,r2,r20
1000c204:	1887883a 	add	r3,r3,r2
1000c208:	1d00022e 	bgeu	r3,r20,1000c214 <__udivdi3+0x468>
1000c20c:	00800074 	movhi	r2,1
1000c210:	88a3883a 	add	r17,r17,r2
1000c214:	1804d43a 	srli	r2,r3,16
1000c218:	1463883a 	add	r17,r2,r17
1000c21c:	84404436 	bltu	r16,r17,1000c330 <__udivdi3+0x584>
1000c220:	84403e26 	beq	r16,r17,1000c31c <__udivdi3+0x570>
1000c224:	9005883a 	mov	r2,r18
1000c228:	0007883a 	mov	r3,zero
1000c22c:	003f9106 	br	1000c074 <__alt_data_end+0xf800c074>
1000c230:	88e2983a 	sll	r17,r17,r3
1000c234:	80aed83a 	srl	r23,r16,r2
1000c238:	80e0983a 	sll	r16,r16,r3
1000c23c:	882ad43a 	srli	r21,r17,16
1000c240:	9884d83a 	srl	r2,r19,r2
1000c244:	b809883a 	mov	r4,r23
1000c248:	a80b883a 	mov	r5,r21
1000c24c:	98e4983a 	sll	r18,r19,r3
1000c250:	142cb03a 	or	r22,r2,r16
1000c254:	000cac80 	call	1000cac8 <__umodsi3>
1000c258:	b809883a 	mov	r4,r23
1000c25c:	a80b883a 	mov	r5,r21
1000c260:	1027883a 	mov	r19,r2
1000c264:	8d3fffcc 	andi	r20,r17,65535
1000c268:	000ca640 	call	1000ca64 <__udivsi3>
1000c26c:	a009883a 	mov	r4,r20
1000c270:	100b883a 	mov	r5,r2
1000c274:	102f883a 	mov	r23,r2
1000c278:	000cb200 	call	1000cb20 <__mulsi3>
1000c27c:	9826943a 	slli	r19,r19,16
1000c280:	b008d43a 	srli	r4,r22,16
1000c284:	24c8b03a 	or	r4,r4,r19
1000c288:	2080062e 	bgeu	r4,r2,1000c2a4 <__udivdi3+0x4f8>
1000c28c:	2449883a 	add	r4,r4,r17
1000c290:	b8ffffc4 	addi	r3,r23,-1
1000c294:	24403c36 	bltu	r4,r17,1000c388 <__udivdi3+0x5dc>
1000c298:	20803b2e 	bgeu	r4,r2,1000c388 <__udivdi3+0x5dc>
1000c29c:	bdffff84 	addi	r23,r23,-2
1000c2a0:	2449883a 	add	r4,r4,r17
1000c2a4:	20a1c83a 	sub	r16,r4,r2
1000c2a8:	a80b883a 	mov	r5,r21
1000c2ac:	8009883a 	mov	r4,r16
1000c2b0:	000cac80 	call	1000cac8 <__umodsi3>
1000c2b4:	a80b883a 	mov	r5,r21
1000c2b8:	8009883a 	mov	r4,r16
1000c2bc:	1027883a 	mov	r19,r2
1000c2c0:	000ca640 	call	1000ca64 <__udivsi3>
1000c2c4:	a009883a 	mov	r4,r20
1000c2c8:	100b883a 	mov	r5,r2
1000c2cc:	9826943a 	slli	r19,r19,16
1000c2d0:	1039883a 	mov	fp,r2
1000c2d4:	000cb200 	call	1000cb20 <__mulsi3>
1000c2d8:	b13fffcc 	andi	r4,r22,65535
1000c2dc:	24c8b03a 	or	r4,r4,r19
1000c2e0:	2080062e 	bgeu	r4,r2,1000c2fc <__udivdi3+0x550>
1000c2e4:	2449883a 	add	r4,r4,r17
1000c2e8:	e0ffffc4 	addi	r3,fp,-1
1000c2ec:	24402436 	bltu	r4,r17,1000c380 <__udivdi3+0x5d4>
1000c2f0:	2080232e 	bgeu	r4,r2,1000c380 <__udivdi3+0x5d4>
1000c2f4:	e73fff84 	addi	fp,fp,-2
1000c2f8:	2449883a 	add	r4,r4,r17
1000c2fc:	b82e943a 	slli	r23,r23,16
1000c300:	20a1c83a 	sub	r16,r4,r2
1000c304:	bf06b03a 	or	r3,r23,fp
1000c308:	003f2806 	br	1000bfac <__alt_data_end+0xf800bfac>
1000c30c:	2021883a 	mov	r16,r4
1000c310:	003f5306 	br	1000c060 <__alt_data_end+0xf800c060>
1000c314:	1821883a 	mov	r16,r3
1000c318:	003ef406 	br	1000beec <__alt_data_end+0xf800beec>
1000c31c:	1806943a 	slli	r3,r3,16
1000c320:	9de6983a 	sll	r19,r19,r23
1000c324:	e73fffcc 	andi	fp,fp,65535
1000c328:	1f07883a 	add	r3,r3,fp
1000c32c:	98ffbd2e 	bgeu	r19,r3,1000c224 <__alt_data_end+0xf800c224>
1000c330:	90bfffc4 	addi	r2,r18,-1
1000c334:	0007883a 	mov	r3,zero
1000c338:	003f4e06 	br	1000c074 <__alt_data_end+0xf800c074>
1000c33c:	00800604 	movi	r2,24
1000c340:	003ef506 	br	1000bf18 <__alt_data_end+0xf800bf18>
1000c344:	00800604 	movi	r2,24
1000c348:	003f0b06 	br	1000bf78 <__alt_data_end+0xf800bf78>
1000c34c:	00800604 	movi	r2,24
1000c350:	003ead06 	br	1000be08 <__alt_data_end+0xf800be08>
1000c354:	0007883a 	mov	r3,zero
1000c358:	00800044 	movi	r2,1
1000c35c:	003f4506 	br	1000c074 <__alt_data_end+0xf800c074>
1000c360:	80bf8e2e 	bgeu	r16,r2,1000c19c <__alt_data_end+0xf800c19c>
1000c364:	8c7fff84 	addi	r17,r17,-2
1000c368:	8721883a 	add	r16,r16,fp
1000c36c:	003f8c06 	br	1000c1a0 <__alt_data_end+0xf800c1a0>
1000c370:	18bf762e 	bgeu	r3,r2,1000c14c <__alt_data_end+0xf800c14c>
1000c374:	ad7fff84 	addi	r21,r21,-2
1000c378:	1f07883a 	add	r3,r3,fp
1000c37c:	003f7406 	br	1000c150 <__alt_data_end+0xf800c150>
1000c380:	1839883a 	mov	fp,r3
1000c384:	003fdd06 	br	1000c2fc <__alt_data_end+0xf800c2fc>
1000c388:	182f883a 	mov	r23,r3
1000c38c:	003fc506 	br	1000c2a4 <__alt_data_end+0xf800c2a4>
1000c390:	b5bfff84 	addi	r22,r22,-2
1000c394:	3c4f883a 	add	r7,r7,r17
1000c398:	003f1a06 	br	1000c004 <__alt_data_end+0xf800c004>
1000c39c:	b5bfff84 	addi	r22,r22,-2
1000c3a0:	1c47883a 	add	r3,r3,r17
1000c3a4:	003ebc06 	br	1000be98 <__alt_data_end+0xf800be98>

1000c3a8 <__umoddi3>:
1000c3a8:	defff304 	addi	sp,sp,-52
1000c3ac:	df000b15 	stw	fp,44(sp)
1000c3b0:	dc400415 	stw	r17,16(sp)
1000c3b4:	dc000315 	stw	r16,12(sp)
1000c3b8:	dfc00c15 	stw	ra,48(sp)
1000c3bc:	ddc00a15 	stw	r23,40(sp)
1000c3c0:	dd800915 	stw	r22,36(sp)
1000c3c4:	dd400815 	stw	r21,32(sp)
1000c3c8:	dd000715 	stw	r20,28(sp)
1000c3cc:	dcc00615 	stw	r19,24(sp)
1000c3d0:	dc800515 	stw	r18,20(sp)
1000c3d4:	2021883a 	mov	r16,r4
1000c3d8:	2823883a 	mov	r17,r5
1000c3dc:	2839883a 	mov	fp,r5
1000c3e0:	3800401e 	bne	r7,zero,1000c4e4 <__umoddi3+0x13c>
1000c3e4:	3027883a 	mov	r19,r6
1000c3e8:	2029883a 	mov	r20,r4
1000c3ec:	2980552e 	bgeu	r5,r6,1000c544 <__umoddi3+0x19c>
1000c3f0:	00bfffd4 	movui	r2,65535
1000c3f4:	1180a236 	bltu	r2,r6,1000c680 <__umoddi3+0x2d8>
1000c3f8:	01003fc4 	movi	r4,255
1000c3fc:	2189803a 	cmpltu	r4,r4,r6
1000c400:	200890fa 	slli	r4,r4,3
1000c404:	3104d83a 	srl	r2,r6,r4
1000c408:	00c40074 	movhi	r3,4097
1000c40c:	18c95d04 	addi	r3,r3,9588
1000c410:	1885883a 	add	r2,r3,r2
1000c414:	10c00003 	ldbu	r3,0(r2)
1000c418:	00800804 	movi	r2,32
1000c41c:	1909883a 	add	r4,r3,r4
1000c420:	1125c83a 	sub	r18,r2,r4
1000c424:	90000526 	beq	r18,zero,1000c43c <__umoddi3+0x94>
1000c428:	8ca2983a 	sll	r17,r17,r18
1000c42c:	8108d83a 	srl	r4,r16,r4
1000c430:	34a6983a 	sll	r19,r6,r18
1000c434:	84a8983a 	sll	r20,r16,r18
1000c438:	2478b03a 	or	fp,r4,r17
1000c43c:	982cd43a 	srli	r22,r19,16
1000c440:	e009883a 	mov	r4,fp
1000c444:	9dffffcc 	andi	r23,r19,65535
1000c448:	b00b883a 	mov	r5,r22
1000c44c:	000cac80 	call	1000cac8 <__umodsi3>
1000c450:	b00b883a 	mov	r5,r22
1000c454:	e009883a 	mov	r4,fp
1000c458:	102b883a 	mov	r21,r2
1000c45c:	000ca640 	call	1000ca64 <__udivsi3>
1000c460:	100b883a 	mov	r5,r2
1000c464:	b809883a 	mov	r4,r23
1000c468:	000cb200 	call	1000cb20 <__mulsi3>
1000c46c:	a82a943a 	slli	r21,r21,16
1000c470:	a006d43a 	srli	r3,r20,16
1000c474:	1d46b03a 	or	r3,r3,r21
1000c478:	1880032e 	bgeu	r3,r2,1000c488 <__umoddi3+0xe0>
1000c47c:	1cc7883a 	add	r3,r3,r19
1000c480:	1cc00136 	bltu	r3,r19,1000c488 <__umoddi3+0xe0>
1000c484:	18813136 	bltu	r3,r2,1000c94c <__umoddi3+0x5a4>
1000c488:	18a1c83a 	sub	r16,r3,r2
1000c48c:	b00b883a 	mov	r5,r22
1000c490:	8009883a 	mov	r4,r16
1000c494:	000cac80 	call	1000cac8 <__umodsi3>
1000c498:	b00b883a 	mov	r5,r22
1000c49c:	8009883a 	mov	r4,r16
1000c4a0:	1023883a 	mov	r17,r2
1000c4a4:	000ca640 	call	1000ca64 <__udivsi3>
1000c4a8:	100b883a 	mov	r5,r2
1000c4ac:	b809883a 	mov	r4,r23
1000c4b0:	8822943a 	slli	r17,r17,16
1000c4b4:	000cb200 	call	1000cb20 <__mulsi3>
1000c4b8:	a0ffffcc 	andi	r3,r20,65535
1000c4bc:	1c46b03a 	or	r3,r3,r17
1000c4c0:	1880042e 	bgeu	r3,r2,1000c4d4 <__umoddi3+0x12c>
1000c4c4:	1cc7883a 	add	r3,r3,r19
1000c4c8:	1cc00236 	bltu	r3,r19,1000c4d4 <__umoddi3+0x12c>
1000c4cc:	1880012e 	bgeu	r3,r2,1000c4d4 <__umoddi3+0x12c>
1000c4d0:	1cc7883a 	add	r3,r3,r19
1000c4d4:	1885c83a 	sub	r2,r3,r2
1000c4d8:	1484d83a 	srl	r2,r2,r18
1000c4dc:	0007883a 	mov	r3,zero
1000c4e0:	00005306 	br	1000c630 <__umoddi3+0x288>
1000c4e4:	29c05036 	bltu	r5,r7,1000c628 <__umoddi3+0x280>
1000c4e8:	00bfffd4 	movui	r2,65535
1000c4ec:	11c05c2e 	bgeu	r2,r7,1000c660 <__umoddi3+0x2b8>
1000c4f0:	00804034 	movhi	r2,256
1000c4f4:	10bfffc4 	addi	r2,r2,-1
1000c4f8:	11c10636 	bltu	r2,r7,1000c914 <__umoddi3+0x56c>
1000c4fc:	01000404 	movi	r4,16
1000c500:	3904d83a 	srl	r2,r7,r4
1000c504:	00c40074 	movhi	r3,4097
1000c508:	18c95d04 	addi	r3,r3,9588
1000c50c:	1885883a 	add	r2,r3,r2
1000c510:	14c00003 	ldbu	r19,0(r2)
1000c514:	00c00804 	movi	r3,32
1000c518:	9927883a 	add	r19,r19,r4
1000c51c:	1ce9c83a 	sub	r20,r3,r19
1000c520:	a0005c1e 	bne	r20,zero,1000c694 <__umoddi3+0x2ec>
1000c524:	3c400136 	bltu	r7,r17,1000c52c <__umoddi3+0x184>
1000c528:	81810a36 	bltu	r16,r6,1000c954 <__umoddi3+0x5ac>
1000c52c:	8185c83a 	sub	r2,r16,r6
1000c530:	89e3c83a 	sub	r17,r17,r7
1000c534:	8089803a 	cmpltu	r4,r16,r2
1000c538:	8939c83a 	sub	fp,r17,r4
1000c53c:	e007883a 	mov	r3,fp
1000c540:	00003b06 	br	1000c630 <__umoddi3+0x288>
1000c544:	3000041e 	bne	r6,zero,1000c558 <__umoddi3+0x1b0>
1000c548:	000b883a 	mov	r5,zero
1000c54c:	01000044 	movi	r4,1
1000c550:	000ca640 	call	1000ca64 <__udivsi3>
1000c554:	1027883a 	mov	r19,r2
1000c558:	00bfffd4 	movui	r2,65535
1000c55c:	14c0442e 	bgeu	r2,r19,1000c670 <__umoddi3+0x2c8>
1000c560:	00804034 	movhi	r2,256
1000c564:	10bfffc4 	addi	r2,r2,-1
1000c568:	14c0ec36 	bltu	r2,r19,1000c91c <__umoddi3+0x574>
1000c56c:	00800404 	movi	r2,16
1000c570:	9886d83a 	srl	r3,r19,r2
1000c574:	01040074 	movhi	r4,4097
1000c578:	21095d04 	addi	r4,r4,9588
1000c57c:	20c7883a 	add	r3,r4,r3
1000c580:	18c00003 	ldbu	r3,0(r3)
1000c584:	1887883a 	add	r3,r3,r2
1000c588:	00800804 	movi	r2,32
1000c58c:	10e5c83a 	sub	r18,r2,r3
1000c590:	9000ab1e 	bne	r18,zero,1000c840 <__umoddi3+0x498>
1000c594:	982cd43a 	srli	r22,r19,16
1000c598:	8ce3c83a 	sub	r17,r17,r19
1000c59c:	9dffffcc 	andi	r23,r19,65535
1000c5a0:	b00b883a 	mov	r5,r22
1000c5a4:	8809883a 	mov	r4,r17
1000c5a8:	000cac80 	call	1000cac8 <__umodsi3>
1000c5ac:	b00b883a 	mov	r5,r22
1000c5b0:	8809883a 	mov	r4,r17
1000c5b4:	102b883a 	mov	r21,r2
1000c5b8:	000ca640 	call	1000ca64 <__udivsi3>
1000c5bc:	b80b883a 	mov	r5,r23
1000c5c0:	1009883a 	mov	r4,r2
1000c5c4:	000cb200 	call	1000cb20 <__mulsi3>
1000c5c8:	a82a943a 	slli	r21,r21,16
1000c5cc:	a006d43a 	srli	r3,r20,16
1000c5d0:	1d46b03a 	or	r3,r3,r21
1000c5d4:	1880042e 	bgeu	r3,r2,1000c5e8 <__umoddi3+0x240>
1000c5d8:	1cc7883a 	add	r3,r3,r19
1000c5dc:	1cc00236 	bltu	r3,r19,1000c5e8 <__umoddi3+0x240>
1000c5e0:	1880012e 	bgeu	r3,r2,1000c5e8 <__umoddi3+0x240>
1000c5e4:	1cc7883a 	add	r3,r3,r19
1000c5e8:	18a1c83a 	sub	r16,r3,r2
1000c5ec:	b00b883a 	mov	r5,r22
1000c5f0:	8009883a 	mov	r4,r16
1000c5f4:	000cac80 	call	1000cac8 <__umodsi3>
1000c5f8:	1023883a 	mov	r17,r2
1000c5fc:	b00b883a 	mov	r5,r22
1000c600:	8009883a 	mov	r4,r16
1000c604:	000ca640 	call	1000ca64 <__udivsi3>
1000c608:	8822943a 	slli	r17,r17,16
1000c60c:	b80b883a 	mov	r5,r23
1000c610:	1009883a 	mov	r4,r2
1000c614:	000cb200 	call	1000cb20 <__mulsi3>
1000c618:	a53fffcc 	andi	r20,r20,65535
1000c61c:	a446b03a 	or	r3,r20,r17
1000c620:	18bfac2e 	bgeu	r3,r2,1000c4d4 <__alt_data_end+0xf800c4d4>
1000c624:	003fa706 	br	1000c4c4 <__alt_data_end+0xf800c4c4>
1000c628:	2005883a 	mov	r2,r4
1000c62c:	2807883a 	mov	r3,r5
1000c630:	dfc00c17 	ldw	ra,48(sp)
1000c634:	df000b17 	ldw	fp,44(sp)
1000c638:	ddc00a17 	ldw	r23,40(sp)
1000c63c:	dd800917 	ldw	r22,36(sp)
1000c640:	dd400817 	ldw	r21,32(sp)
1000c644:	dd000717 	ldw	r20,28(sp)
1000c648:	dcc00617 	ldw	r19,24(sp)
1000c64c:	dc800517 	ldw	r18,20(sp)
1000c650:	dc400417 	ldw	r17,16(sp)
1000c654:	dc000317 	ldw	r16,12(sp)
1000c658:	dec00d04 	addi	sp,sp,52
1000c65c:	f800283a 	ret
1000c660:	04c03fc4 	movi	r19,255
1000c664:	99c9803a 	cmpltu	r4,r19,r7
1000c668:	200890fa 	slli	r4,r4,3
1000c66c:	003fa406 	br	1000c500 <__alt_data_end+0xf800c500>
1000c670:	00803fc4 	movi	r2,255
1000c674:	14c5803a 	cmpltu	r2,r2,r19
1000c678:	100490fa 	slli	r2,r2,3
1000c67c:	003fbc06 	br	1000c570 <__alt_data_end+0xf800c570>
1000c680:	00804034 	movhi	r2,256
1000c684:	10bfffc4 	addi	r2,r2,-1
1000c688:	1180a636 	bltu	r2,r6,1000c924 <__umoddi3+0x57c>
1000c68c:	01000404 	movi	r4,16
1000c690:	003f5c06 	br	1000c404 <__alt_data_end+0xf800c404>
1000c694:	3d0e983a 	sll	r7,r7,r20
1000c698:	34ead83a 	srl	r21,r6,r19
1000c69c:	8cc6d83a 	srl	r3,r17,r19
1000c6a0:	8d10983a 	sll	r8,r17,r20
1000c6a4:	3d6ab03a 	or	r21,r7,r21
1000c6a8:	a82cd43a 	srli	r22,r21,16
1000c6ac:	84e2d83a 	srl	r17,r16,r19
1000c6b0:	1809883a 	mov	r4,r3
1000c6b4:	b00b883a 	mov	r5,r22
1000c6b8:	8a22b03a 	or	r17,r17,r8
1000c6bc:	3524983a 	sll	r18,r6,r20
1000c6c0:	dc400015 	stw	r17,0(sp)
1000c6c4:	d8c00115 	stw	r3,4(sp)
1000c6c8:	000cac80 	call	1000cac8 <__umodsi3>
1000c6cc:	d8c00117 	ldw	r3,4(sp)
1000c6d0:	b00b883a 	mov	r5,r22
1000c6d4:	1039883a 	mov	fp,r2
1000c6d8:	1809883a 	mov	r4,r3
1000c6dc:	000ca640 	call	1000ca64 <__udivsi3>
1000c6e0:	adffffcc 	andi	r23,r21,65535
1000c6e4:	100b883a 	mov	r5,r2
1000c6e8:	b809883a 	mov	r4,r23
1000c6ec:	1023883a 	mov	r17,r2
1000c6f0:	000cb200 	call	1000cb20 <__mulsi3>
1000c6f4:	d9400017 	ldw	r5,0(sp)
1000c6f8:	e008943a 	slli	r4,fp,16
1000c6fc:	8520983a 	sll	r16,r16,r20
1000c700:	2806d43a 	srli	r3,r5,16
1000c704:	1906b03a 	or	r3,r3,r4
1000c708:	1880042e 	bgeu	r3,r2,1000c71c <__umoddi3+0x374>
1000c70c:	1d47883a 	add	r3,r3,r21
1000c710:	893fffc4 	addi	r4,r17,-1
1000c714:	1d40892e 	bgeu	r3,r21,1000c93c <__umoddi3+0x594>
1000c718:	2023883a 	mov	r17,r4
1000c71c:	18b9c83a 	sub	fp,r3,r2
1000c720:	b00b883a 	mov	r5,r22
1000c724:	e009883a 	mov	r4,fp
1000c728:	000cac80 	call	1000cac8 <__umodsi3>
1000c72c:	b00b883a 	mov	r5,r22
1000c730:	e009883a 	mov	r4,fp
1000c734:	d8800215 	stw	r2,8(sp)
1000c738:	000ca640 	call	1000ca64 <__udivsi3>
1000c73c:	100b883a 	mov	r5,r2
1000c740:	b809883a 	mov	r4,r23
1000c744:	102d883a 	mov	r22,r2
1000c748:	000cb200 	call	1000cb20 <__mulsi3>
1000c74c:	d9800217 	ldw	r6,8(sp)
1000c750:	d8c00017 	ldw	r3,0(sp)
1000c754:	300c943a 	slli	r6,r6,16
1000c758:	1a3fffcc 	andi	r8,r3,65535
1000c75c:	4190b03a 	or	r8,r8,r6
1000c760:	4080042e 	bgeu	r8,r2,1000c774 <__umoddi3+0x3cc>
1000c764:	4551883a 	add	r8,r8,r21
1000c768:	b0ffffc4 	addi	r3,r22,-1
1000c76c:	45406f2e 	bgeu	r8,r21,1000c92c <__umoddi3+0x584>
1000c770:	182d883a 	mov	r22,r3
1000c774:	880e943a 	slli	r7,r17,16
1000c778:	9006d43a 	srli	r3,r18,16
1000c77c:	91bfffcc 	andi	r6,r18,65535
1000c780:	3dacb03a 	or	r22,r7,r22
1000c784:	b02ed43a 	srli	r23,r22,16
1000c788:	b5bfffcc 	andi	r22,r22,65535
1000c78c:	300b883a 	mov	r5,r6
1000c790:	b009883a 	mov	r4,r22
1000c794:	40a3c83a 	sub	r17,r8,r2
1000c798:	d8c00115 	stw	r3,4(sp)
1000c79c:	d9800215 	stw	r6,8(sp)
1000c7a0:	000cb200 	call	1000cb20 <__mulsi3>
1000c7a4:	d9800217 	ldw	r6,8(sp)
1000c7a8:	b809883a 	mov	r4,r23
1000c7ac:	1039883a 	mov	fp,r2
1000c7b0:	300b883a 	mov	r5,r6
1000c7b4:	000cb200 	call	1000cb20 <__mulsi3>
1000c7b8:	d8c00117 	ldw	r3,4(sp)
1000c7bc:	b809883a 	mov	r4,r23
1000c7c0:	d8800215 	stw	r2,8(sp)
1000c7c4:	180b883a 	mov	r5,r3
1000c7c8:	000cb200 	call	1000cb20 <__mulsi3>
1000c7cc:	d8c00117 	ldw	r3,4(sp)
1000c7d0:	b009883a 	mov	r4,r22
1000c7d4:	102f883a 	mov	r23,r2
1000c7d8:	180b883a 	mov	r5,r3
1000c7dc:	000cb200 	call	1000cb20 <__mulsi3>
1000c7e0:	d9800217 	ldw	r6,8(sp)
1000c7e4:	e006d43a 	srli	r3,fp,16
1000c7e8:	1185883a 	add	r2,r2,r6
1000c7ec:	1885883a 	add	r2,r3,r2
1000c7f0:	1180022e 	bgeu	r2,r6,1000c7fc <__umoddi3+0x454>
1000c7f4:	00c00074 	movhi	r3,1
1000c7f8:	b8ef883a 	add	r23,r23,r3
1000c7fc:	1006d43a 	srli	r3,r2,16
1000c800:	1004943a 	slli	r2,r2,16
1000c804:	e73fffcc 	andi	fp,fp,65535
1000c808:	1dc7883a 	add	r3,r3,r23
1000c80c:	1739883a 	add	fp,r2,fp
1000c810:	88c03a36 	bltu	r17,r3,1000c8fc <__umoddi3+0x554>
1000c814:	88c05126 	beq	r17,r3,1000c95c <__umoddi3+0x5b4>
1000c818:	88c9c83a 	sub	r4,r17,r3
1000c81c:	e00f883a 	mov	r7,fp
1000c820:	81cfc83a 	sub	r7,r16,r7
1000c824:	81c7803a 	cmpltu	r3,r16,r7
1000c828:	20c7c83a 	sub	r3,r4,r3
1000c82c:	1cc4983a 	sll	r2,r3,r19
1000c830:	3d0ed83a 	srl	r7,r7,r20
1000c834:	1d06d83a 	srl	r3,r3,r20
1000c838:	11c4b03a 	or	r2,r2,r7
1000c83c:	003f7c06 	br	1000c630 <__alt_data_end+0xf800c630>
1000c840:	9ca6983a 	sll	r19,r19,r18
1000c844:	88f8d83a 	srl	fp,r17,r3
1000c848:	80c4d83a 	srl	r2,r16,r3
1000c84c:	982cd43a 	srli	r22,r19,16
1000c850:	8ca2983a 	sll	r17,r17,r18
1000c854:	e009883a 	mov	r4,fp
1000c858:	b00b883a 	mov	r5,r22
1000c85c:	146ab03a 	or	r21,r2,r17
1000c860:	000cac80 	call	1000cac8 <__umodsi3>
1000c864:	b00b883a 	mov	r5,r22
1000c868:	e009883a 	mov	r4,fp
1000c86c:	1029883a 	mov	r20,r2
1000c870:	9dffffcc 	andi	r23,r19,65535
1000c874:	000ca640 	call	1000ca64 <__udivsi3>
1000c878:	b809883a 	mov	r4,r23
1000c87c:	100b883a 	mov	r5,r2
1000c880:	000cb200 	call	1000cb20 <__mulsi3>
1000c884:	a008943a 	slli	r4,r20,16
1000c888:	a806d43a 	srli	r3,r21,16
1000c88c:	84a8983a 	sll	r20,r16,r18
1000c890:	1906b03a 	or	r3,r3,r4
1000c894:	1880042e 	bgeu	r3,r2,1000c8a8 <__umoddi3+0x500>
1000c898:	1cc7883a 	add	r3,r3,r19
1000c89c:	1cc00236 	bltu	r3,r19,1000c8a8 <__umoddi3+0x500>
1000c8a0:	1880012e 	bgeu	r3,r2,1000c8a8 <__umoddi3+0x500>
1000c8a4:	1cc7883a 	add	r3,r3,r19
1000c8a8:	18a3c83a 	sub	r17,r3,r2
1000c8ac:	b00b883a 	mov	r5,r22
1000c8b0:	8809883a 	mov	r4,r17
1000c8b4:	000cac80 	call	1000cac8 <__umodsi3>
1000c8b8:	b00b883a 	mov	r5,r22
1000c8bc:	8809883a 	mov	r4,r17
1000c8c0:	1021883a 	mov	r16,r2
1000c8c4:	000ca640 	call	1000ca64 <__udivsi3>
1000c8c8:	100b883a 	mov	r5,r2
1000c8cc:	b809883a 	mov	r4,r23
1000c8d0:	8020943a 	slli	r16,r16,16
1000c8d4:	000cb200 	call	1000cb20 <__mulsi3>
1000c8d8:	a8ffffcc 	andi	r3,r21,65535
1000c8dc:	1c06b03a 	or	r3,r3,r16
1000c8e0:	1880042e 	bgeu	r3,r2,1000c8f4 <__umoddi3+0x54c>
1000c8e4:	1cc7883a 	add	r3,r3,r19
1000c8e8:	1cc00236 	bltu	r3,r19,1000c8f4 <__umoddi3+0x54c>
1000c8ec:	1880012e 	bgeu	r3,r2,1000c8f4 <__umoddi3+0x54c>
1000c8f0:	1cc7883a 	add	r3,r3,r19
1000c8f4:	18a3c83a 	sub	r17,r3,r2
1000c8f8:	003f2906 	br	1000c5a0 <__alt_data_end+0xf800c5a0>
1000c8fc:	e48fc83a 	sub	r7,fp,r18
1000c900:	1d49c83a 	sub	r4,r3,r21
1000c904:	e1f9803a 	cmpltu	fp,fp,r7
1000c908:	2739c83a 	sub	fp,r4,fp
1000c90c:	8f09c83a 	sub	r4,r17,fp
1000c910:	003fc306 	br	1000c820 <__alt_data_end+0xf800c820>
1000c914:	01000604 	movi	r4,24
1000c918:	003ef906 	br	1000c500 <__alt_data_end+0xf800c500>
1000c91c:	00800604 	movi	r2,24
1000c920:	003f1306 	br	1000c570 <__alt_data_end+0xf800c570>
1000c924:	01000604 	movi	r4,24
1000c928:	003eb606 	br	1000c404 <__alt_data_end+0xf800c404>
1000c92c:	40bf902e 	bgeu	r8,r2,1000c770 <__alt_data_end+0xf800c770>
1000c930:	b5bfff84 	addi	r22,r22,-2
1000c934:	4551883a 	add	r8,r8,r21
1000c938:	003f8e06 	br	1000c774 <__alt_data_end+0xf800c774>
1000c93c:	18bf762e 	bgeu	r3,r2,1000c718 <__alt_data_end+0xf800c718>
1000c940:	8c7fff84 	addi	r17,r17,-2
1000c944:	1d47883a 	add	r3,r3,r21
1000c948:	003f7406 	br	1000c71c <__alt_data_end+0xf800c71c>
1000c94c:	1cc7883a 	add	r3,r3,r19
1000c950:	003ecd06 	br	1000c488 <__alt_data_end+0xf800c488>
1000c954:	8005883a 	mov	r2,r16
1000c958:	003ef806 	br	1000c53c <__alt_data_end+0xf800c53c>
1000c95c:	873fe736 	bltu	r16,fp,1000c8fc <__alt_data_end+0xf800c8fc>
1000c960:	e00f883a 	mov	r7,fp
1000c964:	0009883a 	mov	r4,zero
1000c968:	003fad06 	br	1000c820 <__alt_data_end+0xf800c820>

1000c96c <__divsi3>:
1000c96c:	20001b16 	blt	r4,zero,1000c9dc <__divsi3+0x70>
1000c970:	000f883a 	mov	r7,zero
1000c974:	28001616 	blt	r5,zero,1000c9d0 <__divsi3+0x64>
1000c978:	200d883a 	mov	r6,r4
1000c97c:	29001a2e 	bgeu	r5,r4,1000c9e8 <__divsi3+0x7c>
1000c980:	00800804 	movi	r2,32
1000c984:	00c00044 	movi	r3,1
1000c988:	00000106 	br	1000c990 <__divsi3+0x24>
1000c98c:	10000d26 	beq	r2,zero,1000c9c4 <__divsi3+0x58>
1000c990:	294b883a 	add	r5,r5,r5
1000c994:	10bfffc4 	addi	r2,r2,-1
1000c998:	18c7883a 	add	r3,r3,r3
1000c99c:	293ffb36 	bltu	r5,r4,1000c98c <__alt_data_end+0xf800c98c>
1000c9a0:	0005883a 	mov	r2,zero
1000c9a4:	18000726 	beq	r3,zero,1000c9c4 <__divsi3+0x58>
1000c9a8:	0005883a 	mov	r2,zero
1000c9ac:	31400236 	bltu	r6,r5,1000c9b8 <__divsi3+0x4c>
1000c9b0:	314dc83a 	sub	r6,r6,r5
1000c9b4:	10c4b03a 	or	r2,r2,r3
1000c9b8:	1806d07a 	srli	r3,r3,1
1000c9bc:	280ad07a 	srli	r5,r5,1
1000c9c0:	183ffa1e 	bne	r3,zero,1000c9ac <__alt_data_end+0xf800c9ac>
1000c9c4:	38000126 	beq	r7,zero,1000c9cc <__divsi3+0x60>
1000c9c8:	0085c83a 	sub	r2,zero,r2
1000c9cc:	f800283a 	ret
1000c9d0:	014bc83a 	sub	r5,zero,r5
1000c9d4:	39c0005c 	xori	r7,r7,1
1000c9d8:	003fe706 	br	1000c978 <__alt_data_end+0xf800c978>
1000c9dc:	0109c83a 	sub	r4,zero,r4
1000c9e0:	01c00044 	movi	r7,1
1000c9e4:	003fe306 	br	1000c974 <__alt_data_end+0xf800c974>
1000c9e8:	00c00044 	movi	r3,1
1000c9ec:	003fee06 	br	1000c9a8 <__alt_data_end+0xf800c9a8>

1000c9f0 <__modsi3>:
1000c9f0:	20001716 	blt	r4,zero,1000ca50 <__modsi3+0x60>
1000c9f4:	000f883a 	mov	r7,zero
1000c9f8:	2005883a 	mov	r2,r4
1000c9fc:	28001216 	blt	r5,zero,1000ca48 <__modsi3+0x58>
1000ca00:	2900162e 	bgeu	r5,r4,1000ca5c <__modsi3+0x6c>
1000ca04:	01800804 	movi	r6,32
1000ca08:	00c00044 	movi	r3,1
1000ca0c:	00000106 	br	1000ca14 <__modsi3+0x24>
1000ca10:	30000a26 	beq	r6,zero,1000ca3c <__modsi3+0x4c>
1000ca14:	294b883a 	add	r5,r5,r5
1000ca18:	31bfffc4 	addi	r6,r6,-1
1000ca1c:	18c7883a 	add	r3,r3,r3
1000ca20:	293ffb36 	bltu	r5,r4,1000ca10 <__alt_data_end+0xf800ca10>
1000ca24:	18000526 	beq	r3,zero,1000ca3c <__modsi3+0x4c>
1000ca28:	1806d07a 	srli	r3,r3,1
1000ca2c:	11400136 	bltu	r2,r5,1000ca34 <__modsi3+0x44>
1000ca30:	1145c83a 	sub	r2,r2,r5
1000ca34:	280ad07a 	srli	r5,r5,1
1000ca38:	183ffb1e 	bne	r3,zero,1000ca28 <__alt_data_end+0xf800ca28>
1000ca3c:	38000126 	beq	r7,zero,1000ca44 <__modsi3+0x54>
1000ca40:	0085c83a 	sub	r2,zero,r2
1000ca44:	f800283a 	ret
1000ca48:	014bc83a 	sub	r5,zero,r5
1000ca4c:	003fec06 	br	1000ca00 <__alt_data_end+0xf800ca00>
1000ca50:	0109c83a 	sub	r4,zero,r4
1000ca54:	01c00044 	movi	r7,1
1000ca58:	003fe706 	br	1000c9f8 <__alt_data_end+0xf800c9f8>
1000ca5c:	00c00044 	movi	r3,1
1000ca60:	003ff106 	br	1000ca28 <__alt_data_end+0xf800ca28>

1000ca64 <__udivsi3>:
1000ca64:	200d883a 	mov	r6,r4
1000ca68:	2900152e 	bgeu	r5,r4,1000cac0 <__udivsi3+0x5c>
1000ca6c:	28001416 	blt	r5,zero,1000cac0 <__udivsi3+0x5c>
1000ca70:	00800804 	movi	r2,32
1000ca74:	00c00044 	movi	r3,1
1000ca78:	00000206 	br	1000ca84 <__udivsi3+0x20>
1000ca7c:	10000e26 	beq	r2,zero,1000cab8 <__udivsi3+0x54>
1000ca80:	28000516 	blt	r5,zero,1000ca98 <__udivsi3+0x34>
1000ca84:	294b883a 	add	r5,r5,r5
1000ca88:	10bfffc4 	addi	r2,r2,-1
1000ca8c:	18c7883a 	add	r3,r3,r3
1000ca90:	293ffa36 	bltu	r5,r4,1000ca7c <__alt_data_end+0xf800ca7c>
1000ca94:	18000826 	beq	r3,zero,1000cab8 <__udivsi3+0x54>
1000ca98:	0005883a 	mov	r2,zero
1000ca9c:	31400236 	bltu	r6,r5,1000caa8 <__udivsi3+0x44>
1000caa0:	314dc83a 	sub	r6,r6,r5
1000caa4:	10c4b03a 	or	r2,r2,r3
1000caa8:	1806d07a 	srli	r3,r3,1
1000caac:	280ad07a 	srli	r5,r5,1
1000cab0:	183ffa1e 	bne	r3,zero,1000ca9c <__alt_data_end+0xf800ca9c>
1000cab4:	f800283a 	ret
1000cab8:	0005883a 	mov	r2,zero
1000cabc:	f800283a 	ret
1000cac0:	00c00044 	movi	r3,1
1000cac4:	003ff406 	br	1000ca98 <__alt_data_end+0xf800ca98>

1000cac8 <__umodsi3>:
1000cac8:	2005883a 	mov	r2,r4
1000cacc:	2900122e 	bgeu	r5,r4,1000cb18 <__umodsi3+0x50>
1000cad0:	28001116 	blt	r5,zero,1000cb18 <__umodsi3+0x50>
1000cad4:	01800804 	movi	r6,32
1000cad8:	00c00044 	movi	r3,1
1000cadc:	00000206 	br	1000cae8 <__umodsi3+0x20>
1000cae0:	30000c26 	beq	r6,zero,1000cb14 <__umodsi3+0x4c>
1000cae4:	28000516 	blt	r5,zero,1000cafc <__umodsi3+0x34>
1000cae8:	294b883a 	add	r5,r5,r5
1000caec:	31bfffc4 	addi	r6,r6,-1
1000caf0:	18c7883a 	add	r3,r3,r3
1000caf4:	293ffa36 	bltu	r5,r4,1000cae0 <__alt_data_end+0xf800cae0>
1000caf8:	18000626 	beq	r3,zero,1000cb14 <__umodsi3+0x4c>
1000cafc:	1806d07a 	srli	r3,r3,1
1000cb00:	11400136 	bltu	r2,r5,1000cb08 <__umodsi3+0x40>
1000cb04:	1145c83a 	sub	r2,r2,r5
1000cb08:	280ad07a 	srli	r5,r5,1
1000cb0c:	183ffb1e 	bne	r3,zero,1000cafc <__alt_data_end+0xf800cafc>
1000cb10:	f800283a 	ret
1000cb14:	f800283a 	ret
1000cb18:	00c00044 	movi	r3,1
1000cb1c:	003ff706 	br	1000cafc <__alt_data_end+0xf800cafc>

1000cb20 <__mulsi3>:
1000cb20:	0005883a 	mov	r2,zero
1000cb24:	20000726 	beq	r4,zero,1000cb44 <__mulsi3+0x24>
1000cb28:	20c0004c 	andi	r3,r4,1
1000cb2c:	2008d07a 	srli	r4,r4,1
1000cb30:	18000126 	beq	r3,zero,1000cb38 <__mulsi3+0x18>
1000cb34:	1145883a 	add	r2,r2,r5
1000cb38:	294b883a 	add	r5,r5,r5
1000cb3c:	203ffa1e 	bne	r4,zero,1000cb28 <__alt_data_end+0xf800cb28>
1000cb40:	f800283a 	ret
1000cb44:	f800283a 	ret

1000cb48 <__adddf3>:
1000cb48:	02c00434 	movhi	r11,16
1000cb4c:	5affffc4 	addi	r11,r11,-1
1000cb50:	2806d7fa 	srli	r3,r5,31
1000cb54:	2ad4703a 	and	r10,r5,r11
1000cb58:	3ad2703a 	and	r9,r7,r11
1000cb5c:	3804d53a 	srli	r2,r7,20
1000cb60:	3018d77a 	srli	r12,r6,29
1000cb64:	280ad53a 	srli	r5,r5,20
1000cb68:	501490fa 	slli	r10,r10,3
1000cb6c:	2010d77a 	srli	r8,r4,29
1000cb70:	481290fa 	slli	r9,r9,3
1000cb74:	380ed7fa 	srli	r7,r7,31
1000cb78:	defffb04 	addi	sp,sp,-20
1000cb7c:	dc800215 	stw	r18,8(sp)
1000cb80:	dc400115 	stw	r17,4(sp)
1000cb84:	dc000015 	stw	r16,0(sp)
1000cb88:	dfc00415 	stw	ra,16(sp)
1000cb8c:	dcc00315 	stw	r19,12(sp)
1000cb90:	1c803fcc 	andi	r18,r3,255
1000cb94:	2c01ffcc 	andi	r16,r5,2047
1000cb98:	5210b03a 	or	r8,r10,r8
1000cb9c:	202290fa 	slli	r17,r4,3
1000cba0:	1081ffcc 	andi	r2,r2,2047
1000cba4:	4b12b03a 	or	r9,r9,r12
1000cba8:	300c90fa 	slli	r6,r6,3
1000cbac:	91c07526 	beq	r18,r7,1000cd84 <__adddf3+0x23c>
1000cbb0:	8087c83a 	sub	r3,r16,r2
1000cbb4:	00c0ab0e 	bge	zero,r3,1000ce64 <__adddf3+0x31c>
1000cbb8:	10002a1e 	bne	r2,zero,1000cc64 <__adddf3+0x11c>
1000cbbc:	4984b03a 	or	r2,r9,r6
1000cbc0:	1000961e 	bne	r2,zero,1000ce1c <__adddf3+0x2d4>
1000cbc4:	888001cc 	andi	r2,r17,7
1000cbc8:	10000726 	beq	r2,zero,1000cbe8 <__adddf3+0xa0>
1000cbcc:	888003cc 	andi	r2,r17,15
1000cbd0:	00c00104 	movi	r3,4
1000cbd4:	10c00426 	beq	r2,r3,1000cbe8 <__adddf3+0xa0>
1000cbd8:	88c7883a 	add	r3,r17,r3
1000cbdc:	1c63803a 	cmpltu	r17,r3,r17
1000cbe0:	4451883a 	add	r8,r8,r17
1000cbe4:	1823883a 	mov	r17,r3
1000cbe8:	4080202c 	andhi	r2,r8,128
1000cbec:	10005926 	beq	r2,zero,1000cd54 <__adddf3+0x20c>
1000cbf0:	84000044 	addi	r16,r16,1
1000cbf4:	0081ffc4 	movi	r2,2047
1000cbf8:	8080ba26 	beq	r16,r2,1000cee4 <__adddf3+0x39c>
1000cbfc:	00bfe034 	movhi	r2,65408
1000cc00:	10bfffc4 	addi	r2,r2,-1
1000cc04:	4090703a 	and	r8,r8,r2
1000cc08:	4004977a 	slli	r2,r8,29
1000cc0c:	4010927a 	slli	r8,r8,9
1000cc10:	8822d0fa 	srli	r17,r17,3
1000cc14:	8401ffcc 	andi	r16,r16,2047
1000cc18:	4010d33a 	srli	r8,r8,12
1000cc1c:	9007883a 	mov	r3,r18
1000cc20:	1444b03a 	or	r2,r2,r17
1000cc24:	8401ffcc 	andi	r16,r16,2047
1000cc28:	8020953a 	slli	r16,r16,20
1000cc2c:	18c03fcc 	andi	r3,r3,255
1000cc30:	01000434 	movhi	r4,16
1000cc34:	213fffc4 	addi	r4,r4,-1
1000cc38:	180697fa 	slli	r3,r3,31
1000cc3c:	4110703a 	and	r8,r8,r4
1000cc40:	4410b03a 	or	r8,r8,r16
1000cc44:	40c6b03a 	or	r3,r8,r3
1000cc48:	dfc00417 	ldw	ra,16(sp)
1000cc4c:	dcc00317 	ldw	r19,12(sp)
1000cc50:	dc800217 	ldw	r18,8(sp)
1000cc54:	dc400117 	ldw	r17,4(sp)
1000cc58:	dc000017 	ldw	r16,0(sp)
1000cc5c:	dec00504 	addi	sp,sp,20
1000cc60:	f800283a 	ret
1000cc64:	0081ffc4 	movi	r2,2047
1000cc68:	80bfd626 	beq	r16,r2,1000cbc4 <__alt_data_end+0xf800cbc4>
1000cc6c:	4a402034 	orhi	r9,r9,128
1000cc70:	00800e04 	movi	r2,56
1000cc74:	10c09f16 	blt	r2,r3,1000cef4 <__adddf3+0x3ac>
1000cc78:	008007c4 	movi	r2,31
1000cc7c:	10c0c216 	blt	r2,r3,1000cf88 <__adddf3+0x440>
1000cc80:	00800804 	movi	r2,32
1000cc84:	10c5c83a 	sub	r2,r2,r3
1000cc88:	488a983a 	sll	r5,r9,r2
1000cc8c:	30c8d83a 	srl	r4,r6,r3
1000cc90:	3084983a 	sll	r2,r6,r2
1000cc94:	48c6d83a 	srl	r3,r9,r3
1000cc98:	290cb03a 	or	r6,r5,r4
1000cc9c:	1004c03a 	cmpne	r2,r2,zero
1000cca0:	308cb03a 	or	r6,r6,r2
1000cca4:	898dc83a 	sub	r6,r17,r6
1000cca8:	89a3803a 	cmpltu	r17,r17,r6
1000ccac:	40d1c83a 	sub	r8,r8,r3
1000ccb0:	4451c83a 	sub	r8,r8,r17
1000ccb4:	3023883a 	mov	r17,r6
1000ccb8:	4080202c 	andhi	r2,r8,128
1000ccbc:	10002326 	beq	r2,zero,1000cd4c <__adddf3+0x204>
1000ccc0:	04c02034 	movhi	r19,128
1000ccc4:	9cffffc4 	addi	r19,r19,-1
1000ccc8:	44e6703a 	and	r19,r8,r19
1000cccc:	98007626 	beq	r19,zero,1000cea8 <__adddf3+0x360>
1000ccd0:	9809883a 	mov	r4,r19
1000ccd4:	000f3880 	call	1000f388 <__clzsi2>
1000ccd8:	10fffe04 	addi	r3,r2,-8
1000ccdc:	010007c4 	movi	r4,31
1000cce0:	20c07716 	blt	r4,r3,1000cec0 <__adddf3+0x378>
1000cce4:	00800804 	movi	r2,32
1000cce8:	10c5c83a 	sub	r2,r2,r3
1000ccec:	8884d83a 	srl	r2,r17,r2
1000ccf0:	98d0983a 	sll	r8,r19,r3
1000ccf4:	88e2983a 	sll	r17,r17,r3
1000ccf8:	1204b03a 	or	r2,r2,r8
1000ccfc:	1c007416 	blt	r3,r16,1000ced0 <__adddf3+0x388>
1000cd00:	1c21c83a 	sub	r16,r3,r16
1000cd04:	82000044 	addi	r8,r16,1
1000cd08:	00c007c4 	movi	r3,31
1000cd0c:	1a009116 	blt	r3,r8,1000cf54 <__adddf3+0x40c>
1000cd10:	00c00804 	movi	r3,32
1000cd14:	1a07c83a 	sub	r3,r3,r8
1000cd18:	8a08d83a 	srl	r4,r17,r8
1000cd1c:	88e2983a 	sll	r17,r17,r3
1000cd20:	10c6983a 	sll	r3,r2,r3
1000cd24:	1210d83a 	srl	r8,r2,r8
1000cd28:	8804c03a 	cmpne	r2,r17,zero
1000cd2c:	1906b03a 	or	r3,r3,r4
1000cd30:	18a2b03a 	or	r17,r3,r2
1000cd34:	0021883a 	mov	r16,zero
1000cd38:	003fa206 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000cd3c:	1890b03a 	or	r8,r3,r2
1000cd40:	40017d26 	beq	r8,zero,1000d338 <__adddf3+0x7f0>
1000cd44:	1011883a 	mov	r8,r2
1000cd48:	1823883a 	mov	r17,r3
1000cd4c:	888001cc 	andi	r2,r17,7
1000cd50:	103f9e1e 	bne	r2,zero,1000cbcc <__alt_data_end+0xf800cbcc>
1000cd54:	4004977a 	slli	r2,r8,29
1000cd58:	8822d0fa 	srli	r17,r17,3
1000cd5c:	4010d0fa 	srli	r8,r8,3
1000cd60:	9007883a 	mov	r3,r18
1000cd64:	1444b03a 	or	r2,r2,r17
1000cd68:	0101ffc4 	movi	r4,2047
1000cd6c:	81002426 	beq	r16,r4,1000ce00 <__adddf3+0x2b8>
1000cd70:	8120703a 	and	r16,r16,r4
1000cd74:	01000434 	movhi	r4,16
1000cd78:	213fffc4 	addi	r4,r4,-1
1000cd7c:	4110703a 	and	r8,r8,r4
1000cd80:	003fa806 	br	1000cc24 <__alt_data_end+0xf800cc24>
1000cd84:	8089c83a 	sub	r4,r16,r2
1000cd88:	01005e0e 	bge	zero,r4,1000cf04 <__adddf3+0x3bc>
1000cd8c:	10002b26 	beq	r2,zero,1000ce3c <__adddf3+0x2f4>
1000cd90:	0081ffc4 	movi	r2,2047
1000cd94:	80bf8b26 	beq	r16,r2,1000cbc4 <__alt_data_end+0xf800cbc4>
1000cd98:	4a402034 	orhi	r9,r9,128
1000cd9c:	00800e04 	movi	r2,56
1000cda0:	1100a40e 	bge	r2,r4,1000d034 <__adddf3+0x4ec>
1000cda4:	498cb03a 	or	r6,r9,r6
1000cda8:	300ac03a 	cmpne	r5,r6,zero
1000cdac:	0013883a 	mov	r9,zero
1000cdb0:	2c4b883a 	add	r5,r5,r17
1000cdb4:	2c63803a 	cmpltu	r17,r5,r17
1000cdb8:	4a11883a 	add	r8,r9,r8
1000cdbc:	8a11883a 	add	r8,r17,r8
1000cdc0:	2823883a 	mov	r17,r5
1000cdc4:	4080202c 	andhi	r2,r8,128
1000cdc8:	103fe026 	beq	r2,zero,1000cd4c <__alt_data_end+0xf800cd4c>
1000cdcc:	84000044 	addi	r16,r16,1
1000cdd0:	0081ffc4 	movi	r2,2047
1000cdd4:	8080d226 	beq	r16,r2,1000d120 <__adddf3+0x5d8>
1000cdd8:	00bfe034 	movhi	r2,65408
1000cddc:	10bfffc4 	addi	r2,r2,-1
1000cde0:	4090703a 	and	r8,r8,r2
1000cde4:	880ad07a 	srli	r5,r17,1
1000cde8:	400897fa 	slli	r4,r8,31
1000cdec:	88c0004c 	andi	r3,r17,1
1000cdf0:	28e2b03a 	or	r17,r5,r3
1000cdf4:	4010d07a 	srli	r8,r8,1
1000cdf8:	2462b03a 	or	r17,r4,r17
1000cdfc:	003f7106 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000ce00:	4088b03a 	or	r4,r8,r2
1000ce04:	20014526 	beq	r4,zero,1000d31c <__adddf3+0x7d4>
1000ce08:	01000434 	movhi	r4,16
1000ce0c:	42000234 	orhi	r8,r8,8
1000ce10:	213fffc4 	addi	r4,r4,-1
1000ce14:	4110703a 	and	r8,r8,r4
1000ce18:	003f8206 	br	1000cc24 <__alt_data_end+0xf800cc24>
1000ce1c:	18ffffc4 	addi	r3,r3,-1
1000ce20:	1800491e 	bne	r3,zero,1000cf48 <__adddf3+0x400>
1000ce24:	898bc83a 	sub	r5,r17,r6
1000ce28:	8963803a 	cmpltu	r17,r17,r5
1000ce2c:	4251c83a 	sub	r8,r8,r9
1000ce30:	4451c83a 	sub	r8,r8,r17
1000ce34:	2823883a 	mov	r17,r5
1000ce38:	003f9f06 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000ce3c:	4984b03a 	or	r2,r9,r6
1000ce40:	103f6026 	beq	r2,zero,1000cbc4 <__alt_data_end+0xf800cbc4>
1000ce44:	213fffc4 	addi	r4,r4,-1
1000ce48:	2000931e 	bne	r4,zero,1000d098 <__adddf3+0x550>
1000ce4c:	898d883a 	add	r6,r17,r6
1000ce50:	3463803a 	cmpltu	r17,r6,r17
1000ce54:	4251883a 	add	r8,r8,r9
1000ce58:	8a11883a 	add	r8,r17,r8
1000ce5c:	3023883a 	mov	r17,r6
1000ce60:	003fd806 	br	1000cdc4 <__alt_data_end+0xf800cdc4>
1000ce64:	1800541e 	bne	r3,zero,1000cfb8 <__adddf3+0x470>
1000ce68:	80800044 	addi	r2,r16,1
1000ce6c:	1081ffcc 	andi	r2,r2,2047
1000ce70:	00c00044 	movi	r3,1
1000ce74:	1880a00e 	bge	r3,r2,1000d0f8 <__adddf3+0x5b0>
1000ce78:	8989c83a 	sub	r4,r17,r6
1000ce7c:	8905803a 	cmpltu	r2,r17,r4
1000ce80:	4267c83a 	sub	r19,r8,r9
1000ce84:	98a7c83a 	sub	r19,r19,r2
1000ce88:	9880202c 	andhi	r2,r19,128
1000ce8c:	10006326 	beq	r2,zero,1000d01c <__adddf3+0x4d4>
1000ce90:	3463c83a 	sub	r17,r6,r17
1000ce94:	4a07c83a 	sub	r3,r9,r8
1000ce98:	344d803a 	cmpltu	r6,r6,r17
1000ce9c:	19a7c83a 	sub	r19,r3,r6
1000cea0:	3825883a 	mov	r18,r7
1000cea4:	983f8a1e 	bne	r19,zero,1000ccd0 <__alt_data_end+0xf800ccd0>
1000cea8:	8809883a 	mov	r4,r17
1000ceac:	000f3880 	call	1000f388 <__clzsi2>
1000ceb0:	10800804 	addi	r2,r2,32
1000ceb4:	10fffe04 	addi	r3,r2,-8
1000ceb8:	010007c4 	movi	r4,31
1000cebc:	20ff890e 	bge	r4,r3,1000cce4 <__alt_data_end+0xf800cce4>
1000cec0:	10bff604 	addi	r2,r2,-40
1000cec4:	8884983a 	sll	r2,r17,r2
1000cec8:	0023883a 	mov	r17,zero
1000cecc:	1c3f8c0e 	bge	r3,r16,1000cd00 <__alt_data_end+0xf800cd00>
1000ced0:	023fe034 	movhi	r8,65408
1000ced4:	423fffc4 	addi	r8,r8,-1
1000ced8:	80e1c83a 	sub	r16,r16,r3
1000cedc:	1210703a 	and	r8,r2,r8
1000cee0:	003f3806 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000cee4:	9007883a 	mov	r3,r18
1000cee8:	0011883a 	mov	r8,zero
1000ceec:	0005883a 	mov	r2,zero
1000cef0:	003f4c06 	br	1000cc24 <__alt_data_end+0xf800cc24>
1000cef4:	498cb03a 	or	r6,r9,r6
1000cef8:	300cc03a 	cmpne	r6,r6,zero
1000cefc:	0007883a 	mov	r3,zero
1000cf00:	003f6806 	br	1000cca4 <__alt_data_end+0xf800cca4>
1000cf04:	20009c1e 	bne	r4,zero,1000d178 <__adddf3+0x630>
1000cf08:	80800044 	addi	r2,r16,1
1000cf0c:	1141ffcc 	andi	r5,r2,2047
1000cf10:	01000044 	movi	r4,1
1000cf14:	2140670e 	bge	r4,r5,1000d0b4 <__adddf3+0x56c>
1000cf18:	0101ffc4 	movi	r4,2047
1000cf1c:	11007f26 	beq	r2,r4,1000d11c <__adddf3+0x5d4>
1000cf20:	898d883a 	add	r6,r17,r6
1000cf24:	4247883a 	add	r3,r8,r9
1000cf28:	3451803a 	cmpltu	r8,r6,r17
1000cf2c:	40d1883a 	add	r8,r8,r3
1000cf30:	402297fa 	slli	r17,r8,31
1000cf34:	300cd07a 	srli	r6,r6,1
1000cf38:	4010d07a 	srli	r8,r8,1
1000cf3c:	1021883a 	mov	r16,r2
1000cf40:	89a2b03a 	or	r17,r17,r6
1000cf44:	003f1f06 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000cf48:	0081ffc4 	movi	r2,2047
1000cf4c:	80bf481e 	bne	r16,r2,1000cc70 <__alt_data_end+0xf800cc70>
1000cf50:	003f1c06 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000cf54:	843ff844 	addi	r16,r16,-31
1000cf58:	01000804 	movi	r4,32
1000cf5c:	1406d83a 	srl	r3,r2,r16
1000cf60:	41005026 	beq	r8,r4,1000d0a4 <__adddf3+0x55c>
1000cf64:	01001004 	movi	r4,64
1000cf68:	2211c83a 	sub	r8,r4,r8
1000cf6c:	1204983a 	sll	r2,r2,r8
1000cf70:	88a2b03a 	or	r17,r17,r2
1000cf74:	8822c03a 	cmpne	r17,r17,zero
1000cf78:	1c62b03a 	or	r17,r3,r17
1000cf7c:	0011883a 	mov	r8,zero
1000cf80:	0021883a 	mov	r16,zero
1000cf84:	003f7106 	br	1000cd4c <__alt_data_end+0xf800cd4c>
1000cf88:	193ff804 	addi	r4,r3,-32
1000cf8c:	00800804 	movi	r2,32
1000cf90:	4908d83a 	srl	r4,r9,r4
1000cf94:	18804526 	beq	r3,r2,1000d0ac <__adddf3+0x564>
1000cf98:	00801004 	movi	r2,64
1000cf9c:	10c5c83a 	sub	r2,r2,r3
1000cfa0:	4886983a 	sll	r3,r9,r2
1000cfa4:	198cb03a 	or	r6,r3,r6
1000cfa8:	300cc03a 	cmpne	r6,r6,zero
1000cfac:	218cb03a 	or	r6,r4,r6
1000cfb0:	0007883a 	mov	r3,zero
1000cfb4:	003f3b06 	br	1000cca4 <__alt_data_end+0xf800cca4>
1000cfb8:	80002a26 	beq	r16,zero,1000d064 <__adddf3+0x51c>
1000cfbc:	0101ffc4 	movi	r4,2047
1000cfc0:	11006826 	beq	r2,r4,1000d164 <__adddf3+0x61c>
1000cfc4:	00c7c83a 	sub	r3,zero,r3
1000cfc8:	42002034 	orhi	r8,r8,128
1000cfcc:	01000e04 	movi	r4,56
1000cfd0:	20c07c16 	blt	r4,r3,1000d1c4 <__adddf3+0x67c>
1000cfd4:	010007c4 	movi	r4,31
1000cfd8:	20c0da16 	blt	r4,r3,1000d344 <__adddf3+0x7fc>
1000cfdc:	01000804 	movi	r4,32
1000cfe0:	20c9c83a 	sub	r4,r4,r3
1000cfe4:	4114983a 	sll	r10,r8,r4
1000cfe8:	88cad83a 	srl	r5,r17,r3
1000cfec:	8908983a 	sll	r4,r17,r4
1000cff0:	40c6d83a 	srl	r3,r8,r3
1000cff4:	5162b03a 	or	r17,r10,r5
1000cff8:	2008c03a 	cmpne	r4,r4,zero
1000cffc:	8922b03a 	or	r17,r17,r4
1000d000:	3463c83a 	sub	r17,r6,r17
1000d004:	48c7c83a 	sub	r3,r9,r3
1000d008:	344d803a 	cmpltu	r6,r6,r17
1000d00c:	1991c83a 	sub	r8,r3,r6
1000d010:	1021883a 	mov	r16,r2
1000d014:	3825883a 	mov	r18,r7
1000d018:	003f2706 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000d01c:	24d0b03a 	or	r8,r4,r19
1000d020:	40001b1e 	bne	r8,zero,1000d090 <__adddf3+0x548>
1000d024:	0005883a 	mov	r2,zero
1000d028:	0007883a 	mov	r3,zero
1000d02c:	0021883a 	mov	r16,zero
1000d030:	003f4d06 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000d034:	008007c4 	movi	r2,31
1000d038:	11003c16 	blt	r2,r4,1000d12c <__adddf3+0x5e4>
1000d03c:	00800804 	movi	r2,32
1000d040:	1105c83a 	sub	r2,r2,r4
1000d044:	488e983a 	sll	r7,r9,r2
1000d048:	310ad83a 	srl	r5,r6,r4
1000d04c:	3084983a 	sll	r2,r6,r2
1000d050:	4912d83a 	srl	r9,r9,r4
1000d054:	394ab03a 	or	r5,r7,r5
1000d058:	1004c03a 	cmpne	r2,r2,zero
1000d05c:	288ab03a 	or	r5,r5,r2
1000d060:	003f5306 	br	1000cdb0 <__alt_data_end+0xf800cdb0>
1000d064:	4448b03a 	or	r4,r8,r17
1000d068:	20003e26 	beq	r4,zero,1000d164 <__adddf3+0x61c>
1000d06c:	00c6303a 	nor	r3,zero,r3
1000d070:	18003a1e 	bne	r3,zero,1000d15c <__adddf3+0x614>
1000d074:	3463c83a 	sub	r17,r6,r17
1000d078:	4a07c83a 	sub	r3,r9,r8
1000d07c:	344d803a 	cmpltu	r6,r6,r17
1000d080:	1991c83a 	sub	r8,r3,r6
1000d084:	1021883a 	mov	r16,r2
1000d088:	3825883a 	mov	r18,r7
1000d08c:	003f0a06 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000d090:	2023883a 	mov	r17,r4
1000d094:	003f0d06 	br	1000cccc <__alt_data_end+0xf800cccc>
1000d098:	0081ffc4 	movi	r2,2047
1000d09c:	80bf3f1e 	bne	r16,r2,1000cd9c <__alt_data_end+0xf800cd9c>
1000d0a0:	003ec806 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d0a4:	0005883a 	mov	r2,zero
1000d0a8:	003fb106 	br	1000cf70 <__alt_data_end+0xf800cf70>
1000d0ac:	0007883a 	mov	r3,zero
1000d0b0:	003fbc06 	br	1000cfa4 <__alt_data_end+0xf800cfa4>
1000d0b4:	4444b03a 	or	r2,r8,r17
1000d0b8:	8000871e 	bne	r16,zero,1000d2d8 <__adddf3+0x790>
1000d0bc:	1000ba26 	beq	r2,zero,1000d3a8 <__adddf3+0x860>
1000d0c0:	4984b03a 	or	r2,r9,r6
1000d0c4:	103ebf26 	beq	r2,zero,1000cbc4 <__alt_data_end+0xf800cbc4>
1000d0c8:	8985883a 	add	r2,r17,r6
1000d0cc:	4247883a 	add	r3,r8,r9
1000d0d0:	1451803a 	cmpltu	r8,r2,r17
1000d0d4:	40d1883a 	add	r8,r8,r3
1000d0d8:	40c0202c 	andhi	r3,r8,128
1000d0dc:	1023883a 	mov	r17,r2
1000d0e0:	183f1a26 	beq	r3,zero,1000cd4c <__alt_data_end+0xf800cd4c>
1000d0e4:	00bfe034 	movhi	r2,65408
1000d0e8:	10bfffc4 	addi	r2,r2,-1
1000d0ec:	2021883a 	mov	r16,r4
1000d0f0:	4090703a 	and	r8,r8,r2
1000d0f4:	003eb306 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d0f8:	4444b03a 	or	r2,r8,r17
1000d0fc:	8000291e 	bne	r16,zero,1000d1a4 <__adddf3+0x65c>
1000d100:	10004b1e 	bne	r2,zero,1000d230 <__adddf3+0x6e8>
1000d104:	4990b03a 	or	r8,r9,r6
1000d108:	40008b26 	beq	r8,zero,1000d338 <__adddf3+0x7f0>
1000d10c:	4811883a 	mov	r8,r9
1000d110:	3023883a 	mov	r17,r6
1000d114:	3825883a 	mov	r18,r7
1000d118:	003eaa06 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d11c:	1021883a 	mov	r16,r2
1000d120:	0011883a 	mov	r8,zero
1000d124:	0005883a 	mov	r2,zero
1000d128:	003f0f06 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000d12c:	217ff804 	addi	r5,r4,-32
1000d130:	00800804 	movi	r2,32
1000d134:	494ad83a 	srl	r5,r9,r5
1000d138:	20807d26 	beq	r4,r2,1000d330 <__adddf3+0x7e8>
1000d13c:	00801004 	movi	r2,64
1000d140:	1109c83a 	sub	r4,r2,r4
1000d144:	4912983a 	sll	r9,r9,r4
1000d148:	498cb03a 	or	r6,r9,r6
1000d14c:	300cc03a 	cmpne	r6,r6,zero
1000d150:	298ab03a 	or	r5,r5,r6
1000d154:	0013883a 	mov	r9,zero
1000d158:	003f1506 	br	1000cdb0 <__alt_data_end+0xf800cdb0>
1000d15c:	0101ffc4 	movi	r4,2047
1000d160:	113f9a1e 	bne	r2,r4,1000cfcc <__alt_data_end+0xf800cfcc>
1000d164:	4811883a 	mov	r8,r9
1000d168:	3023883a 	mov	r17,r6
1000d16c:	1021883a 	mov	r16,r2
1000d170:	3825883a 	mov	r18,r7
1000d174:	003e9306 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d178:	8000161e 	bne	r16,zero,1000d1d4 <__adddf3+0x68c>
1000d17c:	444ab03a 	or	r5,r8,r17
1000d180:	28005126 	beq	r5,zero,1000d2c8 <__adddf3+0x780>
1000d184:	0108303a 	nor	r4,zero,r4
1000d188:	20004d1e 	bne	r4,zero,1000d2c0 <__adddf3+0x778>
1000d18c:	89a3883a 	add	r17,r17,r6
1000d190:	4253883a 	add	r9,r8,r9
1000d194:	898d803a 	cmpltu	r6,r17,r6
1000d198:	3251883a 	add	r8,r6,r9
1000d19c:	1021883a 	mov	r16,r2
1000d1a0:	003f0806 	br	1000cdc4 <__alt_data_end+0xf800cdc4>
1000d1a4:	1000301e 	bne	r2,zero,1000d268 <__adddf3+0x720>
1000d1a8:	4984b03a 	or	r2,r9,r6
1000d1ac:	10007126 	beq	r2,zero,1000d374 <__adddf3+0x82c>
1000d1b0:	4811883a 	mov	r8,r9
1000d1b4:	3023883a 	mov	r17,r6
1000d1b8:	3825883a 	mov	r18,r7
1000d1bc:	0401ffc4 	movi	r16,2047
1000d1c0:	003e8006 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d1c4:	4462b03a 	or	r17,r8,r17
1000d1c8:	8822c03a 	cmpne	r17,r17,zero
1000d1cc:	0007883a 	mov	r3,zero
1000d1d0:	003f8b06 	br	1000d000 <__alt_data_end+0xf800d000>
1000d1d4:	0141ffc4 	movi	r5,2047
1000d1d8:	11403b26 	beq	r2,r5,1000d2c8 <__adddf3+0x780>
1000d1dc:	0109c83a 	sub	r4,zero,r4
1000d1e0:	42002034 	orhi	r8,r8,128
1000d1e4:	01400e04 	movi	r5,56
1000d1e8:	29006716 	blt	r5,r4,1000d388 <__adddf3+0x840>
1000d1ec:	014007c4 	movi	r5,31
1000d1f0:	29007016 	blt	r5,r4,1000d3b4 <__adddf3+0x86c>
1000d1f4:	01400804 	movi	r5,32
1000d1f8:	290bc83a 	sub	r5,r5,r4
1000d1fc:	4154983a 	sll	r10,r8,r5
1000d200:	890ed83a 	srl	r7,r17,r4
1000d204:	894a983a 	sll	r5,r17,r5
1000d208:	4108d83a 	srl	r4,r8,r4
1000d20c:	51e2b03a 	or	r17,r10,r7
1000d210:	280ac03a 	cmpne	r5,r5,zero
1000d214:	8962b03a 	or	r17,r17,r5
1000d218:	89a3883a 	add	r17,r17,r6
1000d21c:	2253883a 	add	r9,r4,r9
1000d220:	898d803a 	cmpltu	r6,r17,r6
1000d224:	3251883a 	add	r8,r6,r9
1000d228:	1021883a 	mov	r16,r2
1000d22c:	003ee506 	br	1000cdc4 <__alt_data_end+0xf800cdc4>
1000d230:	4984b03a 	or	r2,r9,r6
1000d234:	103e6326 	beq	r2,zero,1000cbc4 <__alt_data_end+0xf800cbc4>
1000d238:	8987c83a 	sub	r3,r17,r6
1000d23c:	88c9803a 	cmpltu	r4,r17,r3
1000d240:	4245c83a 	sub	r2,r8,r9
1000d244:	1105c83a 	sub	r2,r2,r4
1000d248:	1100202c 	andhi	r4,r2,128
1000d24c:	203ebb26 	beq	r4,zero,1000cd3c <__alt_data_end+0xf800cd3c>
1000d250:	3463c83a 	sub	r17,r6,r17
1000d254:	4a07c83a 	sub	r3,r9,r8
1000d258:	344d803a 	cmpltu	r6,r6,r17
1000d25c:	1991c83a 	sub	r8,r3,r6
1000d260:	3825883a 	mov	r18,r7
1000d264:	003e5706 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d268:	4984b03a 	or	r2,r9,r6
1000d26c:	10002e26 	beq	r2,zero,1000d328 <__adddf3+0x7e0>
1000d270:	4004d0fa 	srli	r2,r8,3
1000d274:	8822d0fa 	srli	r17,r17,3
1000d278:	4010977a 	slli	r8,r8,29
1000d27c:	10c0022c 	andhi	r3,r2,8
1000d280:	4462b03a 	or	r17,r8,r17
1000d284:	18000826 	beq	r3,zero,1000d2a8 <__adddf3+0x760>
1000d288:	4808d0fa 	srli	r4,r9,3
1000d28c:	20c0022c 	andhi	r3,r4,8
1000d290:	1800051e 	bne	r3,zero,1000d2a8 <__adddf3+0x760>
1000d294:	300cd0fa 	srli	r6,r6,3
1000d298:	4806977a 	slli	r3,r9,29
1000d29c:	2005883a 	mov	r2,r4
1000d2a0:	3825883a 	mov	r18,r7
1000d2a4:	19a2b03a 	or	r17,r3,r6
1000d2a8:	8810d77a 	srli	r8,r17,29
1000d2ac:	100490fa 	slli	r2,r2,3
1000d2b0:	882290fa 	slli	r17,r17,3
1000d2b4:	0401ffc4 	movi	r16,2047
1000d2b8:	4090b03a 	or	r8,r8,r2
1000d2bc:	003e4106 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d2c0:	0141ffc4 	movi	r5,2047
1000d2c4:	117fc71e 	bne	r2,r5,1000d1e4 <__alt_data_end+0xf800d1e4>
1000d2c8:	4811883a 	mov	r8,r9
1000d2cc:	3023883a 	mov	r17,r6
1000d2d0:	1021883a 	mov	r16,r2
1000d2d4:	003e3b06 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d2d8:	10002f26 	beq	r2,zero,1000d398 <__adddf3+0x850>
1000d2dc:	4984b03a 	or	r2,r9,r6
1000d2e0:	10001126 	beq	r2,zero,1000d328 <__adddf3+0x7e0>
1000d2e4:	4004d0fa 	srli	r2,r8,3
1000d2e8:	8822d0fa 	srli	r17,r17,3
1000d2ec:	4010977a 	slli	r8,r8,29
1000d2f0:	10c0022c 	andhi	r3,r2,8
1000d2f4:	4462b03a 	or	r17,r8,r17
1000d2f8:	183feb26 	beq	r3,zero,1000d2a8 <__alt_data_end+0xf800d2a8>
1000d2fc:	4808d0fa 	srli	r4,r9,3
1000d300:	20c0022c 	andhi	r3,r4,8
1000d304:	183fe81e 	bne	r3,zero,1000d2a8 <__alt_data_end+0xf800d2a8>
1000d308:	300cd0fa 	srli	r6,r6,3
1000d30c:	4806977a 	slli	r3,r9,29
1000d310:	2005883a 	mov	r2,r4
1000d314:	19a2b03a 	or	r17,r3,r6
1000d318:	003fe306 	br	1000d2a8 <__alt_data_end+0xf800d2a8>
1000d31c:	0011883a 	mov	r8,zero
1000d320:	0005883a 	mov	r2,zero
1000d324:	003e3f06 	br	1000cc24 <__alt_data_end+0xf800cc24>
1000d328:	0401ffc4 	movi	r16,2047
1000d32c:	003e2506 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d330:	0013883a 	mov	r9,zero
1000d334:	003f8406 	br	1000d148 <__alt_data_end+0xf800d148>
1000d338:	0005883a 	mov	r2,zero
1000d33c:	0007883a 	mov	r3,zero
1000d340:	003e8906 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000d344:	197ff804 	addi	r5,r3,-32
1000d348:	01000804 	movi	r4,32
1000d34c:	414ad83a 	srl	r5,r8,r5
1000d350:	19002426 	beq	r3,r4,1000d3e4 <__adddf3+0x89c>
1000d354:	01001004 	movi	r4,64
1000d358:	20c7c83a 	sub	r3,r4,r3
1000d35c:	40c6983a 	sll	r3,r8,r3
1000d360:	1c46b03a 	or	r3,r3,r17
1000d364:	1806c03a 	cmpne	r3,r3,zero
1000d368:	28e2b03a 	or	r17,r5,r3
1000d36c:	0007883a 	mov	r3,zero
1000d370:	003f2306 	br	1000d000 <__alt_data_end+0xf800d000>
1000d374:	0007883a 	mov	r3,zero
1000d378:	5811883a 	mov	r8,r11
1000d37c:	00bfffc4 	movi	r2,-1
1000d380:	0401ffc4 	movi	r16,2047
1000d384:	003e7806 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000d388:	4462b03a 	or	r17,r8,r17
1000d38c:	8822c03a 	cmpne	r17,r17,zero
1000d390:	0009883a 	mov	r4,zero
1000d394:	003fa006 	br	1000d218 <__alt_data_end+0xf800d218>
1000d398:	4811883a 	mov	r8,r9
1000d39c:	3023883a 	mov	r17,r6
1000d3a0:	0401ffc4 	movi	r16,2047
1000d3a4:	003e0706 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d3a8:	4811883a 	mov	r8,r9
1000d3ac:	3023883a 	mov	r17,r6
1000d3b0:	003e0406 	br	1000cbc4 <__alt_data_end+0xf800cbc4>
1000d3b4:	21fff804 	addi	r7,r4,-32
1000d3b8:	01400804 	movi	r5,32
1000d3bc:	41ced83a 	srl	r7,r8,r7
1000d3c0:	21400a26 	beq	r4,r5,1000d3ec <__adddf3+0x8a4>
1000d3c4:	01401004 	movi	r5,64
1000d3c8:	2909c83a 	sub	r4,r5,r4
1000d3cc:	4108983a 	sll	r4,r8,r4
1000d3d0:	2448b03a 	or	r4,r4,r17
1000d3d4:	2008c03a 	cmpne	r4,r4,zero
1000d3d8:	3922b03a 	or	r17,r7,r4
1000d3dc:	0009883a 	mov	r4,zero
1000d3e0:	003f8d06 	br	1000d218 <__alt_data_end+0xf800d218>
1000d3e4:	0007883a 	mov	r3,zero
1000d3e8:	003fdd06 	br	1000d360 <__alt_data_end+0xf800d360>
1000d3ec:	0009883a 	mov	r4,zero
1000d3f0:	003ff706 	br	1000d3d0 <__alt_data_end+0xf800d3d0>

1000d3f4 <__divdf3>:
1000d3f4:	defff004 	addi	sp,sp,-64
1000d3f8:	dc800815 	stw	r18,32(sp)
1000d3fc:	2824d53a 	srli	r18,r5,20
1000d400:	dd800c15 	stw	r22,48(sp)
1000d404:	282cd7fa 	srli	r22,r5,31
1000d408:	dc000615 	stw	r16,24(sp)
1000d40c:	04000434 	movhi	r16,16
1000d410:	843fffc4 	addi	r16,r16,-1
1000d414:	dfc00f15 	stw	ra,60(sp)
1000d418:	df000e15 	stw	fp,56(sp)
1000d41c:	ddc00d15 	stw	r23,52(sp)
1000d420:	dd400b15 	stw	r21,44(sp)
1000d424:	dd000a15 	stw	r20,40(sp)
1000d428:	dcc00915 	stw	r19,36(sp)
1000d42c:	dc400715 	stw	r17,28(sp)
1000d430:	9481ffcc 	andi	r18,r18,2047
1000d434:	2c20703a 	and	r16,r5,r16
1000d438:	b2003fcc 	andi	r8,r22,255
1000d43c:	90006126 	beq	r18,zero,1000d5c4 <__divdf3+0x1d0>
1000d440:	0081ffc4 	movi	r2,2047
1000d444:	202b883a 	mov	r21,r4
1000d448:	90803726 	beq	r18,r2,1000d528 <__divdf3+0x134>
1000d44c:	80800434 	orhi	r2,r16,16
1000d450:	100490fa 	slli	r2,r2,3
1000d454:	2020d77a 	srli	r16,r4,29
1000d458:	202a90fa 	slli	r21,r4,3
1000d45c:	94bf0044 	addi	r18,r18,-1023
1000d460:	80a0b03a 	or	r16,r16,r2
1000d464:	0013883a 	mov	r9,zero
1000d468:	000b883a 	mov	r5,zero
1000d46c:	3806d53a 	srli	r3,r7,20
1000d470:	382ed7fa 	srli	r23,r7,31
1000d474:	04400434 	movhi	r17,16
1000d478:	8c7fffc4 	addi	r17,r17,-1
1000d47c:	18c1ffcc 	andi	r3,r3,2047
1000d480:	3029883a 	mov	r20,r6
1000d484:	3c62703a 	and	r17,r7,r17
1000d488:	bf003fcc 	andi	fp,r23,255
1000d48c:	18006e26 	beq	r3,zero,1000d648 <__divdf3+0x254>
1000d490:	0081ffc4 	movi	r2,2047
1000d494:	18806626 	beq	r3,r2,1000d630 <__divdf3+0x23c>
1000d498:	88800434 	orhi	r2,r17,16
1000d49c:	100490fa 	slli	r2,r2,3
1000d4a0:	3022d77a 	srli	r17,r6,29
1000d4a4:	302890fa 	slli	r20,r6,3
1000d4a8:	18ff0044 	addi	r3,r3,-1023
1000d4ac:	88a2b03a 	or	r17,r17,r2
1000d4b0:	000f883a 	mov	r7,zero
1000d4b4:	b5e6f03a 	xor	r19,r22,r23
1000d4b8:	3a4cb03a 	or	r6,r7,r9
1000d4bc:	008003c4 	movi	r2,15
1000d4c0:	9809883a 	mov	r4,r19
1000d4c4:	90c7c83a 	sub	r3,r18,r3
1000d4c8:	9cc03fcc 	andi	r19,r19,255
1000d4cc:	11809636 	bltu	r2,r6,1000d728 <__divdf3+0x334>
1000d4d0:	300c90ba 	slli	r6,r6,2
1000d4d4:	00840074 	movhi	r2,4097
1000d4d8:	10b53a04 	addi	r2,r2,-11032
1000d4dc:	308d883a 	add	r6,r6,r2
1000d4e0:	30800017 	ldw	r2,0(r6)
1000d4e4:	1000683a 	jmp	r2
1000d4e8:	1000d728 	cmpgeui	zero,r2,860
1000d4ec:	1000d560 	cmpeqi	zero,r2,853
1000d4f0:	1000d718 	cmpnei	zero,r2,860
1000d4f4:	1000d554 	ori	zero,r2,853
1000d4f8:	1000d718 	cmpnei	zero,r2,860
1000d4fc:	1000d6ec 	andhi	zero,r2,859
1000d500:	1000d718 	cmpnei	zero,r2,860
1000d504:	1000d554 	ori	zero,r2,853
1000d508:	1000d560 	cmpeqi	zero,r2,853
1000d50c:	1000d560 	cmpeqi	zero,r2,853
1000d510:	1000d6ec 	andhi	zero,r2,859
1000d514:	1000d554 	ori	zero,r2,853
1000d518:	1000d544 	addi	zero,r2,853
1000d51c:	1000d544 	addi	zero,r2,853
1000d520:	1000d544 	addi	zero,r2,853
1000d524:	1000dab0 	cmpltui	zero,r2,874
1000d528:	2404b03a 	or	r2,r4,r16
1000d52c:	10006c1e 	bne	r2,zero,1000d6e0 <__divdf3+0x2ec>
1000d530:	02400204 	movi	r9,8
1000d534:	0021883a 	mov	r16,zero
1000d538:	002b883a 	mov	r21,zero
1000d53c:	01400084 	movi	r5,2
1000d540:	003fca06 	br	1000d46c <__alt_data_end+0xf800d46c>
1000d544:	8023883a 	mov	r17,r16
1000d548:	a829883a 	mov	r20,r21
1000d54c:	4039883a 	mov	fp,r8
1000d550:	280f883a 	mov	r7,r5
1000d554:	00800084 	movi	r2,2
1000d558:	3881601e 	bne	r7,r2,1000dadc <__divdf3+0x6e8>
1000d55c:	e027883a 	mov	r19,fp
1000d560:	9900004c 	andi	r4,r19,1
1000d564:	0081ffc4 	movi	r2,2047
1000d568:	0021883a 	mov	r16,zero
1000d56c:	002b883a 	mov	r21,zero
1000d570:	1004953a 	slli	r2,r2,20
1000d574:	20c03fcc 	andi	r3,r4,255
1000d578:	01400434 	movhi	r5,16
1000d57c:	297fffc4 	addi	r5,r5,-1
1000d580:	180697fa 	slli	r3,r3,31
1000d584:	8160703a 	and	r16,r16,r5
1000d588:	80a0b03a 	or	r16,r16,r2
1000d58c:	80c6b03a 	or	r3,r16,r3
1000d590:	a805883a 	mov	r2,r21
1000d594:	dfc00f17 	ldw	ra,60(sp)
1000d598:	df000e17 	ldw	fp,56(sp)
1000d59c:	ddc00d17 	ldw	r23,52(sp)
1000d5a0:	dd800c17 	ldw	r22,48(sp)
1000d5a4:	dd400b17 	ldw	r21,44(sp)
1000d5a8:	dd000a17 	ldw	r20,40(sp)
1000d5ac:	dcc00917 	ldw	r19,36(sp)
1000d5b0:	dc800817 	ldw	r18,32(sp)
1000d5b4:	dc400717 	ldw	r17,28(sp)
1000d5b8:	dc000617 	ldw	r16,24(sp)
1000d5bc:	dec01004 	addi	sp,sp,64
1000d5c0:	f800283a 	ret
1000d5c4:	2404b03a 	or	r2,r4,r16
1000d5c8:	2023883a 	mov	r17,r4
1000d5cc:	10003f26 	beq	r2,zero,1000d6cc <__divdf3+0x2d8>
1000d5d0:	80015e26 	beq	r16,zero,1000db4c <__divdf3+0x758>
1000d5d4:	8009883a 	mov	r4,r16
1000d5d8:	d9800215 	stw	r6,8(sp)
1000d5dc:	d9c00515 	stw	r7,20(sp)
1000d5e0:	da000415 	stw	r8,16(sp)
1000d5e4:	000f3880 	call	1000f388 <__clzsi2>
1000d5e8:	d9800217 	ldw	r6,8(sp)
1000d5ec:	d9c00517 	ldw	r7,20(sp)
1000d5f0:	da000417 	ldw	r8,16(sp)
1000d5f4:	113ffd44 	addi	r4,r2,-11
1000d5f8:	00c00704 	movi	r3,28
1000d5fc:	19014f16 	blt	r3,r4,1000db3c <__divdf3+0x748>
1000d600:	00c00744 	movi	r3,29
1000d604:	157ffe04 	addi	r21,r2,-8
1000d608:	1907c83a 	sub	r3,r3,r4
1000d60c:	8560983a 	sll	r16,r16,r21
1000d610:	88c6d83a 	srl	r3,r17,r3
1000d614:	8d6a983a 	sll	r21,r17,r21
1000d618:	1c20b03a 	or	r16,r3,r16
1000d61c:	1080fcc4 	addi	r2,r2,1011
1000d620:	00a5c83a 	sub	r18,zero,r2
1000d624:	0013883a 	mov	r9,zero
1000d628:	000b883a 	mov	r5,zero
1000d62c:	003f8f06 	br	1000d46c <__alt_data_end+0xf800d46c>
1000d630:	3444b03a 	or	r2,r6,r17
1000d634:	1000231e 	bne	r2,zero,1000d6c4 <__divdf3+0x2d0>
1000d638:	0023883a 	mov	r17,zero
1000d63c:	0029883a 	mov	r20,zero
1000d640:	01c00084 	movi	r7,2
1000d644:	003f9b06 	br	1000d4b4 <__alt_data_end+0xf800d4b4>
1000d648:	3444b03a 	or	r2,r6,r17
1000d64c:	10001926 	beq	r2,zero,1000d6b4 <__divdf3+0x2c0>
1000d650:	88014b26 	beq	r17,zero,1000db80 <__divdf3+0x78c>
1000d654:	8809883a 	mov	r4,r17
1000d658:	d9400115 	stw	r5,4(sp)
1000d65c:	d9800215 	stw	r6,8(sp)
1000d660:	da000415 	stw	r8,16(sp)
1000d664:	da400315 	stw	r9,12(sp)
1000d668:	000f3880 	call	1000f388 <__clzsi2>
1000d66c:	d9400117 	ldw	r5,4(sp)
1000d670:	d9800217 	ldw	r6,8(sp)
1000d674:	da000417 	ldw	r8,16(sp)
1000d678:	da400317 	ldw	r9,12(sp)
1000d67c:	113ffd44 	addi	r4,r2,-11
1000d680:	00c00704 	movi	r3,28
1000d684:	19013a16 	blt	r3,r4,1000db70 <__divdf3+0x77c>
1000d688:	00c00744 	movi	r3,29
1000d68c:	153ffe04 	addi	r20,r2,-8
1000d690:	1907c83a 	sub	r3,r3,r4
1000d694:	8d22983a 	sll	r17,r17,r20
1000d698:	30c6d83a 	srl	r3,r6,r3
1000d69c:	3528983a 	sll	r20,r6,r20
1000d6a0:	1c62b03a 	or	r17,r3,r17
1000d6a4:	1080fcc4 	addi	r2,r2,1011
1000d6a8:	0087c83a 	sub	r3,zero,r2
1000d6ac:	000f883a 	mov	r7,zero
1000d6b0:	003f8006 	br	1000d4b4 <__alt_data_end+0xf800d4b4>
1000d6b4:	0023883a 	mov	r17,zero
1000d6b8:	0029883a 	mov	r20,zero
1000d6bc:	01c00044 	movi	r7,1
1000d6c0:	003f7c06 	br	1000d4b4 <__alt_data_end+0xf800d4b4>
1000d6c4:	01c000c4 	movi	r7,3
1000d6c8:	003f7a06 	br	1000d4b4 <__alt_data_end+0xf800d4b4>
1000d6cc:	02400104 	movi	r9,4
1000d6d0:	0021883a 	mov	r16,zero
1000d6d4:	002b883a 	mov	r21,zero
1000d6d8:	01400044 	movi	r5,1
1000d6dc:	003f6306 	br	1000d46c <__alt_data_end+0xf800d46c>
1000d6e0:	02400304 	movi	r9,12
1000d6e4:	014000c4 	movi	r5,3
1000d6e8:	003f6006 	br	1000d46c <__alt_data_end+0xf800d46c>
1000d6ec:	04000434 	movhi	r16,16
1000d6f0:	0009883a 	mov	r4,zero
1000d6f4:	843fffc4 	addi	r16,r16,-1
1000d6f8:	057fffc4 	movi	r21,-1
1000d6fc:	0081ffc4 	movi	r2,2047
1000d700:	003f9b06 	br	1000d570 <__alt_data_end+0xf800d570>
1000d704:	00c00044 	movi	r3,1
1000d708:	1887c83a 	sub	r3,r3,r2
1000d70c:	01000e04 	movi	r4,56
1000d710:	20c1530e 	bge	r4,r3,1000dc60 <__divdf3+0x86c>
1000d714:	9900004c 	andi	r4,r19,1
1000d718:	0005883a 	mov	r2,zero
1000d71c:	0021883a 	mov	r16,zero
1000d720:	002b883a 	mov	r21,zero
1000d724:	003f9206 	br	1000d570 <__alt_data_end+0xf800d570>
1000d728:	8c012e36 	bltu	r17,r16,1000dbe4 <__divdf3+0x7f0>
1000d72c:	84412c26 	beq	r16,r17,1000dbe0 <__divdf3+0x7ec>
1000d730:	a82f883a 	mov	r23,r21
1000d734:	18ffffc4 	addi	r3,r3,-1
1000d738:	002b883a 	mov	r21,zero
1000d73c:	a004d63a 	srli	r2,r20,24
1000d740:	8822923a 	slli	r17,r17,8
1000d744:	a028923a 	slli	r20,r20,8
1000d748:	8009883a 	mov	r4,r16
1000d74c:	88acb03a 	or	r22,r17,r2
1000d750:	dd000015 	stw	r20,0(sp)
1000d754:	b028d43a 	srli	r20,r22,16
1000d758:	d8c00215 	stw	r3,8(sp)
1000d75c:	b4bfffcc 	andi	r18,r22,65535
1000d760:	a00b883a 	mov	r5,r20
1000d764:	000ca640 	call	1000ca64 <__udivsi3>
1000d768:	100b883a 	mov	r5,r2
1000d76c:	9009883a 	mov	r4,r18
1000d770:	1023883a 	mov	r17,r2
1000d774:	000cb200 	call	1000cb20 <__mulsi3>
1000d778:	8009883a 	mov	r4,r16
1000d77c:	a00b883a 	mov	r5,r20
1000d780:	1039883a 	mov	fp,r2
1000d784:	000cac80 	call	1000cac8 <__umodsi3>
1000d788:	1004943a 	slli	r2,r2,16
1000d78c:	b808d43a 	srli	r4,r23,16
1000d790:	d8c00217 	ldw	r3,8(sp)
1000d794:	2084b03a 	or	r2,r4,r2
1000d798:	1700062e 	bgeu	r2,fp,1000d7b4 <__divdf3+0x3c0>
1000d79c:	1585883a 	add	r2,r2,r22
1000d7a0:	893fffc4 	addi	r4,r17,-1
1000d7a4:	15811d36 	bltu	r2,r22,1000dc1c <__divdf3+0x828>
1000d7a8:	17011c2e 	bgeu	r2,fp,1000dc1c <__divdf3+0x828>
1000d7ac:	8c7fff84 	addi	r17,r17,-2
1000d7b0:	1585883a 	add	r2,r2,r22
1000d7b4:	1739c83a 	sub	fp,r2,fp
1000d7b8:	a00b883a 	mov	r5,r20
1000d7bc:	e009883a 	mov	r4,fp
1000d7c0:	d8c00215 	stw	r3,8(sp)
1000d7c4:	000ca640 	call	1000ca64 <__udivsi3>
1000d7c8:	100b883a 	mov	r5,r2
1000d7cc:	9009883a 	mov	r4,r18
1000d7d0:	1021883a 	mov	r16,r2
1000d7d4:	000cb200 	call	1000cb20 <__mulsi3>
1000d7d8:	a00b883a 	mov	r5,r20
1000d7dc:	e009883a 	mov	r4,fp
1000d7e0:	d8800415 	stw	r2,16(sp)
1000d7e4:	000cac80 	call	1000cac8 <__umodsi3>
1000d7e8:	1004943a 	slli	r2,r2,16
1000d7ec:	da000417 	ldw	r8,16(sp)
1000d7f0:	bdffffcc 	andi	r23,r23,65535
1000d7f4:	b884b03a 	or	r2,r23,r2
1000d7f8:	d8c00217 	ldw	r3,8(sp)
1000d7fc:	1200062e 	bgeu	r2,r8,1000d818 <__divdf3+0x424>
1000d800:	1585883a 	add	r2,r2,r22
1000d804:	813fffc4 	addi	r4,r16,-1
1000d808:	15810236 	bltu	r2,r22,1000dc14 <__divdf3+0x820>
1000d80c:	1201012e 	bgeu	r2,r8,1000dc14 <__divdf3+0x820>
1000d810:	843fff84 	addi	r16,r16,-2
1000d814:	1585883a 	add	r2,r2,r22
1000d818:	8822943a 	slli	r17,r17,16
1000d81c:	d9800017 	ldw	r6,0(sp)
1000d820:	1211c83a 	sub	r8,r2,r8
1000d824:	8c22b03a 	or	r17,r17,r16
1000d828:	373fffcc 	andi	fp,r6,65535
1000d82c:	8abfffcc 	andi	r10,r17,65535
1000d830:	8820d43a 	srli	r16,r17,16
1000d834:	5009883a 	mov	r4,r10
1000d838:	e00b883a 	mov	r5,fp
1000d83c:	302ed43a 	srli	r23,r6,16
1000d840:	d8c00215 	stw	r3,8(sp)
1000d844:	da000415 	stw	r8,16(sp)
1000d848:	da800115 	stw	r10,4(sp)
1000d84c:	000cb200 	call	1000cb20 <__mulsi3>
1000d850:	800b883a 	mov	r5,r16
1000d854:	e009883a 	mov	r4,fp
1000d858:	d8800515 	stw	r2,20(sp)
1000d85c:	000cb200 	call	1000cb20 <__mulsi3>
1000d860:	8009883a 	mov	r4,r16
1000d864:	b80b883a 	mov	r5,r23
1000d868:	d8800315 	stw	r2,12(sp)
1000d86c:	000cb200 	call	1000cb20 <__mulsi3>
1000d870:	da800117 	ldw	r10,4(sp)
1000d874:	b80b883a 	mov	r5,r23
1000d878:	1021883a 	mov	r16,r2
1000d87c:	5009883a 	mov	r4,r10
1000d880:	000cb200 	call	1000cb20 <__mulsi3>
1000d884:	d9c00517 	ldw	r7,20(sp)
1000d888:	da400317 	ldw	r9,12(sp)
1000d88c:	d8c00217 	ldw	r3,8(sp)
1000d890:	3808d43a 	srli	r4,r7,16
1000d894:	1245883a 	add	r2,r2,r9
1000d898:	da000417 	ldw	r8,16(sp)
1000d89c:	2085883a 	add	r2,r4,r2
1000d8a0:	1240022e 	bgeu	r2,r9,1000d8ac <__divdf3+0x4b8>
1000d8a4:	01000074 	movhi	r4,1
1000d8a8:	8121883a 	add	r16,r16,r4
1000d8ac:	1008d43a 	srli	r4,r2,16
1000d8b0:	1004943a 	slli	r2,r2,16
1000d8b4:	39ffffcc 	andi	r7,r7,65535
1000d8b8:	2409883a 	add	r4,r4,r16
1000d8bc:	11c5883a 	add	r2,r2,r7
1000d8c0:	4100bb36 	bltu	r8,r4,1000dbb0 <__divdf3+0x7bc>
1000d8c4:	4100d726 	beq	r8,r4,1000dc24 <__divdf3+0x830>
1000d8c8:	4109c83a 	sub	r4,r8,r4
1000d8cc:	a8a1c83a 	sub	r16,r21,r2
1000d8d0:	ac2b803a 	cmpltu	r21,r21,r16
1000d8d4:	256bc83a 	sub	r21,r4,r21
1000d8d8:	b540d926 	beq	r22,r21,1000dc40 <__divdf3+0x84c>
1000d8dc:	a00b883a 	mov	r5,r20
1000d8e0:	a809883a 	mov	r4,r21
1000d8e4:	d8c00215 	stw	r3,8(sp)
1000d8e8:	000ca640 	call	1000ca64 <__udivsi3>
1000d8ec:	100b883a 	mov	r5,r2
1000d8f0:	9009883a 	mov	r4,r18
1000d8f4:	d8800515 	stw	r2,20(sp)
1000d8f8:	000cb200 	call	1000cb20 <__mulsi3>
1000d8fc:	a809883a 	mov	r4,r21
1000d900:	a00b883a 	mov	r5,r20
1000d904:	d8800415 	stw	r2,16(sp)
1000d908:	000cac80 	call	1000cac8 <__umodsi3>
1000d90c:	1004943a 	slli	r2,r2,16
1000d910:	8008d43a 	srli	r4,r16,16
1000d914:	da000417 	ldw	r8,16(sp)
1000d918:	d8c00217 	ldw	r3,8(sp)
1000d91c:	2084b03a 	or	r2,r4,r2
1000d920:	d9c00517 	ldw	r7,20(sp)
1000d924:	1200062e 	bgeu	r2,r8,1000d940 <__divdf3+0x54c>
1000d928:	1585883a 	add	r2,r2,r22
1000d92c:	393fffc4 	addi	r4,r7,-1
1000d930:	1580c536 	bltu	r2,r22,1000dc48 <__divdf3+0x854>
1000d934:	1200c42e 	bgeu	r2,r8,1000dc48 <__divdf3+0x854>
1000d938:	39ffff84 	addi	r7,r7,-2
1000d93c:	1585883a 	add	r2,r2,r22
1000d940:	122bc83a 	sub	r21,r2,r8
1000d944:	a00b883a 	mov	r5,r20
1000d948:	a809883a 	mov	r4,r21
1000d94c:	d8c00215 	stw	r3,8(sp)
1000d950:	d9c00515 	stw	r7,20(sp)
1000d954:	000ca640 	call	1000ca64 <__udivsi3>
1000d958:	9009883a 	mov	r4,r18
1000d95c:	100b883a 	mov	r5,r2
1000d960:	d8800415 	stw	r2,16(sp)
1000d964:	000cb200 	call	1000cb20 <__mulsi3>
1000d968:	a809883a 	mov	r4,r21
1000d96c:	a00b883a 	mov	r5,r20
1000d970:	1025883a 	mov	r18,r2
1000d974:	000cac80 	call	1000cac8 <__umodsi3>
1000d978:	1004943a 	slli	r2,r2,16
1000d97c:	813fffcc 	andi	r4,r16,65535
1000d980:	d8c00217 	ldw	r3,8(sp)
1000d984:	20a0b03a 	or	r16,r4,r2
1000d988:	d9c00517 	ldw	r7,20(sp)
1000d98c:	da000417 	ldw	r8,16(sp)
1000d990:	8480062e 	bgeu	r16,r18,1000d9ac <__divdf3+0x5b8>
1000d994:	85a1883a 	add	r16,r16,r22
1000d998:	40bfffc4 	addi	r2,r8,-1
1000d99c:	8580ac36 	bltu	r16,r22,1000dc50 <__divdf3+0x85c>
1000d9a0:	8480ab2e 	bgeu	r16,r18,1000dc50 <__divdf3+0x85c>
1000d9a4:	423fff84 	addi	r8,r8,-2
1000d9a8:	85a1883a 	add	r16,r16,r22
1000d9ac:	3804943a 	slli	r2,r7,16
1000d9b0:	84a1c83a 	sub	r16,r16,r18
1000d9b4:	e009883a 	mov	r4,fp
1000d9b8:	1228b03a 	or	r20,r2,r8
1000d9bc:	a1ffffcc 	andi	r7,r20,65535
1000d9c0:	a024d43a 	srli	r18,r20,16
1000d9c4:	380b883a 	mov	r5,r7
1000d9c8:	d8c00215 	stw	r3,8(sp)
1000d9cc:	d9c00515 	stw	r7,20(sp)
1000d9d0:	000cb200 	call	1000cb20 <__mulsi3>
1000d9d4:	900b883a 	mov	r5,r18
1000d9d8:	e009883a 	mov	r4,fp
1000d9dc:	102b883a 	mov	r21,r2
1000d9e0:	000cb200 	call	1000cb20 <__mulsi3>
1000d9e4:	900b883a 	mov	r5,r18
1000d9e8:	b809883a 	mov	r4,r23
1000d9ec:	1039883a 	mov	fp,r2
1000d9f0:	000cb200 	call	1000cb20 <__mulsi3>
1000d9f4:	d9c00517 	ldw	r7,20(sp)
1000d9f8:	b80b883a 	mov	r5,r23
1000d9fc:	1025883a 	mov	r18,r2
1000da00:	3809883a 	mov	r4,r7
1000da04:	000cb200 	call	1000cb20 <__mulsi3>
1000da08:	a808d43a 	srli	r4,r21,16
1000da0c:	1705883a 	add	r2,r2,fp
1000da10:	d8c00217 	ldw	r3,8(sp)
1000da14:	2085883a 	add	r2,r4,r2
1000da18:	1700022e 	bgeu	r2,fp,1000da24 <__divdf3+0x630>
1000da1c:	01000074 	movhi	r4,1
1000da20:	9125883a 	add	r18,r18,r4
1000da24:	1008d43a 	srli	r4,r2,16
1000da28:	1004943a 	slli	r2,r2,16
1000da2c:	ad7fffcc 	andi	r21,r21,65535
1000da30:	2489883a 	add	r4,r4,r18
1000da34:	1545883a 	add	r2,r2,r21
1000da38:	81003836 	bltu	r16,r4,1000db1c <__divdf3+0x728>
1000da3c:	81003626 	beq	r16,r4,1000db18 <__divdf3+0x724>
1000da40:	a5000054 	ori	r20,r20,1
1000da44:	1880ffc4 	addi	r2,r3,1023
1000da48:	00bf2e0e 	bge	zero,r2,1000d704 <__alt_data_end+0xf800d704>
1000da4c:	a10001cc 	andi	r4,r20,7
1000da50:	20000726 	beq	r4,zero,1000da70 <__divdf3+0x67c>
1000da54:	a10003cc 	andi	r4,r20,15
1000da58:	01400104 	movi	r5,4
1000da5c:	21400426 	beq	r4,r5,1000da70 <__divdf3+0x67c>
1000da60:	a149883a 	add	r4,r20,r5
1000da64:	2529803a 	cmpltu	r20,r4,r20
1000da68:	8d23883a 	add	r17,r17,r20
1000da6c:	2029883a 	mov	r20,r4
1000da70:	8900402c 	andhi	r4,r17,256
1000da74:	20000426 	beq	r4,zero,1000da88 <__divdf3+0x694>
1000da78:	18810004 	addi	r2,r3,1024
1000da7c:	00ffc034 	movhi	r3,65280
1000da80:	18ffffc4 	addi	r3,r3,-1
1000da84:	88e2703a 	and	r17,r17,r3
1000da88:	00c1ff84 	movi	r3,2046
1000da8c:	18beb416 	blt	r3,r2,1000d560 <__alt_data_end+0xf800d560>
1000da90:	a028d0fa 	srli	r20,r20,3
1000da94:	882a977a 	slli	r21,r17,29
1000da98:	8820927a 	slli	r16,r17,9
1000da9c:	1081ffcc 	andi	r2,r2,2047
1000daa0:	ad2ab03a 	or	r21,r21,r20
1000daa4:	8020d33a 	srli	r16,r16,12
1000daa8:	9900004c 	andi	r4,r19,1
1000daac:	003eb006 	br	1000d570 <__alt_data_end+0xf800d570>
1000dab0:	8080022c 	andhi	r2,r16,8
1000dab4:	10001226 	beq	r2,zero,1000db00 <__divdf3+0x70c>
1000dab8:	8880022c 	andhi	r2,r17,8
1000dabc:	1000101e 	bne	r2,zero,1000db00 <__divdf3+0x70c>
1000dac0:	00800434 	movhi	r2,16
1000dac4:	8c000234 	orhi	r16,r17,8
1000dac8:	10bfffc4 	addi	r2,r2,-1
1000dacc:	b809883a 	mov	r4,r23
1000dad0:	80a0703a 	and	r16,r16,r2
1000dad4:	a02b883a 	mov	r21,r20
1000dad8:	003f0806 	br	1000d6fc <__alt_data_end+0xf800d6fc>
1000dadc:	008000c4 	movi	r2,3
1000dae0:	3880b126 	beq	r7,r2,1000dda8 <__divdf3+0x9b4>
1000dae4:	00800044 	movi	r2,1
1000dae8:	38805b1e 	bne	r7,r2,1000dc58 <__divdf3+0x864>
1000daec:	e009883a 	mov	r4,fp
1000daf0:	0005883a 	mov	r2,zero
1000daf4:	0021883a 	mov	r16,zero
1000daf8:	002b883a 	mov	r21,zero
1000dafc:	003e9c06 	br	1000d570 <__alt_data_end+0xf800d570>
1000db00:	00800434 	movhi	r2,16
1000db04:	84000234 	orhi	r16,r16,8
1000db08:	10bfffc4 	addi	r2,r2,-1
1000db0c:	b009883a 	mov	r4,r22
1000db10:	80a0703a 	and	r16,r16,r2
1000db14:	003ef906 	br	1000d6fc <__alt_data_end+0xf800d6fc>
1000db18:	103fca26 	beq	r2,zero,1000da44 <__alt_data_end+0xf800da44>
1000db1c:	b421883a 	add	r16,r22,r16
1000db20:	a17fffc4 	addi	r5,r20,-1
1000db24:	8580422e 	bgeu	r16,r22,1000dc30 <__divdf3+0x83c>
1000db28:	2829883a 	mov	r20,r5
1000db2c:	813fc41e 	bne	r16,r4,1000da40 <__alt_data_end+0xf800da40>
1000db30:	d9800017 	ldw	r6,0(sp)
1000db34:	30bfc21e 	bne	r6,r2,1000da40 <__alt_data_end+0xf800da40>
1000db38:	003fc206 	br	1000da44 <__alt_data_end+0xf800da44>
1000db3c:	143ff604 	addi	r16,r2,-40
1000db40:	8c20983a 	sll	r16,r17,r16
1000db44:	002b883a 	mov	r21,zero
1000db48:	003eb406 	br	1000d61c <__alt_data_end+0xf800d61c>
1000db4c:	d9800215 	stw	r6,8(sp)
1000db50:	d9c00515 	stw	r7,20(sp)
1000db54:	da000415 	stw	r8,16(sp)
1000db58:	000f3880 	call	1000f388 <__clzsi2>
1000db5c:	10800804 	addi	r2,r2,32
1000db60:	da000417 	ldw	r8,16(sp)
1000db64:	d9c00517 	ldw	r7,20(sp)
1000db68:	d9800217 	ldw	r6,8(sp)
1000db6c:	003ea106 	br	1000d5f4 <__alt_data_end+0xf800d5f4>
1000db70:	147ff604 	addi	r17,r2,-40
1000db74:	3462983a 	sll	r17,r6,r17
1000db78:	0029883a 	mov	r20,zero
1000db7c:	003ec906 	br	1000d6a4 <__alt_data_end+0xf800d6a4>
1000db80:	3009883a 	mov	r4,r6
1000db84:	d9400115 	stw	r5,4(sp)
1000db88:	d9800215 	stw	r6,8(sp)
1000db8c:	da000415 	stw	r8,16(sp)
1000db90:	da400315 	stw	r9,12(sp)
1000db94:	000f3880 	call	1000f388 <__clzsi2>
1000db98:	10800804 	addi	r2,r2,32
1000db9c:	da400317 	ldw	r9,12(sp)
1000dba0:	da000417 	ldw	r8,16(sp)
1000dba4:	d9800217 	ldw	r6,8(sp)
1000dba8:	d9400117 	ldw	r5,4(sp)
1000dbac:	003eb306 	br	1000d67c <__alt_data_end+0xf800d67c>
1000dbb0:	d9800017 	ldw	r6,0(sp)
1000dbb4:	a9ab883a 	add	r21,r21,r6
1000dbb8:	a98b803a 	cmpltu	r5,r21,r6
1000dbbc:	2d8b883a 	add	r5,r5,r22
1000dbc0:	2a11883a 	add	r8,r5,r8
1000dbc4:	897fffc4 	addi	r5,r17,-1
1000dbc8:	b2000c2e 	bgeu	r22,r8,1000dbfc <__divdf3+0x808>
1000dbcc:	41003f36 	bltu	r8,r4,1000dccc <__divdf3+0x8d8>
1000dbd0:	22006c26 	beq	r4,r8,1000dd84 <__divdf3+0x990>
1000dbd4:	4109c83a 	sub	r4,r8,r4
1000dbd8:	2823883a 	mov	r17,r5
1000dbdc:	003f3b06 	br	1000d8cc <__alt_data_end+0xf800d8cc>
1000dbe0:	ad3ed336 	bltu	r21,r20,1000d730 <__alt_data_end+0xf800d730>
1000dbe4:	a804d07a 	srli	r2,r21,1
1000dbe8:	802e97fa 	slli	r23,r16,31
1000dbec:	a82a97fa 	slli	r21,r21,31
1000dbf0:	8020d07a 	srli	r16,r16,1
1000dbf4:	b8aeb03a 	or	r23,r23,r2
1000dbf8:	003ed006 	br	1000d73c <__alt_data_end+0xf800d73c>
1000dbfc:	b23ff51e 	bne	r22,r8,1000dbd4 <__alt_data_end+0xf800dbd4>
1000dc00:	d9800017 	ldw	r6,0(sp)
1000dc04:	a9bff12e 	bgeu	r21,r6,1000dbcc <__alt_data_end+0xf800dbcc>
1000dc08:	b109c83a 	sub	r4,r22,r4
1000dc0c:	2823883a 	mov	r17,r5
1000dc10:	003f2e06 	br	1000d8cc <__alt_data_end+0xf800d8cc>
1000dc14:	2021883a 	mov	r16,r4
1000dc18:	003eff06 	br	1000d818 <__alt_data_end+0xf800d818>
1000dc1c:	2023883a 	mov	r17,r4
1000dc20:	003ee406 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000dc24:	a8bfe236 	bltu	r21,r2,1000dbb0 <__alt_data_end+0xf800dbb0>
1000dc28:	0009883a 	mov	r4,zero
1000dc2c:	003f2706 	br	1000d8cc <__alt_data_end+0xf800d8cc>
1000dc30:	81002d36 	bltu	r16,r4,1000dce8 <__divdf3+0x8f4>
1000dc34:	24005626 	beq	r4,r16,1000dd90 <__divdf3+0x99c>
1000dc38:	2829883a 	mov	r20,r5
1000dc3c:	003f8006 	br	1000da40 <__alt_data_end+0xf800da40>
1000dc40:	053fffc4 	movi	r20,-1
1000dc44:	003f7f06 	br	1000da44 <__alt_data_end+0xf800da44>
1000dc48:	200f883a 	mov	r7,r4
1000dc4c:	003f3c06 	br	1000d940 <__alt_data_end+0xf800d940>
1000dc50:	1011883a 	mov	r8,r2
1000dc54:	003f5506 	br	1000d9ac <__alt_data_end+0xf800d9ac>
1000dc58:	e027883a 	mov	r19,fp
1000dc5c:	003f7906 	br	1000da44 <__alt_data_end+0xf800da44>
1000dc60:	010007c4 	movi	r4,31
1000dc64:	20c02816 	blt	r4,r3,1000dd08 <__divdf3+0x914>
1000dc68:	00800804 	movi	r2,32
1000dc6c:	10c5c83a 	sub	r2,r2,r3
1000dc70:	888a983a 	sll	r5,r17,r2
1000dc74:	a0c8d83a 	srl	r4,r20,r3
1000dc78:	a084983a 	sll	r2,r20,r2
1000dc7c:	88e2d83a 	srl	r17,r17,r3
1000dc80:	2906b03a 	or	r3,r5,r4
1000dc84:	1004c03a 	cmpne	r2,r2,zero
1000dc88:	1886b03a 	or	r3,r3,r2
1000dc8c:	188001cc 	andi	r2,r3,7
1000dc90:	10000726 	beq	r2,zero,1000dcb0 <__divdf3+0x8bc>
1000dc94:	188003cc 	andi	r2,r3,15
1000dc98:	01000104 	movi	r4,4
1000dc9c:	11000426 	beq	r2,r4,1000dcb0 <__divdf3+0x8bc>
1000dca0:	1805883a 	mov	r2,r3
1000dca4:	10c00104 	addi	r3,r2,4
1000dca8:	1885803a 	cmpltu	r2,r3,r2
1000dcac:	88a3883a 	add	r17,r17,r2
1000dcb0:	8880202c 	andhi	r2,r17,128
1000dcb4:	10002926 	beq	r2,zero,1000dd5c <__divdf3+0x968>
1000dcb8:	9900004c 	andi	r4,r19,1
1000dcbc:	00800044 	movi	r2,1
1000dcc0:	0021883a 	mov	r16,zero
1000dcc4:	002b883a 	mov	r21,zero
1000dcc8:	003e2906 	br	1000d570 <__alt_data_end+0xf800d570>
1000dccc:	d9800017 	ldw	r6,0(sp)
1000dcd0:	8c7fff84 	addi	r17,r17,-2
1000dcd4:	a9ab883a 	add	r21,r21,r6
1000dcd8:	a98b803a 	cmpltu	r5,r21,r6
1000dcdc:	2d8b883a 	add	r5,r5,r22
1000dce0:	2a11883a 	add	r8,r5,r8
1000dce4:	003ef806 	br	1000d8c8 <__alt_data_end+0xf800d8c8>
1000dce8:	d9800017 	ldw	r6,0(sp)
1000dcec:	318f883a 	add	r7,r6,r6
1000dcf0:	398b803a 	cmpltu	r5,r7,r6
1000dcf4:	2d8d883a 	add	r6,r5,r22
1000dcf8:	81a1883a 	add	r16,r16,r6
1000dcfc:	a17fff84 	addi	r5,r20,-2
1000dd00:	d9c00015 	stw	r7,0(sp)
1000dd04:	003f8806 	br	1000db28 <__alt_data_end+0xf800db28>
1000dd08:	013ff844 	movi	r4,-31
1000dd0c:	2085c83a 	sub	r2,r4,r2
1000dd10:	8888d83a 	srl	r4,r17,r2
1000dd14:	00800804 	movi	r2,32
1000dd18:	18802126 	beq	r3,r2,1000dda0 <__divdf3+0x9ac>
1000dd1c:	04001004 	movi	r16,64
1000dd20:	80c7c83a 	sub	r3,r16,r3
1000dd24:	88e0983a 	sll	r16,r17,r3
1000dd28:	8504b03a 	or	r2,r16,r20
1000dd2c:	1004c03a 	cmpne	r2,r2,zero
1000dd30:	2084b03a 	or	r2,r4,r2
1000dd34:	144001cc 	andi	r17,r2,7
1000dd38:	88000d1e 	bne	r17,zero,1000dd70 <__divdf3+0x97c>
1000dd3c:	0021883a 	mov	r16,zero
1000dd40:	102ad0fa 	srli	r21,r2,3
1000dd44:	9900004c 	andi	r4,r19,1
1000dd48:	0005883a 	mov	r2,zero
1000dd4c:	ac6ab03a 	or	r21,r21,r17
1000dd50:	003e0706 	br	1000d570 <__alt_data_end+0xf800d570>
1000dd54:	1007883a 	mov	r3,r2
1000dd58:	0023883a 	mov	r17,zero
1000dd5c:	8820927a 	slli	r16,r17,9
1000dd60:	1805883a 	mov	r2,r3
1000dd64:	8822977a 	slli	r17,r17,29
1000dd68:	8020d33a 	srli	r16,r16,12
1000dd6c:	003ff406 	br	1000dd40 <__alt_data_end+0xf800dd40>
1000dd70:	10c003cc 	andi	r3,r2,15
1000dd74:	01000104 	movi	r4,4
1000dd78:	193ff626 	beq	r3,r4,1000dd54 <__alt_data_end+0xf800dd54>
1000dd7c:	0023883a 	mov	r17,zero
1000dd80:	003fc806 	br	1000dca4 <__alt_data_end+0xf800dca4>
1000dd84:	a8bfd136 	bltu	r21,r2,1000dccc <__alt_data_end+0xf800dccc>
1000dd88:	2823883a 	mov	r17,r5
1000dd8c:	003fa606 	br	1000dc28 <__alt_data_end+0xf800dc28>
1000dd90:	d9800017 	ldw	r6,0(sp)
1000dd94:	30bfd436 	bltu	r6,r2,1000dce8 <__alt_data_end+0xf800dce8>
1000dd98:	2829883a 	mov	r20,r5
1000dd9c:	003f6406 	br	1000db30 <__alt_data_end+0xf800db30>
1000dda0:	0021883a 	mov	r16,zero
1000dda4:	003fe006 	br	1000dd28 <__alt_data_end+0xf800dd28>
1000dda8:	00800434 	movhi	r2,16
1000ddac:	8c000234 	orhi	r16,r17,8
1000ddb0:	10bfffc4 	addi	r2,r2,-1
1000ddb4:	e009883a 	mov	r4,fp
1000ddb8:	80a0703a 	and	r16,r16,r2
1000ddbc:	a02b883a 	mov	r21,r20
1000ddc0:	003e4e06 	br	1000d6fc <__alt_data_end+0xf800d6fc>

1000ddc4 <__eqdf2>:
1000ddc4:	2804d53a 	srli	r2,r5,20
1000ddc8:	3806d53a 	srli	r3,r7,20
1000ddcc:	02000434 	movhi	r8,16
1000ddd0:	423fffc4 	addi	r8,r8,-1
1000ddd4:	1081ffcc 	andi	r2,r2,2047
1000ddd8:	0281ffc4 	movi	r10,2047
1000dddc:	2a12703a 	and	r9,r5,r8
1000dde0:	18c1ffcc 	andi	r3,r3,2047
1000dde4:	3a10703a 	and	r8,r7,r8
1000dde8:	280ad7fa 	srli	r5,r5,31
1000ddec:	380ed7fa 	srli	r7,r7,31
1000ddf0:	12801026 	beq	r2,r10,1000de34 <__eqdf2+0x70>
1000ddf4:	0281ffc4 	movi	r10,2047
1000ddf8:	1a800a26 	beq	r3,r10,1000de24 <__eqdf2+0x60>
1000ddfc:	10c00226 	beq	r2,r3,1000de08 <__eqdf2+0x44>
1000de00:	00800044 	movi	r2,1
1000de04:	f800283a 	ret
1000de08:	4a3ffd1e 	bne	r9,r8,1000de00 <__alt_data_end+0xf800de00>
1000de0c:	21bffc1e 	bne	r4,r6,1000de00 <__alt_data_end+0xf800de00>
1000de10:	29c00c26 	beq	r5,r7,1000de44 <__eqdf2+0x80>
1000de14:	103ffa1e 	bne	r2,zero,1000de00 <__alt_data_end+0xf800de00>
1000de18:	2244b03a 	or	r2,r4,r9
1000de1c:	1004c03a 	cmpne	r2,r2,zero
1000de20:	f800283a 	ret
1000de24:	3214b03a 	or	r10,r6,r8
1000de28:	503ff426 	beq	r10,zero,1000ddfc <__alt_data_end+0xf800ddfc>
1000de2c:	00800044 	movi	r2,1
1000de30:	f800283a 	ret
1000de34:	2254b03a 	or	r10,r4,r9
1000de38:	503fee26 	beq	r10,zero,1000ddf4 <__alt_data_end+0xf800ddf4>
1000de3c:	00800044 	movi	r2,1
1000de40:	f800283a 	ret
1000de44:	0005883a 	mov	r2,zero
1000de48:	f800283a 	ret

1000de4c <__gedf2>:
1000de4c:	2804d53a 	srli	r2,r5,20
1000de50:	3806d53a 	srli	r3,r7,20
1000de54:	02000434 	movhi	r8,16
1000de58:	423fffc4 	addi	r8,r8,-1
1000de5c:	1081ffcc 	andi	r2,r2,2047
1000de60:	0241ffc4 	movi	r9,2047
1000de64:	2a14703a 	and	r10,r5,r8
1000de68:	18c1ffcc 	andi	r3,r3,2047
1000de6c:	3a10703a 	and	r8,r7,r8
1000de70:	280ad7fa 	srli	r5,r5,31
1000de74:	380ed7fa 	srli	r7,r7,31
1000de78:	12401d26 	beq	r2,r9,1000def0 <__gedf2+0xa4>
1000de7c:	0241ffc4 	movi	r9,2047
1000de80:	1a401226 	beq	r3,r9,1000decc <__gedf2+0x80>
1000de84:	1000081e 	bne	r2,zero,1000dea8 <__gedf2+0x5c>
1000de88:	2296b03a 	or	r11,r4,r10
1000de8c:	5813003a 	cmpeq	r9,r11,zero
1000de90:	1800091e 	bne	r3,zero,1000deb8 <__gedf2+0x6c>
1000de94:	3218b03a 	or	r12,r6,r8
1000de98:	6000071e 	bne	r12,zero,1000deb8 <__gedf2+0x6c>
1000de9c:	0005883a 	mov	r2,zero
1000dea0:	5800101e 	bne	r11,zero,1000dee4 <__gedf2+0x98>
1000dea4:	f800283a 	ret
1000dea8:	18000c1e 	bne	r3,zero,1000dedc <__gedf2+0x90>
1000deac:	3212b03a 	or	r9,r6,r8
1000deb0:	48000c26 	beq	r9,zero,1000dee4 <__gedf2+0x98>
1000deb4:	0013883a 	mov	r9,zero
1000deb8:	39c03fcc 	andi	r7,r7,255
1000debc:	48000826 	beq	r9,zero,1000dee0 <__gedf2+0x94>
1000dec0:	38000926 	beq	r7,zero,1000dee8 <__gedf2+0x9c>
1000dec4:	00800044 	movi	r2,1
1000dec8:	f800283a 	ret
1000decc:	3212b03a 	or	r9,r6,r8
1000ded0:	483fec26 	beq	r9,zero,1000de84 <__alt_data_end+0xf800de84>
1000ded4:	00bfff84 	movi	r2,-2
1000ded8:	f800283a 	ret
1000dedc:	39c03fcc 	andi	r7,r7,255
1000dee0:	29c00626 	beq	r5,r7,1000defc <__gedf2+0xb0>
1000dee4:	283ff726 	beq	r5,zero,1000dec4 <__alt_data_end+0xf800dec4>
1000dee8:	00bfffc4 	movi	r2,-1
1000deec:	f800283a 	ret
1000def0:	2292b03a 	or	r9,r4,r10
1000def4:	483fe126 	beq	r9,zero,1000de7c <__alt_data_end+0xf800de7c>
1000def8:	003ff606 	br	1000ded4 <__alt_data_end+0xf800ded4>
1000defc:	18bff916 	blt	r3,r2,1000dee4 <__alt_data_end+0xf800dee4>
1000df00:	10c00316 	blt	r2,r3,1000df10 <__gedf2+0xc4>
1000df04:	42bff736 	bltu	r8,r10,1000dee4 <__alt_data_end+0xf800dee4>
1000df08:	52000326 	beq	r10,r8,1000df18 <__gedf2+0xcc>
1000df0c:	5200042e 	bgeu	r10,r8,1000df20 <__gedf2+0xd4>
1000df10:	283fec1e 	bne	r5,zero,1000dec4 <__alt_data_end+0xf800dec4>
1000df14:	003ff406 	br	1000dee8 <__alt_data_end+0xf800dee8>
1000df18:	313ff236 	bltu	r6,r4,1000dee4 <__alt_data_end+0xf800dee4>
1000df1c:	21bffc36 	bltu	r4,r6,1000df10 <__alt_data_end+0xf800df10>
1000df20:	0005883a 	mov	r2,zero
1000df24:	f800283a 	ret

1000df28 <__ledf2>:
1000df28:	2804d53a 	srli	r2,r5,20
1000df2c:	3810d53a 	srli	r8,r7,20
1000df30:	00c00434 	movhi	r3,16
1000df34:	18ffffc4 	addi	r3,r3,-1
1000df38:	1081ffcc 	andi	r2,r2,2047
1000df3c:	0241ffc4 	movi	r9,2047
1000df40:	28d4703a 	and	r10,r5,r3
1000df44:	4201ffcc 	andi	r8,r8,2047
1000df48:	38c6703a 	and	r3,r7,r3
1000df4c:	280ad7fa 	srli	r5,r5,31
1000df50:	380ed7fa 	srli	r7,r7,31
1000df54:	12401f26 	beq	r2,r9,1000dfd4 <__ledf2+0xac>
1000df58:	0241ffc4 	movi	r9,2047
1000df5c:	42401426 	beq	r8,r9,1000dfb0 <__ledf2+0x88>
1000df60:	1000091e 	bne	r2,zero,1000df88 <__ledf2+0x60>
1000df64:	2296b03a 	or	r11,r4,r10
1000df68:	5813003a 	cmpeq	r9,r11,zero
1000df6c:	29403fcc 	andi	r5,r5,255
1000df70:	40000a1e 	bne	r8,zero,1000df9c <__ledf2+0x74>
1000df74:	30d8b03a 	or	r12,r6,r3
1000df78:	6000081e 	bne	r12,zero,1000df9c <__ledf2+0x74>
1000df7c:	0005883a 	mov	r2,zero
1000df80:	5800111e 	bne	r11,zero,1000dfc8 <__ledf2+0xa0>
1000df84:	f800283a 	ret
1000df88:	29403fcc 	andi	r5,r5,255
1000df8c:	40000c1e 	bne	r8,zero,1000dfc0 <__ledf2+0x98>
1000df90:	30d2b03a 	or	r9,r6,r3
1000df94:	48000c26 	beq	r9,zero,1000dfc8 <__ledf2+0xa0>
1000df98:	0013883a 	mov	r9,zero
1000df9c:	39c03fcc 	andi	r7,r7,255
1000dfa0:	48000826 	beq	r9,zero,1000dfc4 <__ledf2+0x9c>
1000dfa4:	38001126 	beq	r7,zero,1000dfec <__ledf2+0xc4>
1000dfa8:	00800044 	movi	r2,1
1000dfac:	f800283a 	ret
1000dfb0:	30d2b03a 	or	r9,r6,r3
1000dfb4:	483fea26 	beq	r9,zero,1000df60 <__alt_data_end+0xf800df60>
1000dfb8:	00800084 	movi	r2,2
1000dfbc:	f800283a 	ret
1000dfc0:	39c03fcc 	andi	r7,r7,255
1000dfc4:	39400726 	beq	r7,r5,1000dfe4 <__ledf2+0xbc>
1000dfc8:	2800081e 	bne	r5,zero,1000dfec <__ledf2+0xc4>
1000dfcc:	00800044 	movi	r2,1
1000dfd0:	f800283a 	ret
1000dfd4:	2292b03a 	or	r9,r4,r10
1000dfd8:	483fdf26 	beq	r9,zero,1000df58 <__alt_data_end+0xf800df58>
1000dfdc:	00800084 	movi	r2,2
1000dfe0:	f800283a 	ret
1000dfe4:	4080030e 	bge	r8,r2,1000dff4 <__ledf2+0xcc>
1000dfe8:	383fef26 	beq	r7,zero,1000dfa8 <__alt_data_end+0xf800dfa8>
1000dfec:	00bfffc4 	movi	r2,-1
1000dff0:	f800283a 	ret
1000dff4:	123feb16 	blt	r2,r8,1000dfa4 <__alt_data_end+0xf800dfa4>
1000dff8:	1abff336 	bltu	r3,r10,1000dfc8 <__alt_data_end+0xf800dfc8>
1000dffc:	50c00326 	beq	r10,r3,1000e00c <__ledf2+0xe4>
1000e000:	50c0042e 	bgeu	r10,r3,1000e014 <__ledf2+0xec>
1000e004:	283fe81e 	bne	r5,zero,1000dfa8 <__alt_data_end+0xf800dfa8>
1000e008:	003ff806 	br	1000dfec <__alt_data_end+0xf800dfec>
1000e00c:	313fee36 	bltu	r6,r4,1000dfc8 <__alt_data_end+0xf800dfc8>
1000e010:	21bffc36 	bltu	r4,r6,1000e004 <__alt_data_end+0xf800e004>
1000e014:	0005883a 	mov	r2,zero
1000e018:	f800283a 	ret

1000e01c <__muldf3>:
1000e01c:	deffee04 	addi	sp,sp,-72
1000e020:	dd000c15 	stw	r20,48(sp)
1000e024:	2828d53a 	srli	r20,r5,20
1000e028:	ddc00f15 	stw	r23,60(sp)
1000e02c:	282ed7fa 	srli	r23,r5,31
1000e030:	dc000815 	stw	r16,32(sp)
1000e034:	04000434 	movhi	r16,16
1000e038:	dcc00b15 	stw	r19,44(sp)
1000e03c:	843fffc4 	addi	r16,r16,-1
1000e040:	dfc01115 	stw	ra,68(sp)
1000e044:	df001015 	stw	fp,64(sp)
1000e048:	dd800e15 	stw	r22,56(sp)
1000e04c:	dd400d15 	stw	r21,52(sp)
1000e050:	dc800a15 	stw	r18,40(sp)
1000e054:	dc400915 	stw	r17,36(sp)
1000e058:	a501ffcc 	andi	r20,r20,2047
1000e05c:	2c20703a 	and	r16,r5,r16
1000e060:	b827883a 	mov	r19,r23
1000e064:	ba403fcc 	andi	r9,r23,255
1000e068:	a0006026 	beq	r20,zero,1000e1ec <__muldf3+0x1d0>
1000e06c:	0081ffc4 	movi	r2,2047
1000e070:	202d883a 	mov	r22,r4
1000e074:	a0803626 	beq	r20,r2,1000e150 <__muldf3+0x134>
1000e078:	84000434 	orhi	r16,r16,16
1000e07c:	200ad77a 	srli	r5,r4,29
1000e080:	800490fa 	slli	r2,r16,3
1000e084:	202c90fa 	slli	r22,r4,3
1000e088:	a53f0044 	addi	r20,r20,-1023
1000e08c:	28a0b03a 	or	r16,r5,r2
1000e090:	002b883a 	mov	r21,zero
1000e094:	000b883a 	mov	r5,zero
1000e098:	3804d53a 	srli	r2,r7,20
1000e09c:	3838d7fa 	srli	fp,r7,31
1000e0a0:	04400434 	movhi	r17,16
1000e0a4:	8c7fffc4 	addi	r17,r17,-1
1000e0a8:	1081ffcc 	andi	r2,r2,2047
1000e0ac:	3025883a 	mov	r18,r6
1000e0b0:	3c62703a 	and	r17,r7,r17
1000e0b4:	e2803fcc 	andi	r10,fp,255
1000e0b8:	10006d26 	beq	r2,zero,1000e270 <__muldf3+0x254>
1000e0bc:	00c1ffc4 	movi	r3,2047
1000e0c0:	10c06526 	beq	r2,r3,1000e258 <__muldf3+0x23c>
1000e0c4:	8c400434 	orhi	r17,r17,16
1000e0c8:	300ed77a 	srli	r7,r6,29
1000e0cc:	880690fa 	slli	r3,r17,3
1000e0d0:	302490fa 	slli	r18,r6,3
1000e0d4:	10bf0044 	addi	r2,r2,-1023
1000e0d8:	38e2b03a 	or	r17,r7,r3
1000e0dc:	000f883a 	mov	r7,zero
1000e0e0:	a087883a 	add	r3,r20,r2
1000e0e4:	010003c4 	movi	r4,15
1000e0e8:	3d44b03a 	or	r2,r7,r21
1000e0ec:	e5ccf03a 	xor	r6,fp,r23
1000e0f0:	1a000044 	addi	r8,r3,1
1000e0f4:	20809b36 	bltu	r4,r2,1000e364 <__muldf3+0x348>
1000e0f8:	100490ba 	slli	r2,r2,2
1000e0fc:	01040074 	movhi	r4,4097
1000e100:	21384404 	addi	r4,r4,-7920
1000e104:	1105883a 	add	r2,r2,r4
1000e108:	10800017 	ldw	r2,0(r2)
1000e10c:	1000683a 	jmp	r2
1000e110:	1000e364 	muli	zero,r2,909
1000e114:	1000e170 	cmpltui	zero,r2,901
1000e118:	1000e170 	cmpltui	zero,r2,901
1000e11c:	1000e16c 	andhi	zero,r2,901
1000e120:	1000e340 	call	11000e34 <_gp+0xfe4ce0>
1000e124:	1000e340 	call	11000e34 <_gp+0xfe4ce0>
1000e128:	1000e328 	cmpgeui	zero,r2,908
1000e12c:	1000e16c 	andhi	zero,r2,901
1000e130:	1000e340 	call	11000e34 <_gp+0xfe4ce0>
1000e134:	1000e328 	cmpgeui	zero,r2,908
1000e138:	1000e340 	call	11000e34 <_gp+0xfe4ce0>
1000e13c:	1000e16c 	andhi	zero,r2,901
1000e140:	1000e350 	cmplti	zero,r2,909
1000e144:	1000e350 	cmplti	zero,r2,909
1000e148:	1000e350 	cmplti	zero,r2,909
1000e14c:	1000e6b0 	cmpltui	zero,r2,922
1000e150:	2404b03a 	or	r2,r4,r16
1000e154:	1000711e 	bne	r2,zero,1000e31c <__muldf3+0x300>
1000e158:	05400204 	movi	r21,8
1000e15c:	0021883a 	mov	r16,zero
1000e160:	002d883a 	mov	r22,zero
1000e164:	01400084 	movi	r5,2
1000e168:	003fcb06 	br	1000e098 <__alt_data_end+0xf800e098>
1000e16c:	500d883a 	mov	r6,r10
1000e170:	00800084 	movi	r2,2
1000e174:	38805926 	beq	r7,r2,1000e2dc <__muldf3+0x2c0>
1000e178:	008000c4 	movi	r2,3
1000e17c:	3881bb26 	beq	r7,r2,1000e86c <__muldf3+0x850>
1000e180:	00800044 	movi	r2,1
1000e184:	3881961e 	bne	r7,r2,1000e7e0 <__muldf3+0x7c4>
1000e188:	3027883a 	mov	r19,r6
1000e18c:	0005883a 	mov	r2,zero
1000e190:	0021883a 	mov	r16,zero
1000e194:	002d883a 	mov	r22,zero
1000e198:	1004953a 	slli	r2,r2,20
1000e19c:	98c03fcc 	andi	r3,r19,255
1000e1a0:	04400434 	movhi	r17,16
1000e1a4:	8c7fffc4 	addi	r17,r17,-1
1000e1a8:	180697fa 	slli	r3,r3,31
1000e1ac:	8460703a 	and	r16,r16,r17
1000e1b0:	80a0b03a 	or	r16,r16,r2
1000e1b4:	80c6b03a 	or	r3,r16,r3
1000e1b8:	b005883a 	mov	r2,r22
1000e1bc:	dfc01117 	ldw	ra,68(sp)
1000e1c0:	df001017 	ldw	fp,64(sp)
1000e1c4:	ddc00f17 	ldw	r23,60(sp)
1000e1c8:	dd800e17 	ldw	r22,56(sp)
1000e1cc:	dd400d17 	ldw	r21,52(sp)
1000e1d0:	dd000c17 	ldw	r20,48(sp)
1000e1d4:	dcc00b17 	ldw	r19,44(sp)
1000e1d8:	dc800a17 	ldw	r18,40(sp)
1000e1dc:	dc400917 	ldw	r17,36(sp)
1000e1e0:	dc000817 	ldw	r16,32(sp)
1000e1e4:	dec01204 	addi	sp,sp,72
1000e1e8:	f800283a 	ret
1000e1ec:	2404b03a 	or	r2,r4,r16
1000e1f0:	202b883a 	mov	r21,r4
1000e1f4:	10004426 	beq	r2,zero,1000e308 <__muldf3+0x2ec>
1000e1f8:	80015126 	beq	r16,zero,1000e740 <__muldf3+0x724>
1000e1fc:	8009883a 	mov	r4,r16
1000e200:	d9800715 	stw	r6,28(sp)
1000e204:	d9c00215 	stw	r7,8(sp)
1000e208:	da400415 	stw	r9,16(sp)
1000e20c:	000f3880 	call	1000f388 <__clzsi2>
1000e210:	d9800717 	ldw	r6,28(sp)
1000e214:	d9c00217 	ldw	r7,8(sp)
1000e218:	da400417 	ldw	r9,16(sp)
1000e21c:	113ffd44 	addi	r4,r2,-11
1000e220:	00c00704 	movi	r3,28
1000e224:	19014216 	blt	r3,r4,1000e730 <__muldf3+0x714>
1000e228:	00c00744 	movi	r3,29
1000e22c:	15bffe04 	addi	r22,r2,-8
1000e230:	1907c83a 	sub	r3,r3,r4
1000e234:	85a0983a 	sll	r16,r16,r22
1000e238:	a8c6d83a 	srl	r3,r21,r3
1000e23c:	adac983a 	sll	r22,r21,r22
1000e240:	1c20b03a 	or	r16,r3,r16
1000e244:	1080fcc4 	addi	r2,r2,1011
1000e248:	00a9c83a 	sub	r20,zero,r2
1000e24c:	002b883a 	mov	r21,zero
1000e250:	000b883a 	mov	r5,zero
1000e254:	003f9006 	br	1000e098 <__alt_data_end+0xf800e098>
1000e258:	3446b03a 	or	r3,r6,r17
1000e25c:	1800281e 	bne	r3,zero,1000e300 <__muldf3+0x2e4>
1000e260:	0023883a 	mov	r17,zero
1000e264:	0025883a 	mov	r18,zero
1000e268:	01c00084 	movi	r7,2
1000e26c:	003f9c06 	br	1000e0e0 <__alt_data_end+0xf800e0e0>
1000e270:	3446b03a 	or	r3,r6,r17
1000e274:	18001e26 	beq	r3,zero,1000e2f0 <__muldf3+0x2d4>
1000e278:	88012126 	beq	r17,zero,1000e700 <__muldf3+0x6e4>
1000e27c:	8809883a 	mov	r4,r17
1000e280:	d9400215 	stw	r5,8(sp)
1000e284:	d9800715 	stw	r6,28(sp)
1000e288:	da400415 	stw	r9,16(sp)
1000e28c:	da800315 	stw	r10,12(sp)
1000e290:	000f3880 	call	1000f388 <__clzsi2>
1000e294:	d9400217 	ldw	r5,8(sp)
1000e298:	d9800717 	ldw	r6,28(sp)
1000e29c:	da400417 	ldw	r9,16(sp)
1000e2a0:	da800317 	ldw	r10,12(sp)
1000e2a4:	113ffd44 	addi	r4,r2,-11
1000e2a8:	00c00704 	movi	r3,28
1000e2ac:	19011016 	blt	r3,r4,1000e6f0 <__muldf3+0x6d4>
1000e2b0:	00c00744 	movi	r3,29
1000e2b4:	14bffe04 	addi	r18,r2,-8
1000e2b8:	1907c83a 	sub	r3,r3,r4
1000e2bc:	8ca2983a 	sll	r17,r17,r18
1000e2c0:	30c6d83a 	srl	r3,r6,r3
1000e2c4:	34a4983a 	sll	r18,r6,r18
1000e2c8:	1c62b03a 	or	r17,r3,r17
1000e2cc:	1080fcc4 	addi	r2,r2,1011
1000e2d0:	0085c83a 	sub	r2,zero,r2
1000e2d4:	000f883a 	mov	r7,zero
1000e2d8:	003f8106 	br	1000e0e0 <__alt_data_end+0xf800e0e0>
1000e2dc:	3027883a 	mov	r19,r6
1000e2e0:	0081ffc4 	movi	r2,2047
1000e2e4:	0021883a 	mov	r16,zero
1000e2e8:	002d883a 	mov	r22,zero
1000e2ec:	003faa06 	br	1000e198 <__alt_data_end+0xf800e198>
1000e2f0:	0023883a 	mov	r17,zero
1000e2f4:	0025883a 	mov	r18,zero
1000e2f8:	01c00044 	movi	r7,1
1000e2fc:	003f7806 	br	1000e0e0 <__alt_data_end+0xf800e0e0>
1000e300:	01c000c4 	movi	r7,3
1000e304:	003f7606 	br	1000e0e0 <__alt_data_end+0xf800e0e0>
1000e308:	05400104 	movi	r21,4
1000e30c:	0021883a 	mov	r16,zero
1000e310:	002d883a 	mov	r22,zero
1000e314:	01400044 	movi	r5,1
1000e318:	003f5f06 	br	1000e098 <__alt_data_end+0xf800e098>
1000e31c:	05400304 	movi	r21,12
1000e320:	014000c4 	movi	r5,3
1000e324:	003f5c06 	br	1000e098 <__alt_data_end+0xf800e098>
1000e328:	04000434 	movhi	r16,16
1000e32c:	0027883a 	mov	r19,zero
1000e330:	843fffc4 	addi	r16,r16,-1
1000e334:	05bfffc4 	movi	r22,-1
1000e338:	0081ffc4 	movi	r2,2047
1000e33c:	003f9606 	br	1000e198 <__alt_data_end+0xf800e198>
1000e340:	8023883a 	mov	r17,r16
1000e344:	b025883a 	mov	r18,r22
1000e348:	280f883a 	mov	r7,r5
1000e34c:	003f8806 	br	1000e170 <__alt_data_end+0xf800e170>
1000e350:	8023883a 	mov	r17,r16
1000e354:	b025883a 	mov	r18,r22
1000e358:	480d883a 	mov	r6,r9
1000e35c:	280f883a 	mov	r7,r5
1000e360:	003f8306 	br	1000e170 <__alt_data_end+0xf800e170>
1000e364:	b026d43a 	srli	r19,r22,16
1000e368:	902ed43a 	srli	r23,r18,16
1000e36c:	b5bfffcc 	andi	r22,r22,65535
1000e370:	94bfffcc 	andi	r18,r18,65535
1000e374:	b00b883a 	mov	r5,r22
1000e378:	9009883a 	mov	r4,r18
1000e37c:	d8c00515 	stw	r3,20(sp)
1000e380:	d9800715 	stw	r6,28(sp)
1000e384:	da000615 	stw	r8,24(sp)
1000e388:	000cb200 	call	1000cb20 <__mulsi3>
1000e38c:	980b883a 	mov	r5,r19
1000e390:	9009883a 	mov	r4,r18
1000e394:	1029883a 	mov	r20,r2
1000e398:	000cb200 	call	1000cb20 <__mulsi3>
1000e39c:	b80b883a 	mov	r5,r23
1000e3a0:	9809883a 	mov	r4,r19
1000e3a4:	102b883a 	mov	r21,r2
1000e3a8:	000cb200 	call	1000cb20 <__mulsi3>
1000e3ac:	b809883a 	mov	r4,r23
1000e3b0:	b00b883a 	mov	r5,r22
1000e3b4:	1039883a 	mov	fp,r2
1000e3b8:	000cb200 	call	1000cb20 <__mulsi3>
1000e3bc:	a008d43a 	srli	r4,r20,16
1000e3c0:	1545883a 	add	r2,r2,r21
1000e3c4:	d8c00517 	ldw	r3,20(sp)
1000e3c8:	2085883a 	add	r2,r4,r2
1000e3cc:	d9800717 	ldw	r6,28(sp)
1000e3d0:	da000617 	ldw	r8,24(sp)
1000e3d4:	1540022e 	bgeu	r2,r21,1000e3e0 <__muldf3+0x3c4>
1000e3d8:	01000074 	movhi	r4,1
1000e3dc:	e139883a 	add	fp,fp,r4
1000e3e0:	100e943a 	slli	r7,r2,16
1000e3e4:	1004d43a 	srli	r2,r2,16
1000e3e8:	882ad43a 	srli	r21,r17,16
1000e3ec:	a53fffcc 	andi	r20,r20,65535
1000e3f0:	8c7fffcc 	andi	r17,r17,65535
1000e3f4:	3d29883a 	add	r20,r7,r20
1000e3f8:	b00b883a 	mov	r5,r22
1000e3fc:	8809883a 	mov	r4,r17
1000e400:	d8c00515 	stw	r3,20(sp)
1000e404:	d9800715 	stw	r6,28(sp)
1000e408:	da000615 	stw	r8,24(sp)
1000e40c:	dd000115 	stw	r20,4(sp)
1000e410:	d8800015 	stw	r2,0(sp)
1000e414:	000cb200 	call	1000cb20 <__mulsi3>
1000e418:	980b883a 	mov	r5,r19
1000e41c:	8809883a 	mov	r4,r17
1000e420:	d8800215 	stw	r2,8(sp)
1000e424:	000cb200 	call	1000cb20 <__mulsi3>
1000e428:	9809883a 	mov	r4,r19
1000e42c:	a80b883a 	mov	r5,r21
1000e430:	1029883a 	mov	r20,r2
1000e434:	000cb200 	call	1000cb20 <__mulsi3>
1000e438:	b00b883a 	mov	r5,r22
1000e43c:	a809883a 	mov	r4,r21
1000e440:	d8800415 	stw	r2,16(sp)
1000e444:	000cb200 	call	1000cb20 <__mulsi3>
1000e448:	d9c00217 	ldw	r7,8(sp)
1000e44c:	1505883a 	add	r2,r2,r20
1000e450:	d8c00517 	ldw	r3,20(sp)
1000e454:	3826d43a 	srli	r19,r7,16
1000e458:	d9800717 	ldw	r6,28(sp)
1000e45c:	da000617 	ldw	r8,24(sp)
1000e460:	9885883a 	add	r2,r19,r2
1000e464:	da400417 	ldw	r9,16(sp)
1000e468:	1500022e 	bgeu	r2,r20,1000e474 <__muldf3+0x458>
1000e46c:	01000074 	movhi	r4,1
1000e470:	4913883a 	add	r9,r9,r4
1000e474:	1028d43a 	srli	r20,r2,16
1000e478:	1004943a 	slli	r2,r2,16
1000e47c:	802cd43a 	srli	r22,r16,16
1000e480:	843fffcc 	andi	r16,r16,65535
1000e484:	3cffffcc 	andi	r19,r7,65535
1000e488:	9009883a 	mov	r4,r18
1000e48c:	800b883a 	mov	r5,r16
1000e490:	a269883a 	add	r20,r20,r9
1000e494:	d8c00515 	stw	r3,20(sp)
1000e498:	d9800715 	stw	r6,28(sp)
1000e49c:	da000615 	stw	r8,24(sp)
1000e4a0:	14e7883a 	add	r19,r2,r19
1000e4a4:	000cb200 	call	1000cb20 <__mulsi3>
1000e4a8:	9009883a 	mov	r4,r18
1000e4ac:	b00b883a 	mov	r5,r22
1000e4b0:	d8800315 	stw	r2,12(sp)
1000e4b4:	000cb200 	call	1000cb20 <__mulsi3>
1000e4b8:	b809883a 	mov	r4,r23
1000e4bc:	b00b883a 	mov	r5,r22
1000e4c0:	d8800215 	stw	r2,8(sp)
1000e4c4:	000cb200 	call	1000cb20 <__mulsi3>
1000e4c8:	b80b883a 	mov	r5,r23
1000e4cc:	8009883a 	mov	r4,r16
1000e4d0:	d8800415 	stw	r2,16(sp)
1000e4d4:	000cb200 	call	1000cb20 <__mulsi3>
1000e4d8:	da800317 	ldw	r10,12(sp)
1000e4dc:	d9c00217 	ldw	r7,8(sp)
1000e4e0:	d9000017 	ldw	r4,0(sp)
1000e4e4:	502ed43a 	srli	r23,r10,16
1000e4e8:	11c5883a 	add	r2,r2,r7
1000e4ec:	24e5883a 	add	r18,r4,r19
1000e4f0:	b885883a 	add	r2,r23,r2
1000e4f4:	d8c00517 	ldw	r3,20(sp)
1000e4f8:	d9800717 	ldw	r6,28(sp)
1000e4fc:	da000617 	ldw	r8,24(sp)
1000e500:	da400417 	ldw	r9,16(sp)
1000e504:	11c0022e 	bgeu	r2,r7,1000e510 <__muldf3+0x4f4>
1000e508:	01000074 	movhi	r4,1
1000e50c:	4913883a 	add	r9,r9,r4
1000e510:	100ed43a 	srli	r7,r2,16
1000e514:	1004943a 	slli	r2,r2,16
1000e518:	55ffffcc 	andi	r23,r10,65535
1000e51c:	3a53883a 	add	r9,r7,r9
1000e520:	8809883a 	mov	r4,r17
1000e524:	800b883a 	mov	r5,r16
1000e528:	d8c00515 	stw	r3,20(sp)
1000e52c:	d9800715 	stw	r6,28(sp)
1000e530:	da000615 	stw	r8,24(sp)
1000e534:	da400415 	stw	r9,16(sp)
1000e538:	15ef883a 	add	r23,r2,r23
1000e53c:	000cb200 	call	1000cb20 <__mulsi3>
1000e540:	8809883a 	mov	r4,r17
1000e544:	b00b883a 	mov	r5,r22
1000e548:	d8800215 	stw	r2,8(sp)
1000e54c:	000cb200 	call	1000cb20 <__mulsi3>
1000e550:	b00b883a 	mov	r5,r22
1000e554:	a809883a 	mov	r4,r21
1000e558:	d8800315 	stw	r2,12(sp)
1000e55c:	000cb200 	call	1000cb20 <__mulsi3>
1000e560:	8009883a 	mov	r4,r16
1000e564:	a80b883a 	mov	r5,r21
1000e568:	1023883a 	mov	r17,r2
1000e56c:	000cb200 	call	1000cb20 <__mulsi3>
1000e570:	d9c00217 	ldw	r7,8(sp)
1000e574:	da800317 	ldw	r10,12(sp)
1000e578:	d8c00517 	ldw	r3,20(sp)
1000e57c:	3808d43a 	srli	r4,r7,16
1000e580:	1285883a 	add	r2,r2,r10
1000e584:	d9800717 	ldw	r6,28(sp)
1000e588:	2085883a 	add	r2,r4,r2
1000e58c:	da000617 	ldw	r8,24(sp)
1000e590:	da400417 	ldw	r9,16(sp)
1000e594:	1280022e 	bgeu	r2,r10,1000e5a0 <__muldf3+0x584>
1000e598:	01000074 	movhi	r4,1
1000e59c:	8923883a 	add	r17,r17,r4
1000e5a0:	1008943a 	slli	r4,r2,16
1000e5a4:	39ffffcc 	andi	r7,r7,65535
1000e5a8:	e4b9883a 	add	fp,fp,r18
1000e5ac:	21cf883a 	add	r7,r4,r7
1000e5b0:	e4e7803a 	cmpltu	r19,fp,r19
1000e5b4:	3d0f883a 	add	r7,r7,r20
1000e5b8:	bf39883a 	add	fp,r23,fp
1000e5bc:	99c9883a 	add	r4,r19,r7
1000e5c0:	e5ef803a 	cmpltu	r23,fp,r23
1000e5c4:	490b883a 	add	r5,r9,r4
1000e5c8:	1004d43a 	srli	r2,r2,16
1000e5cc:	b965883a 	add	r18,r23,r5
1000e5d0:	24c9803a 	cmpltu	r4,r4,r19
1000e5d4:	3d29803a 	cmpltu	r20,r7,r20
1000e5d8:	a128b03a 	or	r20,r20,r4
1000e5dc:	95ef803a 	cmpltu	r23,r18,r23
1000e5e0:	2a53803a 	cmpltu	r9,r5,r9
1000e5e4:	a0a9883a 	add	r20,r20,r2
1000e5e8:	4deeb03a 	or	r23,r9,r23
1000e5ec:	a5ef883a 	add	r23,r20,r23
1000e5f0:	bc63883a 	add	r17,r23,r17
1000e5f4:	e004927a 	slli	r2,fp,9
1000e5f8:	d9000117 	ldw	r4,4(sp)
1000e5fc:	882e927a 	slli	r23,r17,9
1000e600:	9022d5fa 	srli	r17,r18,23
1000e604:	e038d5fa 	srli	fp,fp,23
1000e608:	1104b03a 	or	r2,r2,r4
1000e60c:	9024927a 	slli	r18,r18,9
1000e610:	1004c03a 	cmpne	r2,r2,zero
1000e614:	bc62b03a 	or	r17,r23,r17
1000e618:	1738b03a 	or	fp,r2,fp
1000e61c:	8880402c 	andhi	r2,r17,256
1000e620:	e4a4b03a 	or	r18,fp,r18
1000e624:	10000726 	beq	r2,zero,1000e644 <__muldf3+0x628>
1000e628:	9006d07a 	srli	r3,r18,1
1000e62c:	880497fa 	slli	r2,r17,31
1000e630:	9480004c 	andi	r18,r18,1
1000e634:	8822d07a 	srli	r17,r17,1
1000e638:	1ca4b03a 	or	r18,r3,r18
1000e63c:	14a4b03a 	or	r18,r2,r18
1000e640:	4007883a 	mov	r3,r8
1000e644:	1880ffc4 	addi	r2,r3,1023
1000e648:	0080460e 	bge	zero,r2,1000e764 <__muldf3+0x748>
1000e64c:	910001cc 	andi	r4,r18,7
1000e650:	20000726 	beq	r4,zero,1000e670 <__muldf3+0x654>
1000e654:	910003cc 	andi	r4,r18,15
1000e658:	01400104 	movi	r5,4
1000e65c:	21400426 	beq	r4,r5,1000e670 <__muldf3+0x654>
1000e660:	9149883a 	add	r4,r18,r5
1000e664:	24a5803a 	cmpltu	r18,r4,r18
1000e668:	8ca3883a 	add	r17,r17,r18
1000e66c:	2025883a 	mov	r18,r4
1000e670:	8900402c 	andhi	r4,r17,256
1000e674:	20000426 	beq	r4,zero,1000e688 <__muldf3+0x66c>
1000e678:	18810004 	addi	r2,r3,1024
1000e67c:	00ffc034 	movhi	r3,65280
1000e680:	18ffffc4 	addi	r3,r3,-1
1000e684:	88e2703a 	and	r17,r17,r3
1000e688:	00c1ff84 	movi	r3,2046
1000e68c:	18bf1316 	blt	r3,r2,1000e2dc <__alt_data_end+0xf800e2dc>
1000e690:	882c977a 	slli	r22,r17,29
1000e694:	9024d0fa 	srli	r18,r18,3
1000e698:	8822927a 	slli	r17,r17,9
1000e69c:	1081ffcc 	andi	r2,r2,2047
1000e6a0:	b4acb03a 	or	r22,r22,r18
1000e6a4:	8820d33a 	srli	r16,r17,12
1000e6a8:	3027883a 	mov	r19,r6
1000e6ac:	003eba06 	br	1000e198 <__alt_data_end+0xf800e198>
1000e6b0:	8080022c 	andhi	r2,r16,8
1000e6b4:	10000926 	beq	r2,zero,1000e6dc <__muldf3+0x6c0>
1000e6b8:	8880022c 	andhi	r2,r17,8
1000e6bc:	1000071e 	bne	r2,zero,1000e6dc <__muldf3+0x6c0>
1000e6c0:	00800434 	movhi	r2,16
1000e6c4:	8c000234 	orhi	r16,r17,8
1000e6c8:	10bfffc4 	addi	r2,r2,-1
1000e6cc:	e027883a 	mov	r19,fp
1000e6d0:	80a0703a 	and	r16,r16,r2
1000e6d4:	902d883a 	mov	r22,r18
1000e6d8:	003f1706 	br	1000e338 <__alt_data_end+0xf800e338>
1000e6dc:	00800434 	movhi	r2,16
1000e6e0:	84000234 	orhi	r16,r16,8
1000e6e4:	10bfffc4 	addi	r2,r2,-1
1000e6e8:	80a0703a 	and	r16,r16,r2
1000e6ec:	003f1206 	br	1000e338 <__alt_data_end+0xf800e338>
1000e6f0:	147ff604 	addi	r17,r2,-40
1000e6f4:	3462983a 	sll	r17,r6,r17
1000e6f8:	0025883a 	mov	r18,zero
1000e6fc:	003ef306 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e700:	3009883a 	mov	r4,r6
1000e704:	d9400215 	stw	r5,8(sp)
1000e708:	d9800715 	stw	r6,28(sp)
1000e70c:	da400415 	stw	r9,16(sp)
1000e710:	da800315 	stw	r10,12(sp)
1000e714:	000f3880 	call	1000f388 <__clzsi2>
1000e718:	10800804 	addi	r2,r2,32
1000e71c:	da800317 	ldw	r10,12(sp)
1000e720:	da400417 	ldw	r9,16(sp)
1000e724:	d9800717 	ldw	r6,28(sp)
1000e728:	d9400217 	ldw	r5,8(sp)
1000e72c:	003edd06 	br	1000e2a4 <__alt_data_end+0xf800e2a4>
1000e730:	143ff604 	addi	r16,r2,-40
1000e734:	ac20983a 	sll	r16,r21,r16
1000e738:	002d883a 	mov	r22,zero
1000e73c:	003ec106 	br	1000e244 <__alt_data_end+0xf800e244>
1000e740:	d9800715 	stw	r6,28(sp)
1000e744:	d9c00215 	stw	r7,8(sp)
1000e748:	da400415 	stw	r9,16(sp)
1000e74c:	000f3880 	call	1000f388 <__clzsi2>
1000e750:	10800804 	addi	r2,r2,32
1000e754:	da400417 	ldw	r9,16(sp)
1000e758:	d9c00217 	ldw	r7,8(sp)
1000e75c:	d9800717 	ldw	r6,28(sp)
1000e760:	003eae06 	br	1000e21c <__alt_data_end+0xf800e21c>
1000e764:	00c00044 	movi	r3,1
1000e768:	1887c83a 	sub	r3,r3,r2
1000e76c:	01000e04 	movi	r4,56
1000e770:	20fe8516 	blt	r4,r3,1000e188 <__alt_data_end+0xf800e188>
1000e774:	010007c4 	movi	r4,31
1000e778:	20c01b16 	blt	r4,r3,1000e7e8 <__muldf3+0x7cc>
1000e77c:	00800804 	movi	r2,32
1000e780:	10c5c83a 	sub	r2,r2,r3
1000e784:	888a983a 	sll	r5,r17,r2
1000e788:	90c8d83a 	srl	r4,r18,r3
1000e78c:	9084983a 	sll	r2,r18,r2
1000e790:	88e2d83a 	srl	r17,r17,r3
1000e794:	2906b03a 	or	r3,r5,r4
1000e798:	1004c03a 	cmpne	r2,r2,zero
1000e79c:	1886b03a 	or	r3,r3,r2
1000e7a0:	188001cc 	andi	r2,r3,7
1000e7a4:	10000726 	beq	r2,zero,1000e7c4 <__muldf3+0x7a8>
1000e7a8:	188003cc 	andi	r2,r3,15
1000e7ac:	01000104 	movi	r4,4
1000e7b0:	11000426 	beq	r2,r4,1000e7c4 <__muldf3+0x7a8>
1000e7b4:	1805883a 	mov	r2,r3
1000e7b8:	10c00104 	addi	r3,r2,4
1000e7bc:	1885803a 	cmpltu	r2,r3,r2
1000e7c0:	88a3883a 	add	r17,r17,r2
1000e7c4:	8880202c 	andhi	r2,r17,128
1000e7c8:	10001c26 	beq	r2,zero,1000e83c <__muldf3+0x820>
1000e7cc:	3027883a 	mov	r19,r6
1000e7d0:	00800044 	movi	r2,1
1000e7d4:	0021883a 	mov	r16,zero
1000e7d8:	002d883a 	mov	r22,zero
1000e7dc:	003e6e06 	br	1000e198 <__alt_data_end+0xf800e198>
1000e7e0:	4007883a 	mov	r3,r8
1000e7e4:	003f9706 	br	1000e644 <__alt_data_end+0xf800e644>
1000e7e8:	017ff844 	movi	r5,-31
1000e7ec:	2885c83a 	sub	r2,r5,r2
1000e7f0:	888ad83a 	srl	r5,r17,r2
1000e7f4:	00800804 	movi	r2,32
1000e7f8:	18801a26 	beq	r3,r2,1000e864 <__muldf3+0x848>
1000e7fc:	01001004 	movi	r4,64
1000e800:	20c7c83a 	sub	r3,r4,r3
1000e804:	88e2983a 	sll	r17,r17,r3
1000e808:	8ca4b03a 	or	r18,r17,r18
1000e80c:	9004c03a 	cmpne	r2,r18,zero
1000e810:	2884b03a 	or	r2,r5,r2
1000e814:	144001cc 	andi	r17,r2,7
1000e818:	88000d1e 	bne	r17,zero,1000e850 <__muldf3+0x834>
1000e81c:	0021883a 	mov	r16,zero
1000e820:	102cd0fa 	srli	r22,r2,3
1000e824:	3027883a 	mov	r19,r6
1000e828:	0005883a 	mov	r2,zero
1000e82c:	b46cb03a 	or	r22,r22,r17
1000e830:	003e5906 	br	1000e198 <__alt_data_end+0xf800e198>
1000e834:	1007883a 	mov	r3,r2
1000e838:	0023883a 	mov	r17,zero
1000e83c:	8820927a 	slli	r16,r17,9
1000e840:	1805883a 	mov	r2,r3
1000e844:	8822977a 	slli	r17,r17,29
1000e848:	8020d33a 	srli	r16,r16,12
1000e84c:	003ff406 	br	1000e820 <__alt_data_end+0xf800e820>
1000e850:	10c003cc 	andi	r3,r2,15
1000e854:	01000104 	movi	r4,4
1000e858:	193ff626 	beq	r3,r4,1000e834 <__alt_data_end+0xf800e834>
1000e85c:	0023883a 	mov	r17,zero
1000e860:	003fd506 	br	1000e7b8 <__alt_data_end+0xf800e7b8>
1000e864:	0023883a 	mov	r17,zero
1000e868:	003fe706 	br	1000e808 <__alt_data_end+0xf800e808>
1000e86c:	00800434 	movhi	r2,16
1000e870:	8c000234 	orhi	r16,r17,8
1000e874:	10bfffc4 	addi	r2,r2,-1
1000e878:	3027883a 	mov	r19,r6
1000e87c:	80a0703a 	and	r16,r16,r2
1000e880:	902d883a 	mov	r22,r18
1000e884:	003eac06 	br	1000e338 <__alt_data_end+0xf800e338>

1000e888 <__subdf3>:
1000e888:	02000434 	movhi	r8,16
1000e88c:	423fffc4 	addi	r8,r8,-1
1000e890:	defffb04 	addi	sp,sp,-20
1000e894:	2a14703a 	and	r10,r5,r8
1000e898:	3812d53a 	srli	r9,r7,20
1000e89c:	3a10703a 	and	r8,r7,r8
1000e8a0:	2006d77a 	srli	r3,r4,29
1000e8a4:	3004d77a 	srli	r2,r6,29
1000e8a8:	dc000015 	stw	r16,0(sp)
1000e8ac:	501490fa 	slli	r10,r10,3
1000e8b0:	2820d53a 	srli	r16,r5,20
1000e8b4:	401090fa 	slli	r8,r8,3
1000e8b8:	dc800215 	stw	r18,8(sp)
1000e8bc:	dc400115 	stw	r17,4(sp)
1000e8c0:	dfc00415 	stw	ra,16(sp)
1000e8c4:	202290fa 	slli	r17,r4,3
1000e8c8:	dcc00315 	stw	r19,12(sp)
1000e8cc:	4a41ffcc 	andi	r9,r9,2047
1000e8d0:	0101ffc4 	movi	r4,2047
1000e8d4:	2824d7fa 	srli	r18,r5,31
1000e8d8:	8401ffcc 	andi	r16,r16,2047
1000e8dc:	50c6b03a 	or	r3,r10,r3
1000e8e0:	380ed7fa 	srli	r7,r7,31
1000e8e4:	408ab03a 	or	r5,r8,r2
1000e8e8:	300c90fa 	slli	r6,r6,3
1000e8ec:	49009626 	beq	r9,r4,1000eb48 <__subdf3+0x2c0>
1000e8f0:	39c0005c 	xori	r7,r7,1
1000e8f4:	8245c83a 	sub	r2,r16,r9
1000e8f8:	3c807426 	beq	r7,r18,1000eacc <__subdf3+0x244>
1000e8fc:	0080af0e 	bge	zero,r2,1000ebbc <__subdf3+0x334>
1000e900:	48002a1e 	bne	r9,zero,1000e9ac <__subdf3+0x124>
1000e904:	2988b03a 	or	r4,r5,r6
1000e908:	20009a1e 	bne	r4,zero,1000eb74 <__subdf3+0x2ec>
1000e90c:	888001cc 	andi	r2,r17,7
1000e910:	10000726 	beq	r2,zero,1000e930 <__subdf3+0xa8>
1000e914:	888003cc 	andi	r2,r17,15
1000e918:	01000104 	movi	r4,4
1000e91c:	11000426 	beq	r2,r4,1000e930 <__subdf3+0xa8>
1000e920:	890b883a 	add	r5,r17,r4
1000e924:	2c63803a 	cmpltu	r17,r5,r17
1000e928:	1c47883a 	add	r3,r3,r17
1000e92c:	2823883a 	mov	r17,r5
1000e930:	1880202c 	andhi	r2,r3,128
1000e934:	10005926 	beq	r2,zero,1000ea9c <__subdf3+0x214>
1000e938:	84000044 	addi	r16,r16,1
1000e93c:	0081ffc4 	movi	r2,2047
1000e940:	8080be26 	beq	r16,r2,1000ec3c <__subdf3+0x3b4>
1000e944:	017fe034 	movhi	r5,65408
1000e948:	297fffc4 	addi	r5,r5,-1
1000e94c:	1946703a 	and	r3,r3,r5
1000e950:	1804977a 	slli	r2,r3,29
1000e954:	1806927a 	slli	r3,r3,9
1000e958:	8822d0fa 	srli	r17,r17,3
1000e95c:	8401ffcc 	andi	r16,r16,2047
1000e960:	180ad33a 	srli	r5,r3,12
1000e964:	9100004c 	andi	r4,r18,1
1000e968:	1444b03a 	or	r2,r2,r17
1000e96c:	80c1ffcc 	andi	r3,r16,2047
1000e970:	1820953a 	slli	r16,r3,20
1000e974:	20c03fcc 	andi	r3,r4,255
1000e978:	180897fa 	slli	r4,r3,31
1000e97c:	00c00434 	movhi	r3,16
1000e980:	18ffffc4 	addi	r3,r3,-1
1000e984:	28c6703a 	and	r3,r5,r3
1000e988:	1c06b03a 	or	r3,r3,r16
1000e98c:	1906b03a 	or	r3,r3,r4
1000e990:	dfc00417 	ldw	ra,16(sp)
1000e994:	dcc00317 	ldw	r19,12(sp)
1000e998:	dc800217 	ldw	r18,8(sp)
1000e99c:	dc400117 	ldw	r17,4(sp)
1000e9a0:	dc000017 	ldw	r16,0(sp)
1000e9a4:	dec00504 	addi	sp,sp,20
1000e9a8:	f800283a 	ret
1000e9ac:	0101ffc4 	movi	r4,2047
1000e9b0:	813fd626 	beq	r16,r4,1000e90c <__alt_data_end+0xf800e90c>
1000e9b4:	29402034 	orhi	r5,r5,128
1000e9b8:	01000e04 	movi	r4,56
1000e9bc:	2080a316 	blt	r4,r2,1000ec4c <__subdf3+0x3c4>
1000e9c0:	010007c4 	movi	r4,31
1000e9c4:	2080c616 	blt	r4,r2,1000ece0 <__subdf3+0x458>
1000e9c8:	01000804 	movi	r4,32
1000e9cc:	2089c83a 	sub	r4,r4,r2
1000e9d0:	2910983a 	sll	r8,r5,r4
1000e9d4:	308ed83a 	srl	r7,r6,r2
1000e9d8:	3108983a 	sll	r4,r6,r4
1000e9dc:	2884d83a 	srl	r2,r5,r2
1000e9e0:	41ccb03a 	or	r6,r8,r7
1000e9e4:	2008c03a 	cmpne	r4,r4,zero
1000e9e8:	310cb03a 	or	r6,r6,r4
1000e9ec:	898dc83a 	sub	r6,r17,r6
1000e9f0:	89a3803a 	cmpltu	r17,r17,r6
1000e9f4:	1887c83a 	sub	r3,r3,r2
1000e9f8:	1c47c83a 	sub	r3,r3,r17
1000e9fc:	3023883a 	mov	r17,r6
1000ea00:	1880202c 	andhi	r2,r3,128
1000ea04:	10002326 	beq	r2,zero,1000ea94 <__subdf3+0x20c>
1000ea08:	04c02034 	movhi	r19,128
1000ea0c:	9cffffc4 	addi	r19,r19,-1
1000ea10:	1ce6703a 	and	r19,r3,r19
1000ea14:	98007a26 	beq	r19,zero,1000ec00 <__subdf3+0x378>
1000ea18:	9809883a 	mov	r4,r19
1000ea1c:	000f3880 	call	1000f388 <__clzsi2>
1000ea20:	113ffe04 	addi	r4,r2,-8
1000ea24:	00c007c4 	movi	r3,31
1000ea28:	19007b16 	blt	r3,r4,1000ec18 <__subdf3+0x390>
1000ea2c:	00800804 	movi	r2,32
1000ea30:	1105c83a 	sub	r2,r2,r4
1000ea34:	8884d83a 	srl	r2,r17,r2
1000ea38:	9906983a 	sll	r3,r19,r4
1000ea3c:	8922983a 	sll	r17,r17,r4
1000ea40:	10c4b03a 	or	r2,r2,r3
1000ea44:	24007816 	blt	r4,r16,1000ec28 <__subdf3+0x3a0>
1000ea48:	2421c83a 	sub	r16,r4,r16
1000ea4c:	80c00044 	addi	r3,r16,1
1000ea50:	010007c4 	movi	r4,31
1000ea54:	20c09516 	blt	r4,r3,1000ecac <__subdf3+0x424>
1000ea58:	01400804 	movi	r5,32
1000ea5c:	28cbc83a 	sub	r5,r5,r3
1000ea60:	88c8d83a 	srl	r4,r17,r3
1000ea64:	8962983a 	sll	r17,r17,r5
1000ea68:	114a983a 	sll	r5,r2,r5
1000ea6c:	10c6d83a 	srl	r3,r2,r3
1000ea70:	8804c03a 	cmpne	r2,r17,zero
1000ea74:	290ab03a 	or	r5,r5,r4
1000ea78:	28a2b03a 	or	r17,r5,r2
1000ea7c:	0021883a 	mov	r16,zero
1000ea80:	003fa206 	br	1000e90c <__alt_data_end+0xf800e90c>
1000ea84:	2090b03a 	or	r8,r4,r2
1000ea88:	40018e26 	beq	r8,zero,1000f0c4 <__subdf3+0x83c>
1000ea8c:	1007883a 	mov	r3,r2
1000ea90:	2023883a 	mov	r17,r4
1000ea94:	888001cc 	andi	r2,r17,7
1000ea98:	103f9e1e 	bne	r2,zero,1000e914 <__alt_data_end+0xf800e914>
1000ea9c:	1804977a 	slli	r2,r3,29
1000eaa0:	8822d0fa 	srli	r17,r17,3
1000eaa4:	1810d0fa 	srli	r8,r3,3
1000eaa8:	9100004c 	andi	r4,r18,1
1000eaac:	1444b03a 	or	r2,r2,r17
1000eab0:	00c1ffc4 	movi	r3,2047
1000eab4:	80c02826 	beq	r16,r3,1000eb58 <__subdf3+0x2d0>
1000eab8:	01400434 	movhi	r5,16
1000eabc:	297fffc4 	addi	r5,r5,-1
1000eac0:	80e0703a 	and	r16,r16,r3
1000eac4:	414a703a 	and	r5,r8,r5
1000eac8:	003fa806 	br	1000e96c <__alt_data_end+0xf800e96c>
1000eacc:	0080630e 	bge	zero,r2,1000ec5c <__subdf3+0x3d4>
1000ead0:	48003026 	beq	r9,zero,1000eb94 <__subdf3+0x30c>
1000ead4:	0101ffc4 	movi	r4,2047
1000ead8:	813f8c26 	beq	r16,r4,1000e90c <__alt_data_end+0xf800e90c>
1000eadc:	29402034 	orhi	r5,r5,128
1000eae0:	01000e04 	movi	r4,56
1000eae4:	2080a90e 	bge	r4,r2,1000ed8c <__subdf3+0x504>
1000eae8:	298cb03a 	or	r6,r5,r6
1000eaec:	3012c03a 	cmpne	r9,r6,zero
1000eaf0:	0005883a 	mov	r2,zero
1000eaf4:	4c53883a 	add	r9,r9,r17
1000eaf8:	4c63803a 	cmpltu	r17,r9,r17
1000eafc:	10c7883a 	add	r3,r2,r3
1000eb00:	88c7883a 	add	r3,r17,r3
1000eb04:	4823883a 	mov	r17,r9
1000eb08:	1880202c 	andhi	r2,r3,128
1000eb0c:	1000d026 	beq	r2,zero,1000ee50 <__subdf3+0x5c8>
1000eb10:	84000044 	addi	r16,r16,1
1000eb14:	0081ffc4 	movi	r2,2047
1000eb18:	8080fe26 	beq	r16,r2,1000ef14 <__subdf3+0x68c>
1000eb1c:	00bfe034 	movhi	r2,65408
1000eb20:	10bfffc4 	addi	r2,r2,-1
1000eb24:	1886703a 	and	r3,r3,r2
1000eb28:	880ad07a 	srli	r5,r17,1
1000eb2c:	180497fa 	slli	r2,r3,31
1000eb30:	8900004c 	andi	r4,r17,1
1000eb34:	2922b03a 	or	r17,r5,r4
1000eb38:	1806d07a 	srli	r3,r3,1
1000eb3c:	1462b03a 	or	r17,r2,r17
1000eb40:	3825883a 	mov	r18,r7
1000eb44:	003f7106 	br	1000e90c <__alt_data_end+0xf800e90c>
1000eb48:	2984b03a 	or	r2,r5,r6
1000eb4c:	103f6826 	beq	r2,zero,1000e8f0 <__alt_data_end+0xf800e8f0>
1000eb50:	39c03fcc 	andi	r7,r7,255
1000eb54:	003f6706 	br	1000e8f4 <__alt_data_end+0xf800e8f4>
1000eb58:	4086b03a 	or	r3,r8,r2
1000eb5c:	18015226 	beq	r3,zero,1000f0a8 <__subdf3+0x820>
1000eb60:	00c00434 	movhi	r3,16
1000eb64:	41400234 	orhi	r5,r8,8
1000eb68:	18ffffc4 	addi	r3,r3,-1
1000eb6c:	28ca703a 	and	r5,r5,r3
1000eb70:	003f7e06 	br	1000e96c <__alt_data_end+0xf800e96c>
1000eb74:	10bfffc4 	addi	r2,r2,-1
1000eb78:	1000491e 	bne	r2,zero,1000eca0 <__subdf3+0x418>
1000eb7c:	898fc83a 	sub	r7,r17,r6
1000eb80:	89e3803a 	cmpltu	r17,r17,r7
1000eb84:	1947c83a 	sub	r3,r3,r5
1000eb88:	1c47c83a 	sub	r3,r3,r17
1000eb8c:	3823883a 	mov	r17,r7
1000eb90:	003f9b06 	br	1000ea00 <__alt_data_end+0xf800ea00>
1000eb94:	2988b03a 	or	r4,r5,r6
1000eb98:	203f5c26 	beq	r4,zero,1000e90c <__alt_data_end+0xf800e90c>
1000eb9c:	10bfffc4 	addi	r2,r2,-1
1000eba0:	1000931e 	bne	r2,zero,1000edf0 <__subdf3+0x568>
1000eba4:	898d883a 	add	r6,r17,r6
1000eba8:	3463803a 	cmpltu	r17,r6,r17
1000ebac:	1947883a 	add	r3,r3,r5
1000ebb0:	88c7883a 	add	r3,r17,r3
1000ebb4:	3023883a 	mov	r17,r6
1000ebb8:	003fd306 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000ebbc:	1000541e 	bne	r2,zero,1000ed10 <__subdf3+0x488>
1000ebc0:	80800044 	addi	r2,r16,1
1000ebc4:	1081ffcc 	andi	r2,r2,2047
1000ebc8:	01000044 	movi	r4,1
1000ebcc:	2080a20e 	bge	r4,r2,1000ee58 <__subdf3+0x5d0>
1000ebd0:	8989c83a 	sub	r4,r17,r6
1000ebd4:	8905803a 	cmpltu	r2,r17,r4
1000ebd8:	1967c83a 	sub	r19,r3,r5
1000ebdc:	98a7c83a 	sub	r19,r19,r2
1000ebe0:	9880202c 	andhi	r2,r19,128
1000ebe4:	10006326 	beq	r2,zero,1000ed74 <__subdf3+0x4ec>
1000ebe8:	3463c83a 	sub	r17,r6,r17
1000ebec:	28c7c83a 	sub	r3,r5,r3
1000ebf0:	344d803a 	cmpltu	r6,r6,r17
1000ebf4:	19a7c83a 	sub	r19,r3,r6
1000ebf8:	3825883a 	mov	r18,r7
1000ebfc:	983f861e 	bne	r19,zero,1000ea18 <__alt_data_end+0xf800ea18>
1000ec00:	8809883a 	mov	r4,r17
1000ec04:	000f3880 	call	1000f388 <__clzsi2>
1000ec08:	10800804 	addi	r2,r2,32
1000ec0c:	113ffe04 	addi	r4,r2,-8
1000ec10:	00c007c4 	movi	r3,31
1000ec14:	193f850e 	bge	r3,r4,1000ea2c <__alt_data_end+0xf800ea2c>
1000ec18:	10bff604 	addi	r2,r2,-40
1000ec1c:	8884983a 	sll	r2,r17,r2
1000ec20:	0023883a 	mov	r17,zero
1000ec24:	243f880e 	bge	r4,r16,1000ea48 <__alt_data_end+0xf800ea48>
1000ec28:	00ffe034 	movhi	r3,65408
1000ec2c:	18ffffc4 	addi	r3,r3,-1
1000ec30:	8121c83a 	sub	r16,r16,r4
1000ec34:	10c6703a 	and	r3,r2,r3
1000ec38:	003f3406 	br	1000e90c <__alt_data_end+0xf800e90c>
1000ec3c:	9100004c 	andi	r4,r18,1
1000ec40:	000b883a 	mov	r5,zero
1000ec44:	0005883a 	mov	r2,zero
1000ec48:	003f4806 	br	1000e96c <__alt_data_end+0xf800e96c>
1000ec4c:	298cb03a 	or	r6,r5,r6
1000ec50:	300cc03a 	cmpne	r6,r6,zero
1000ec54:	0005883a 	mov	r2,zero
1000ec58:	003f6406 	br	1000e9ec <__alt_data_end+0xf800e9ec>
1000ec5c:	10009a1e 	bne	r2,zero,1000eec8 <__subdf3+0x640>
1000ec60:	82400044 	addi	r9,r16,1
1000ec64:	4881ffcc 	andi	r2,r9,2047
1000ec68:	02800044 	movi	r10,1
1000ec6c:	5080670e 	bge	r10,r2,1000ee0c <__subdf3+0x584>
1000ec70:	0081ffc4 	movi	r2,2047
1000ec74:	4880af26 	beq	r9,r2,1000ef34 <__subdf3+0x6ac>
1000ec78:	898d883a 	add	r6,r17,r6
1000ec7c:	1945883a 	add	r2,r3,r5
1000ec80:	3447803a 	cmpltu	r3,r6,r17
1000ec84:	1887883a 	add	r3,r3,r2
1000ec88:	182297fa 	slli	r17,r3,31
1000ec8c:	300cd07a 	srli	r6,r6,1
1000ec90:	1806d07a 	srli	r3,r3,1
1000ec94:	4821883a 	mov	r16,r9
1000ec98:	89a2b03a 	or	r17,r17,r6
1000ec9c:	003f1b06 	br	1000e90c <__alt_data_end+0xf800e90c>
1000eca0:	0101ffc4 	movi	r4,2047
1000eca4:	813f441e 	bne	r16,r4,1000e9b8 <__alt_data_end+0xf800e9b8>
1000eca8:	003f1806 	br	1000e90c <__alt_data_end+0xf800e90c>
1000ecac:	843ff844 	addi	r16,r16,-31
1000ecb0:	01400804 	movi	r5,32
1000ecb4:	1408d83a 	srl	r4,r2,r16
1000ecb8:	19405026 	beq	r3,r5,1000edfc <__subdf3+0x574>
1000ecbc:	01401004 	movi	r5,64
1000ecc0:	28c7c83a 	sub	r3,r5,r3
1000ecc4:	10c4983a 	sll	r2,r2,r3
1000ecc8:	88a2b03a 	or	r17,r17,r2
1000eccc:	8822c03a 	cmpne	r17,r17,zero
1000ecd0:	2462b03a 	or	r17,r4,r17
1000ecd4:	0007883a 	mov	r3,zero
1000ecd8:	0021883a 	mov	r16,zero
1000ecdc:	003f6d06 	br	1000ea94 <__alt_data_end+0xf800ea94>
1000ece0:	11fff804 	addi	r7,r2,-32
1000ece4:	01000804 	movi	r4,32
1000ece8:	29ced83a 	srl	r7,r5,r7
1000ecec:	11004526 	beq	r2,r4,1000ee04 <__subdf3+0x57c>
1000ecf0:	01001004 	movi	r4,64
1000ecf4:	2089c83a 	sub	r4,r4,r2
1000ecf8:	2904983a 	sll	r2,r5,r4
1000ecfc:	118cb03a 	or	r6,r2,r6
1000ed00:	300cc03a 	cmpne	r6,r6,zero
1000ed04:	398cb03a 	or	r6,r7,r6
1000ed08:	0005883a 	mov	r2,zero
1000ed0c:	003f3706 	br	1000e9ec <__alt_data_end+0xf800e9ec>
1000ed10:	80002a26 	beq	r16,zero,1000edbc <__subdf3+0x534>
1000ed14:	0101ffc4 	movi	r4,2047
1000ed18:	49006626 	beq	r9,r4,1000eeb4 <__subdf3+0x62c>
1000ed1c:	0085c83a 	sub	r2,zero,r2
1000ed20:	18c02034 	orhi	r3,r3,128
1000ed24:	01000e04 	movi	r4,56
1000ed28:	20807e16 	blt	r4,r2,1000ef24 <__subdf3+0x69c>
1000ed2c:	010007c4 	movi	r4,31
1000ed30:	2080e716 	blt	r4,r2,1000f0d0 <__subdf3+0x848>
1000ed34:	01000804 	movi	r4,32
1000ed38:	2089c83a 	sub	r4,r4,r2
1000ed3c:	1914983a 	sll	r10,r3,r4
1000ed40:	8890d83a 	srl	r8,r17,r2
1000ed44:	8908983a 	sll	r4,r17,r4
1000ed48:	1884d83a 	srl	r2,r3,r2
1000ed4c:	5222b03a 	or	r17,r10,r8
1000ed50:	2006c03a 	cmpne	r3,r4,zero
1000ed54:	88e2b03a 	or	r17,r17,r3
1000ed58:	3463c83a 	sub	r17,r6,r17
1000ed5c:	2885c83a 	sub	r2,r5,r2
1000ed60:	344d803a 	cmpltu	r6,r6,r17
1000ed64:	1187c83a 	sub	r3,r2,r6
1000ed68:	4821883a 	mov	r16,r9
1000ed6c:	3825883a 	mov	r18,r7
1000ed70:	003f2306 	br	1000ea00 <__alt_data_end+0xf800ea00>
1000ed74:	24d0b03a 	or	r8,r4,r19
1000ed78:	40001b1e 	bne	r8,zero,1000ede8 <__subdf3+0x560>
1000ed7c:	0005883a 	mov	r2,zero
1000ed80:	0009883a 	mov	r4,zero
1000ed84:	0021883a 	mov	r16,zero
1000ed88:	003f4906 	br	1000eab0 <__alt_data_end+0xf800eab0>
1000ed8c:	010007c4 	movi	r4,31
1000ed90:	20803a16 	blt	r4,r2,1000ee7c <__subdf3+0x5f4>
1000ed94:	01000804 	movi	r4,32
1000ed98:	2089c83a 	sub	r4,r4,r2
1000ed9c:	2912983a 	sll	r9,r5,r4
1000eda0:	3090d83a 	srl	r8,r6,r2
1000eda4:	3108983a 	sll	r4,r6,r4
1000eda8:	2884d83a 	srl	r2,r5,r2
1000edac:	4a12b03a 	or	r9,r9,r8
1000edb0:	2008c03a 	cmpne	r4,r4,zero
1000edb4:	4912b03a 	or	r9,r9,r4
1000edb8:	003f4e06 	br	1000eaf4 <__alt_data_end+0xf800eaf4>
1000edbc:	1c48b03a 	or	r4,r3,r17
1000edc0:	20003c26 	beq	r4,zero,1000eeb4 <__subdf3+0x62c>
1000edc4:	0084303a 	nor	r2,zero,r2
1000edc8:	1000381e 	bne	r2,zero,1000eeac <__subdf3+0x624>
1000edcc:	3463c83a 	sub	r17,r6,r17
1000edd0:	28c5c83a 	sub	r2,r5,r3
1000edd4:	344d803a 	cmpltu	r6,r6,r17
1000edd8:	1187c83a 	sub	r3,r2,r6
1000eddc:	4821883a 	mov	r16,r9
1000ede0:	3825883a 	mov	r18,r7
1000ede4:	003f0606 	br	1000ea00 <__alt_data_end+0xf800ea00>
1000ede8:	2023883a 	mov	r17,r4
1000edec:	003f0906 	br	1000ea14 <__alt_data_end+0xf800ea14>
1000edf0:	0101ffc4 	movi	r4,2047
1000edf4:	813f3a1e 	bne	r16,r4,1000eae0 <__alt_data_end+0xf800eae0>
1000edf8:	003ec406 	br	1000e90c <__alt_data_end+0xf800e90c>
1000edfc:	0005883a 	mov	r2,zero
1000ee00:	003fb106 	br	1000ecc8 <__alt_data_end+0xf800ecc8>
1000ee04:	0005883a 	mov	r2,zero
1000ee08:	003fbc06 	br	1000ecfc <__alt_data_end+0xf800ecfc>
1000ee0c:	1c44b03a 	or	r2,r3,r17
1000ee10:	80008e1e 	bne	r16,zero,1000f04c <__subdf3+0x7c4>
1000ee14:	1000c826 	beq	r2,zero,1000f138 <__subdf3+0x8b0>
1000ee18:	2984b03a 	or	r2,r5,r6
1000ee1c:	103ebb26 	beq	r2,zero,1000e90c <__alt_data_end+0xf800e90c>
1000ee20:	8989883a 	add	r4,r17,r6
1000ee24:	1945883a 	add	r2,r3,r5
1000ee28:	2447803a 	cmpltu	r3,r4,r17
1000ee2c:	1887883a 	add	r3,r3,r2
1000ee30:	1880202c 	andhi	r2,r3,128
1000ee34:	2023883a 	mov	r17,r4
1000ee38:	103f1626 	beq	r2,zero,1000ea94 <__alt_data_end+0xf800ea94>
1000ee3c:	00bfe034 	movhi	r2,65408
1000ee40:	10bfffc4 	addi	r2,r2,-1
1000ee44:	5021883a 	mov	r16,r10
1000ee48:	1886703a 	and	r3,r3,r2
1000ee4c:	003eaf06 	br	1000e90c <__alt_data_end+0xf800e90c>
1000ee50:	3825883a 	mov	r18,r7
1000ee54:	003f0f06 	br	1000ea94 <__alt_data_end+0xf800ea94>
1000ee58:	1c44b03a 	or	r2,r3,r17
1000ee5c:	8000251e 	bne	r16,zero,1000eef4 <__subdf3+0x66c>
1000ee60:	1000661e 	bne	r2,zero,1000effc <__subdf3+0x774>
1000ee64:	2990b03a 	or	r8,r5,r6
1000ee68:	40009626 	beq	r8,zero,1000f0c4 <__subdf3+0x83c>
1000ee6c:	2807883a 	mov	r3,r5
1000ee70:	3023883a 	mov	r17,r6
1000ee74:	3825883a 	mov	r18,r7
1000ee78:	003ea406 	br	1000e90c <__alt_data_end+0xf800e90c>
1000ee7c:	127ff804 	addi	r9,r2,-32
1000ee80:	01000804 	movi	r4,32
1000ee84:	2a52d83a 	srl	r9,r5,r9
1000ee88:	11008c26 	beq	r2,r4,1000f0bc <__subdf3+0x834>
1000ee8c:	01001004 	movi	r4,64
1000ee90:	2085c83a 	sub	r2,r4,r2
1000ee94:	2884983a 	sll	r2,r5,r2
1000ee98:	118cb03a 	or	r6,r2,r6
1000ee9c:	300cc03a 	cmpne	r6,r6,zero
1000eea0:	4992b03a 	or	r9,r9,r6
1000eea4:	0005883a 	mov	r2,zero
1000eea8:	003f1206 	br	1000eaf4 <__alt_data_end+0xf800eaf4>
1000eeac:	0101ffc4 	movi	r4,2047
1000eeb0:	493f9c1e 	bne	r9,r4,1000ed24 <__alt_data_end+0xf800ed24>
1000eeb4:	2807883a 	mov	r3,r5
1000eeb8:	3023883a 	mov	r17,r6
1000eebc:	4821883a 	mov	r16,r9
1000eec0:	3825883a 	mov	r18,r7
1000eec4:	003e9106 	br	1000e90c <__alt_data_end+0xf800e90c>
1000eec8:	80001f1e 	bne	r16,zero,1000ef48 <__subdf3+0x6c0>
1000eecc:	1c48b03a 	or	r4,r3,r17
1000eed0:	20005a26 	beq	r4,zero,1000f03c <__subdf3+0x7b4>
1000eed4:	0084303a 	nor	r2,zero,r2
1000eed8:	1000561e 	bne	r2,zero,1000f034 <__subdf3+0x7ac>
1000eedc:	89a3883a 	add	r17,r17,r6
1000eee0:	1945883a 	add	r2,r3,r5
1000eee4:	898d803a 	cmpltu	r6,r17,r6
1000eee8:	3087883a 	add	r3,r6,r2
1000eeec:	4821883a 	mov	r16,r9
1000eef0:	003f0506 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000eef4:	10002b1e 	bne	r2,zero,1000efa4 <__subdf3+0x71c>
1000eef8:	2984b03a 	or	r2,r5,r6
1000eefc:	10008026 	beq	r2,zero,1000f100 <__subdf3+0x878>
1000ef00:	2807883a 	mov	r3,r5
1000ef04:	3023883a 	mov	r17,r6
1000ef08:	3825883a 	mov	r18,r7
1000ef0c:	0401ffc4 	movi	r16,2047
1000ef10:	003e7e06 	br	1000e90c <__alt_data_end+0xf800e90c>
1000ef14:	3809883a 	mov	r4,r7
1000ef18:	0011883a 	mov	r8,zero
1000ef1c:	0005883a 	mov	r2,zero
1000ef20:	003ee306 	br	1000eab0 <__alt_data_end+0xf800eab0>
1000ef24:	1c62b03a 	or	r17,r3,r17
1000ef28:	8822c03a 	cmpne	r17,r17,zero
1000ef2c:	0005883a 	mov	r2,zero
1000ef30:	003f8906 	br	1000ed58 <__alt_data_end+0xf800ed58>
1000ef34:	3809883a 	mov	r4,r7
1000ef38:	4821883a 	mov	r16,r9
1000ef3c:	0011883a 	mov	r8,zero
1000ef40:	0005883a 	mov	r2,zero
1000ef44:	003eda06 	br	1000eab0 <__alt_data_end+0xf800eab0>
1000ef48:	0101ffc4 	movi	r4,2047
1000ef4c:	49003b26 	beq	r9,r4,1000f03c <__subdf3+0x7b4>
1000ef50:	0085c83a 	sub	r2,zero,r2
1000ef54:	18c02034 	orhi	r3,r3,128
1000ef58:	01000e04 	movi	r4,56
1000ef5c:	20806e16 	blt	r4,r2,1000f118 <__subdf3+0x890>
1000ef60:	010007c4 	movi	r4,31
1000ef64:	20807716 	blt	r4,r2,1000f144 <__subdf3+0x8bc>
1000ef68:	01000804 	movi	r4,32
1000ef6c:	2089c83a 	sub	r4,r4,r2
1000ef70:	1914983a 	sll	r10,r3,r4
1000ef74:	8890d83a 	srl	r8,r17,r2
1000ef78:	8908983a 	sll	r4,r17,r4
1000ef7c:	1884d83a 	srl	r2,r3,r2
1000ef80:	5222b03a 	or	r17,r10,r8
1000ef84:	2006c03a 	cmpne	r3,r4,zero
1000ef88:	88e2b03a 	or	r17,r17,r3
1000ef8c:	89a3883a 	add	r17,r17,r6
1000ef90:	1145883a 	add	r2,r2,r5
1000ef94:	898d803a 	cmpltu	r6,r17,r6
1000ef98:	3087883a 	add	r3,r6,r2
1000ef9c:	4821883a 	mov	r16,r9
1000efa0:	003ed906 	br	1000eb08 <__alt_data_end+0xf800eb08>
1000efa4:	2984b03a 	or	r2,r5,r6
1000efa8:	10004226 	beq	r2,zero,1000f0b4 <__subdf3+0x82c>
1000efac:	1808d0fa 	srli	r4,r3,3
1000efb0:	8822d0fa 	srli	r17,r17,3
1000efb4:	1806977a 	slli	r3,r3,29
1000efb8:	2080022c 	andhi	r2,r4,8
1000efbc:	1c62b03a 	or	r17,r3,r17
1000efc0:	10000826 	beq	r2,zero,1000efe4 <__subdf3+0x75c>
1000efc4:	2812d0fa 	srli	r9,r5,3
1000efc8:	4880022c 	andhi	r2,r9,8
1000efcc:	1000051e 	bne	r2,zero,1000efe4 <__subdf3+0x75c>
1000efd0:	300cd0fa 	srli	r6,r6,3
1000efd4:	2804977a 	slli	r2,r5,29
1000efd8:	4809883a 	mov	r4,r9
1000efdc:	3825883a 	mov	r18,r7
1000efe0:	11a2b03a 	or	r17,r2,r6
1000efe4:	8806d77a 	srli	r3,r17,29
1000efe8:	200890fa 	slli	r4,r4,3
1000efec:	882290fa 	slli	r17,r17,3
1000eff0:	0401ffc4 	movi	r16,2047
1000eff4:	1906b03a 	or	r3,r3,r4
1000eff8:	003e4406 	br	1000e90c <__alt_data_end+0xf800e90c>
1000effc:	2984b03a 	or	r2,r5,r6
1000f000:	103e4226 	beq	r2,zero,1000e90c <__alt_data_end+0xf800e90c>
1000f004:	8989c83a 	sub	r4,r17,r6
1000f008:	8911803a 	cmpltu	r8,r17,r4
1000f00c:	1945c83a 	sub	r2,r3,r5
1000f010:	1205c83a 	sub	r2,r2,r8
1000f014:	1200202c 	andhi	r8,r2,128
1000f018:	403e9a26 	beq	r8,zero,1000ea84 <__alt_data_end+0xf800ea84>
1000f01c:	3463c83a 	sub	r17,r6,r17
1000f020:	28c5c83a 	sub	r2,r5,r3
1000f024:	344d803a 	cmpltu	r6,r6,r17
1000f028:	1187c83a 	sub	r3,r2,r6
1000f02c:	3825883a 	mov	r18,r7
1000f030:	003e3606 	br	1000e90c <__alt_data_end+0xf800e90c>
1000f034:	0101ffc4 	movi	r4,2047
1000f038:	493fc71e 	bne	r9,r4,1000ef58 <__alt_data_end+0xf800ef58>
1000f03c:	2807883a 	mov	r3,r5
1000f040:	3023883a 	mov	r17,r6
1000f044:	4821883a 	mov	r16,r9
1000f048:	003e3006 	br	1000e90c <__alt_data_end+0xf800e90c>
1000f04c:	10003626 	beq	r2,zero,1000f128 <__subdf3+0x8a0>
1000f050:	2984b03a 	or	r2,r5,r6
1000f054:	10001726 	beq	r2,zero,1000f0b4 <__subdf3+0x82c>
1000f058:	1808d0fa 	srli	r4,r3,3
1000f05c:	8822d0fa 	srli	r17,r17,3
1000f060:	1806977a 	slli	r3,r3,29
1000f064:	2080022c 	andhi	r2,r4,8
1000f068:	1c62b03a 	or	r17,r3,r17
1000f06c:	10000726 	beq	r2,zero,1000f08c <__subdf3+0x804>
1000f070:	2812d0fa 	srli	r9,r5,3
1000f074:	4880022c 	andhi	r2,r9,8
1000f078:	1000041e 	bne	r2,zero,1000f08c <__subdf3+0x804>
1000f07c:	300cd0fa 	srli	r6,r6,3
1000f080:	2804977a 	slli	r2,r5,29
1000f084:	4809883a 	mov	r4,r9
1000f088:	11a2b03a 	or	r17,r2,r6
1000f08c:	8806d77a 	srli	r3,r17,29
1000f090:	200890fa 	slli	r4,r4,3
1000f094:	882290fa 	slli	r17,r17,3
1000f098:	3825883a 	mov	r18,r7
1000f09c:	1906b03a 	or	r3,r3,r4
1000f0a0:	0401ffc4 	movi	r16,2047
1000f0a4:	003e1906 	br	1000e90c <__alt_data_end+0xf800e90c>
1000f0a8:	000b883a 	mov	r5,zero
1000f0ac:	0005883a 	mov	r2,zero
1000f0b0:	003e2e06 	br	1000e96c <__alt_data_end+0xf800e96c>
1000f0b4:	0401ffc4 	movi	r16,2047
1000f0b8:	003e1406 	br	1000e90c <__alt_data_end+0xf800e90c>
1000f0bc:	0005883a 	mov	r2,zero
1000f0c0:	003f7506 	br	1000ee98 <__alt_data_end+0xf800ee98>
1000f0c4:	0005883a 	mov	r2,zero
1000f0c8:	0009883a 	mov	r4,zero
1000f0cc:	003e7806 	br	1000eab0 <__alt_data_end+0xf800eab0>
1000f0d0:	123ff804 	addi	r8,r2,-32
1000f0d4:	01000804 	movi	r4,32
1000f0d8:	1a10d83a 	srl	r8,r3,r8
1000f0dc:	11002526 	beq	r2,r4,1000f174 <__subdf3+0x8ec>
1000f0e0:	01001004 	movi	r4,64
1000f0e4:	2085c83a 	sub	r2,r4,r2
1000f0e8:	1884983a 	sll	r2,r3,r2
1000f0ec:	1444b03a 	or	r2,r2,r17
1000f0f0:	1004c03a 	cmpne	r2,r2,zero
1000f0f4:	40a2b03a 	or	r17,r8,r2
1000f0f8:	0005883a 	mov	r2,zero
1000f0fc:	003f1606 	br	1000ed58 <__alt_data_end+0xf800ed58>
1000f100:	02000434 	movhi	r8,16
1000f104:	0009883a 	mov	r4,zero
1000f108:	423fffc4 	addi	r8,r8,-1
1000f10c:	00bfffc4 	movi	r2,-1
1000f110:	0401ffc4 	movi	r16,2047
1000f114:	003e6606 	br	1000eab0 <__alt_data_end+0xf800eab0>
1000f118:	1c62b03a 	or	r17,r3,r17
1000f11c:	8822c03a 	cmpne	r17,r17,zero
1000f120:	0005883a 	mov	r2,zero
1000f124:	003f9906 	br	1000ef8c <__alt_data_end+0xf800ef8c>
1000f128:	2807883a 	mov	r3,r5
1000f12c:	3023883a 	mov	r17,r6
1000f130:	0401ffc4 	movi	r16,2047
1000f134:	003df506 	br	1000e90c <__alt_data_end+0xf800e90c>
1000f138:	2807883a 	mov	r3,r5
1000f13c:	3023883a 	mov	r17,r6
1000f140:	003df206 	br	1000e90c <__alt_data_end+0xf800e90c>
1000f144:	123ff804 	addi	r8,r2,-32
1000f148:	01000804 	movi	r4,32
1000f14c:	1a10d83a 	srl	r8,r3,r8
1000f150:	11000a26 	beq	r2,r4,1000f17c <__subdf3+0x8f4>
1000f154:	01001004 	movi	r4,64
1000f158:	2085c83a 	sub	r2,r4,r2
1000f15c:	1884983a 	sll	r2,r3,r2
1000f160:	1444b03a 	or	r2,r2,r17
1000f164:	1004c03a 	cmpne	r2,r2,zero
1000f168:	40a2b03a 	or	r17,r8,r2
1000f16c:	0005883a 	mov	r2,zero
1000f170:	003f8606 	br	1000ef8c <__alt_data_end+0xf800ef8c>
1000f174:	0005883a 	mov	r2,zero
1000f178:	003fdc06 	br	1000f0ec <__alt_data_end+0xf800f0ec>
1000f17c:	0005883a 	mov	r2,zero
1000f180:	003ff706 	br	1000f160 <__alt_data_end+0xf800f160>

1000f184 <__fixdfsi>:
1000f184:	280cd53a 	srli	r6,r5,20
1000f188:	00c00434 	movhi	r3,16
1000f18c:	18ffffc4 	addi	r3,r3,-1
1000f190:	3181ffcc 	andi	r6,r6,2047
1000f194:	01c0ff84 	movi	r7,1022
1000f198:	28c6703a 	and	r3,r5,r3
1000f19c:	280ad7fa 	srli	r5,r5,31
1000f1a0:	3980120e 	bge	r7,r6,1000f1ec <__fixdfsi+0x68>
1000f1a4:	00810744 	movi	r2,1053
1000f1a8:	11800c16 	blt	r2,r6,1000f1dc <__fixdfsi+0x58>
1000f1ac:	00810cc4 	movi	r2,1075
1000f1b0:	1185c83a 	sub	r2,r2,r6
1000f1b4:	01c007c4 	movi	r7,31
1000f1b8:	18c00434 	orhi	r3,r3,16
1000f1bc:	38800d16 	blt	r7,r2,1000f1f4 <__fixdfsi+0x70>
1000f1c0:	31befb44 	addi	r6,r6,-1043
1000f1c4:	2084d83a 	srl	r2,r4,r2
1000f1c8:	1986983a 	sll	r3,r3,r6
1000f1cc:	1884b03a 	or	r2,r3,r2
1000f1d0:	28000726 	beq	r5,zero,1000f1f0 <__fixdfsi+0x6c>
1000f1d4:	0085c83a 	sub	r2,zero,r2
1000f1d8:	f800283a 	ret
1000f1dc:	00a00034 	movhi	r2,32768
1000f1e0:	10bfffc4 	addi	r2,r2,-1
1000f1e4:	2885883a 	add	r2,r5,r2
1000f1e8:	f800283a 	ret
1000f1ec:	0005883a 	mov	r2,zero
1000f1f0:	f800283a 	ret
1000f1f4:	008104c4 	movi	r2,1043
1000f1f8:	1185c83a 	sub	r2,r2,r6
1000f1fc:	1884d83a 	srl	r2,r3,r2
1000f200:	003ff306 	br	1000f1d0 <__alt_data_end+0xf800f1d0>

1000f204 <__floatsidf>:
1000f204:	defffd04 	addi	sp,sp,-12
1000f208:	dfc00215 	stw	ra,8(sp)
1000f20c:	dc400115 	stw	r17,4(sp)
1000f210:	dc000015 	stw	r16,0(sp)
1000f214:	20002b26 	beq	r4,zero,1000f2c4 <__floatsidf+0xc0>
1000f218:	2023883a 	mov	r17,r4
1000f21c:	2020d7fa 	srli	r16,r4,31
1000f220:	20002d16 	blt	r4,zero,1000f2d8 <__floatsidf+0xd4>
1000f224:	8809883a 	mov	r4,r17
1000f228:	000f3880 	call	1000f388 <__clzsi2>
1000f22c:	01410784 	movi	r5,1054
1000f230:	288bc83a 	sub	r5,r5,r2
1000f234:	01010cc4 	movi	r4,1075
1000f238:	2149c83a 	sub	r4,r4,r5
1000f23c:	00c007c4 	movi	r3,31
1000f240:	1900160e 	bge	r3,r4,1000f29c <__floatsidf+0x98>
1000f244:	00c104c4 	movi	r3,1043
1000f248:	1947c83a 	sub	r3,r3,r5
1000f24c:	88c6983a 	sll	r3,r17,r3
1000f250:	00800434 	movhi	r2,16
1000f254:	10bfffc4 	addi	r2,r2,-1
1000f258:	1886703a 	and	r3,r3,r2
1000f25c:	2941ffcc 	andi	r5,r5,2047
1000f260:	800d883a 	mov	r6,r16
1000f264:	0005883a 	mov	r2,zero
1000f268:	280a953a 	slli	r5,r5,20
1000f26c:	31803fcc 	andi	r6,r6,255
1000f270:	01000434 	movhi	r4,16
1000f274:	300c97fa 	slli	r6,r6,31
1000f278:	213fffc4 	addi	r4,r4,-1
1000f27c:	1906703a 	and	r3,r3,r4
1000f280:	1946b03a 	or	r3,r3,r5
1000f284:	1986b03a 	or	r3,r3,r6
1000f288:	dfc00217 	ldw	ra,8(sp)
1000f28c:	dc400117 	ldw	r17,4(sp)
1000f290:	dc000017 	ldw	r16,0(sp)
1000f294:	dec00304 	addi	sp,sp,12
1000f298:	f800283a 	ret
1000f29c:	00c002c4 	movi	r3,11
1000f2a0:	1887c83a 	sub	r3,r3,r2
1000f2a4:	88c6d83a 	srl	r3,r17,r3
1000f2a8:	8904983a 	sll	r2,r17,r4
1000f2ac:	01000434 	movhi	r4,16
1000f2b0:	213fffc4 	addi	r4,r4,-1
1000f2b4:	2941ffcc 	andi	r5,r5,2047
1000f2b8:	1906703a 	and	r3,r3,r4
1000f2bc:	800d883a 	mov	r6,r16
1000f2c0:	003fe906 	br	1000f268 <__alt_data_end+0xf800f268>
1000f2c4:	000d883a 	mov	r6,zero
1000f2c8:	000b883a 	mov	r5,zero
1000f2cc:	0007883a 	mov	r3,zero
1000f2d0:	0005883a 	mov	r2,zero
1000f2d4:	003fe406 	br	1000f268 <__alt_data_end+0xf800f268>
1000f2d8:	0123c83a 	sub	r17,zero,r4
1000f2dc:	003fd106 	br	1000f224 <__alt_data_end+0xf800f224>

1000f2e0 <__floatunsidf>:
1000f2e0:	defffe04 	addi	sp,sp,-8
1000f2e4:	dc000015 	stw	r16,0(sp)
1000f2e8:	dfc00115 	stw	ra,4(sp)
1000f2ec:	2021883a 	mov	r16,r4
1000f2f0:	20002226 	beq	r4,zero,1000f37c <__floatunsidf+0x9c>
1000f2f4:	000f3880 	call	1000f388 <__clzsi2>
1000f2f8:	01010784 	movi	r4,1054
1000f2fc:	2089c83a 	sub	r4,r4,r2
1000f300:	01810cc4 	movi	r6,1075
1000f304:	310dc83a 	sub	r6,r6,r4
1000f308:	00c007c4 	movi	r3,31
1000f30c:	1980120e 	bge	r3,r6,1000f358 <__floatunsidf+0x78>
1000f310:	00c104c4 	movi	r3,1043
1000f314:	1907c83a 	sub	r3,r3,r4
1000f318:	80ca983a 	sll	r5,r16,r3
1000f31c:	00800434 	movhi	r2,16
1000f320:	10bfffc4 	addi	r2,r2,-1
1000f324:	2101ffcc 	andi	r4,r4,2047
1000f328:	0021883a 	mov	r16,zero
1000f32c:	288a703a 	and	r5,r5,r2
1000f330:	2008953a 	slli	r4,r4,20
1000f334:	00c00434 	movhi	r3,16
1000f338:	18ffffc4 	addi	r3,r3,-1
1000f33c:	28c6703a 	and	r3,r5,r3
1000f340:	8005883a 	mov	r2,r16
1000f344:	1906b03a 	or	r3,r3,r4
1000f348:	dfc00117 	ldw	ra,4(sp)
1000f34c:	dc000017 	ldw	r16,0(sp)
1000f350:	dec00204 	addi	sp,sp,8
1000f354:	f800283a 	ret
1000f358:	00c002c4 	movi	r3,11
1000f35c:	188bc83a 	sub	r5,r3,r2
1000f360:	814ad83a 	srl	r5,r16,r5
1000f364:	00c00434 	movhi	r3,16
1000f368:	18ffffc4 	addi	r3,r3,-1
1000f36c:	81a0983a 	sll	r16,r16,r6
1000f370:	2101ffcc 	andi	r4,r4,2047
1000f374:	28ca703a 	and	r5,r5,r3
1000f378:	003fed06 	br	1000f330 <__alt_data_end+0xf800f330>
1000f37c:	0009883a 	mov	r4,zero
1000f380:	000b883a 	mov	r5,zero
1000f384:	003fea06 	br	1000f330 <__alt_data_end+0xf800f330>

1000f388 <__clzsi2>:
1000f388:	00bfffd4 	movui	r2,65535
1000f38c:	11000536 	bltu	r2,r4,1000f3a4 <__clzsi2+0x1c>
1000f390:	00803fc4 	movi	r2,255
1000f394:	11000f36 	bltu	r2,r4,1000f3d4 <__clzsi2+0x4c>
1000f398:	00800804 	movi	r2,32
1000f39c:	0007883a 	mov	r3,zero
1000f3a0:	00000506 	br	1000f3b8 <__clzsi2+0x30>
1000f3a4:	00804034 	movhi	r2,256
1000f3a8:	10bfffc4 	addi	r2,r2,-1
1000f3ac:	11000c2e 	bgeu	r2,r4,1000f3e0 <__clzsi2+0x58>
1000f3b0:	00800204 	movi	r2,8
1000f3b4:	00c00604 	movi	r3,24
1000f3b8:	20c8d83a 	srl	r4,r4,r3
1000f3bc:	00c40074 	movhi	r3,4097
1000f3c0:	18c95d04 	addi	r3,r3,9588
1000f3c4:	1909883a 	add	r4,r3,r4
1000f3c8:	20c00003 	ldbu	r3,0(r4)
1000f3cc:	10c5c83a 	sub	r2,r2,r3
1000f3d0:	f800283a 	ret
1000f3d4:	00800604 	movi	r2,24
1000f3d8:	00c00204 	movi	r3,8
1000f3dc:	003ff606 	br	1000f3b8 <__alt_data_end+0xf800f3b8>
1000f3e0:	00800404 	movi	r2,16
1000f3e4:	1007883a 	mov	r3,r2
1000f3e8:	003ff306 	br	1000f3b8 <__alt_data_end+0xf800f3b8>

1000f3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f3ec:	defffe04 	addi	sp,sp,-8
1000f3f0:	dfc00115 	stw	ra,4(sp)
1000f3f4:	df000015 	stw	fp,0(sp)
1000f3f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f3fc:	d0a00c17 	ldw	r2,-32720(gp)
1000f400:	10000326 	beq	r2,zero,1000f410 <alt_get_errno+0x24>
1000f404:	d0a00c17 	ldw	r2,-32720(gp)
1000f408:	103ee83a 	callr	r2
1000f40c:	00000106 	br	1000f414 <alt_get_errno+0x28>
1000f410:	d0a6d404 	addi	r2,gp,-25776
}
1000f414:	e037883a 	mov	sp,fp
1000f418:	dfc00117 	ldw	ra,4(sp)
1000f41c:	df000017 	ldw	fp,0(sp)
1000f420:	dec00204 	addi	sp,sp,8
1000f424:	f800283a 	ret

1000f428 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f428:	defffb04 	addi	sp,sp,-20
1000f42c:	dfc00415 	stw	ra,16(sp)
1000f430:	df000315 	stw	fp,12(sp)
1000f434:	df000304 	addi	fp,sp,12
1000f438:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f43c:	e0bfff17 	ldw	r2,-4(fp)
1000f440:	10000816 	blt	r2,zero,1000f464 <close+0x3c>
1000f444:	01400304 	movi	r5,12
1000f448:	e13fff17 	ldw	r4,-4(fp)
1000f44c:	000cb200 	call	1000cb20 <__mulsi3>
1000f450:	1007883a 	mov	r3,r2
1000f454:	00840074 	movhi	r2,4097
1000f458:	108bdd04 	addi	r2,r2,12148
1000f45c:	1885883a 	add	r2,r3,r2
1000f460:	00000106 	br	1000f468 <close+0x40>
1000f464:	0005883a 	mov	r2,zero
1000f468:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f46c:	e0bffd17 	ldw	r2,-12(fp)
1000f470:	10001926 	beq	r2,zero,1000f4d8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f474:	e0bffd17 	ldw	r2,-12(fp)
1000f478:	10800017 	ldw	r2,0(r2)
1000f47c:	10800417 	ldw	r2,16(r2)
1000f480:	10000626 	beq	r2,zero,1000f49c <close+0x74>
1000f484:	e0bffd17 	ldw	r2,-12(fp)
1000f488:	10800017 	ldw	r2,0(r2)
1000f48c:	10800417 	ldw	r2,16(r2)
1000f490:	e13ffd17 	ldw	r4,-12(fp)
1000f494:	103ee83a 	callr	r2
1000f498:	00000106 	br	1000f4a0 <close+0x78>
1000f49c:	0005883a 	mov	r2,zero
1000f4a0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f4a4:	e13fff17 	ldw	r4,-4(fp)
1000f4a8:	000fb100 	call	1000fb10 <alt_release_fd>
    if (rval < 0)
1000f4ac:	e0bffe17 	ldw	r2,-8(fp)
1000f4b0:	1000070e 	bge	r2,zero,1000f4d0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f4b4:	000f3ec0 	call	1000f3ec <alt_get_errno>
1000f4b8:	1007883a 	mov	r3,r2
1000f4bc:	e0bffe17 	ldw	r2,-8(fp)
1000f4c0:	0085c83a 	sub	r2,zero,r2
1000f4c4:	18800015 	stw	r2,0(r3)
      return -1;
1000f4c8:	00bfffc4 	movi	r2,-1
1000f4cc:	00000706 	br	1000f4ec <close+0xc4>
    }
    return 0;
1000f4d0:	0005883a 	mov	r2,zero
1000f4d4:	00000506 	br	1000f4ec <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f4d8:	000f3ec0 	call	1000f3ec <alt_get_errno>
1000f4dc:	1007883a 	mov	r3,r2
1000f4e0:	00801444 	movi	r2,81
1000f4e4:	18800015 	stw	r2,0(r3)
    return -1;
1000f4e8:	00bfffc4 	movi	r2,-1
  }
}
1000f4ec:	e037883a 	mov	sp,fp
1000f4f0:	dfc00117 	ldw	ra,4(sp)
1000f4f4:	df000017 	ldw	fp,0(sp)
1000f4f8:	dec00204 	addi	sp,sp,8
1000f4fc:	f800283a 	ret

1000f500 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f500:	defffc04 	addi	sp,sp,-16
1000f504:	df000315 	stw	fp,12(sp)
1000f508:	df000304 	addi	fp,sp,12
1000f50c:	e13ffd15 	stw	r4,-12(fp)
1000f510:	e17ffe15 	stw	r5,-8(fp)
1000f514:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f518:	e0bfff17 	ldw	r2,-4(fp)
}
1000f51c:	e037883a 	mov	sp,fp
1000f520:	df000017 	ldw	fp,0(sp)
1000f524:	dec00104 	addi	sp,sp,4
1000f528:	f800283a 	ret

1000f52c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f52c:	defffe04 	addi	sp,sp,-8
1000f530:	dfc00115 	stw	ra,4(sp)
1000f534:	df000015 	stw	fp,0(sp)
1000f538:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f53c:	d0a00c17 	ldw	r2,-32720(gp)
1000f540:	10000326 	beq	r2,zero,1000f550 <alt_get_errno+0x24>
1000f544:	d0a00c17 	ldw	r2,-32720(gp)
1000f548:	103ee83a 	callr	r2
1000f54c:	00000106 	br	1000f554 <alt_get_errno+0x28>
1000f550:	d0a6d404 	addi	r2,gp,-25776
}
1000f554:	e037883a 	mov	sp,fp
1000f558:	dfc00117 	ldw	ra,4(sp)
1000f55c:	df000017 	ldw	fp,0(sp)
1000f560:	dec00204 	addi	sp,sp,8
1000f564:	f800283a 	ret

1000f568 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f568:	defffb04 	addi	sp,sp,-20
1000f56c:	dfc00415 	stw	ra,16(sp)
1000f570:	df000315 	stw	fp,12(sp)
1000f574:	df000304 	addi	fp,sp,12
1000f578:	e13ffe15 	stw	r4,-8(fp)
1000f57c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f580:	e0bffe17 	ldw	r2,-8(fp)
1000f584:	10000816 	blt	r2,zero,1000f5a8 <fstat+0x40>
1000f588:	01400304 	movi	r5,12
1000f58c:	e13ffe17 	ldw	r4,-8(fp)
1000f590:	000cb200 	call	1000cb20 <__mulsi3>
1000f594:	1007883a 	mov	r3,r2
1000f598:	00840074 	movhi	r2,4097
1000f59c:	108bdd04 	addi	r2,r2,12148
1000f5a0:	1885883a 	add	r2,r3,r2
1000f5a4:	00000106 	br	1000f5ac <fstat+0x44>
1000f5a8:	0005883a 	mov	r2,zero
1000f5ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f5b0:	e0bffd17 	ldw	r2,-12(fp)
1000f5b4:	10001026 	beq	r2,zero,1000f5f8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f5b8:	e0bffd17 	ldw	r2,-12(fp)
1000f5bc:	10800017 	ldw	r2,0(r2)
1000f5c0:	10800817 	ldw	r2,32(r2)
1000f5c4:	10000726 	beq	r2,zero,1000f5e4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f5c8:	e0bffd17 	ldw	r2,-12(fp)
1000f5cc:	10800017 	ldw	r2,0(r2)
1000f5d0:	10800817 	ldw	r2,32(r2)
1000f5d4:	e17fff17 	ldw	r5,-4(fp)
1000f5d8:	e13ffd17 	ldw	r4,-12(fp)
1000f5dc:	103ee83a 	callr	r2
1000f5e0:	00000a06 	br	1000f60c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f5e4:	e0bfff17 	ldw	r2,-4(fp)
1000f5e8:	00c80004 	movi	r3,8192
1000f5ec:	10c00115 	stw	r3,4(r2)
      return 0;
1000f5f0:	0005883a 	mov	r2,zero
1000f5f4:	00000506 	br	1000f60c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f5f8:	000f52c0 	call	1000f52c <alt_get_errno>
1000f5fc:	1007883a 	mov	r3,r2
1000f600:	00801444 	movi	r2,81
1000f604:	18800015 	stw	r2,0(r3)
    return -1;
1000f608:	00bfffc4 	movi	r2,-1
  }
}
1000f60c:	e037883a 	mov	sp,fp
1000f610:	dfc00117 	ldw	ra,4(sp)
1000f614:	df000017 	ldw	fp,0(sp)
1000f618:	dec00204 	addi	sp,sp,8
1000f61c:	f800283a 	ret

1000f620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f620:	defffe04 	addi	sp,sp,-8
1000f624:	dfc00115 	stw	ra,4(sp)
1000f628:	df000015 	stw	fp,0(sp)
1000f62c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f630:	d0a00c17 	ldw	r2,-32720(gp)
1000f634:	10000326 	beq	r2,zero,1000f644 <alt_get_errno+0x24>
1000f638:	d0a00c17 	ldw	r2,-32720(gp)
1000f63c:	103ee83a 	callr	r2
1000f640:	00000106 	br	1000f648 <alt_get_errno+0x28>
1000f644:	d0a6d404 	addi	r2,gp,-25776
}
1000f648:	e037883a 	mov	sp,fp
1000f64c:	dfc00117 	ldw	ra,4(sp)
1000f650:	df000017 	ldw	fp,0(sp)
1000f654:	dec00204 	addi	sp,sp,8
1000f658:	f800283a 	ret

1000f65c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f65c:	deffed04 	addi	sp,sp,-76
1000f660:	dfc01215 	stw	ra,72(sp)
1000f664:	df001115 	stw	fp,68(sp)
1000f668:	df001104 	addi	fp,sp,68
1000f66c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f670:	e0bfff17 	ldw	r2,-4(fp)
1000f674:	10000816 	blt	r2,zero,1000f698 <isatty+0x3c>
1000f678:	01400304 	movi	r5,12
1000f67c:	e13fff17 	ldw	r4,-4(fp)
1000f680:	000cb200 	call	1000cb20 <__mulsi3>
1000f684:	1007883a 	mov	r3,r2
1000f688:	00840074 	movhi	r2,4097
1000f68c:	108bdd04 	addi	r2,r2,12148
1000f690:	1885883a 	add	r2,r3,r2
1000f694:	00000106 	br	1000f69c <isatty+0x40>
1000f698:	0005883a 	mov	r2,zero
1000f69c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f6a0:	e0bfef17 	ldw	r2,-68(fp)
1000f6a4:	10000e26 	beq	r2,zero,1000f6e0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f6a8:	e0bfef17 	ldw	r2,-68(fp)
1000f6ac:	10800017 	ldw	r2,0(r2)
1000f6b0:	10800817 	ldw	r2,32(r2)
1000f6b4:	1000021e 	bne	r2,zero,1000f6c0 <isatty+0x64>
    {
      return 1;
1000f6b8:	00800044 	movi	r2,1
1000f6bc:	00000d06 	br	1000f6f4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f6c0:	e0bff004 	addi	r2,fp,-64
1000f6c4:	100b883a 	mov	r5,r2
1000f6c8:	e13fff17 	ldw	r4,-4(fp)
1000f6cc:	000f5680 	call	1000f568 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f6d0:	e0bff117 	ldw	r2,-60(fp)
1000f6d4:	10880020 	cmpeqi	r2,r2,8192
1000f6d8:	10803fcc 	andi	r2,r2,255
1000f6dc:	00000506 	br	1000f6f4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f6e0:	000f6200 	call	1000f620 <alt_get_errno>
1000f6e4:	1007883a 	mov	r3,r2
1000f6e8:	00801444 	movi	r2,81
1000f6ec:	18800015 	stw	r2,0(r3)
    return 0;
1000f6f0:	0005883a 	mov	r2,zero
  }
}
1000f6f4:	e037883a 	mov	sp,fp
1000f6f8:	dfc00117 	ldw	ra,4(sp)
1000f6fc:	df000017 	ldw	fp,0(sp)
1000f700:	dec00204 	addi	sp,sp,8
1000f704:	f800283a 	ret

1000f708 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f708:	defffc04 	addi	sp,sp,-16
1000f70c:	df000315 	stw	fp,12(sp)
1000f710:	df000304 	addi	fp,sp,12
1000f714:	e13ffd15 	stw	r4,-12(fp)
1000f718:	e17ffe15 	stw	r5,-8(fp)
1000f71c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000f720:	e0fffe17 	ldw	r3,-8(fp)
1000f724:	e0bffd17 	ldw	r2,-12(fp)
1000f728:	18800c26 	beq	r3,r2,1000f75c <alt_load_section+0x54>
  {
    while( to != end )
1000f72c:	00000806 	br	1000f750 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f730:	e0bffe17 	ldw	r2,-8(fp)
1000f734:	10c00104 	addi	r3,r2,4
1000f738:	e0fffe15 	stw	r3,-8(fp)
1000f73c:	e0fffd17 	ldw	r3,-12(fp)
1000f740:	19000104 	addi	r4,r3,4
1000f744:	e13ffd15 	stw	r4,-12(fp)
1000f748:	18c00017 	ldw	r3,0(r3)
1000f74c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000f750:	e0fffe17 	ldw	r3,-8(fp)
1000f754:	e0bfff17 	ldw	r2,-4(fp)
1000f758:	18bff51e 	bne	r3,r2,1000f730 <__alt_data_end+0xf800f730>
    {
      *to++ = *from++;
    }
  }
}
1000f75c:	0001883a 	nop
1000f760:	e037883a 	mov	sp,fp
1000f764:	df000017 	ldw	fp,0(sp)
1000f768:	dec00104 	addi	sp,sp,4
1000f76c:	f800283a 	ret

1000f770 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f770:	defffe04 	addi	sp,sp,-8
1000f774:	dfc00115 	stw	ra,4(sp)
1000f778:	df000015 	stw	fp,0(sp)
1000f77c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f780:	01840074 	movhi	r6,4097
1000f784:	31906604 	addi	r6,r6,16792
1000f788:	01440074 	movhi	r5,4097
1000f78c:	2949aa04 	addi	r5,r5,9896
1000f790:	01040074 	movhi	r4,4097
1000f794:	21106604 	addi	r4,r4,16792
1000f798:	000f7080 	call	1000f708 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f79c:	01840034 	movhi	r6,4096
1000f7a0:	31808c04 	addi	r6,r6,560
1000f7a4:	01440034 	movhi	r5,4096
1000f7a8:	29400804 	addi	r5,r5,32
1000f7ac:	01040034 	movhi	r4,4096
1000f7b0:	21000804 	addi	r4,r4,32
1000f7b4:	000f7080 	call	1000f708 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000f7b8:	01840074 	movhi	r6,4097
1000f7bc:	3189aa04 	addi	r6,r6,9896
1000f7c0:	01440074 	movhi	r5,4097
1000f7c4:	29470304 	addi	r5,r5,7180
1000f7c8:	01040074 	movhi	r4,4097
1000f7cc:	21070304 	addi	r4,r4,7180
1000f7d0:	000f7080 	call	1000f708 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000f7d4:	0010b540 	call	10010b54 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000f7d8:	0010d140 	call	10010d14 <alt_icache_flush_all>
}
1000f7dc:	0001883a 	nop
1000f7e0:	e037883a 	mov	sp,fp
1000f7e4:	dfc00117 	ldw	ra,4(sp)
1000f7e8:	df000017 	ldw	fp,0(sp)
1000f7ec:	dec00204 	addi	sp,sp,8
1000f7f0:	f800283a 	ret

1000f7f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f7f4:	defffe04 	addi	sp,sp,-8
1000f7f8:	dfc00115 	stw	ra,4(sp)
1000f7fc:	df000015 	stw	fp,0(sp)
1000f800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f804:	d0a00c17 	ldw	r2,-32720(gp)
1000f808:	10000326 	beq	r2,zero,1000f818 <alt_get_errno+0x24>
1000f80c:	d0a00c17 	ldw	r2,-32720(gp)
1000f810:	103ee83a 	callr	r2
1000f814:	00000106 	br	1000f81c <alt_get_errno+0x28>
1000f818:	d0a6d404 	addi	r2,gp,-25776
}
1000f81c:	e037883a 	mov	sp,fp
1000f820:	dfc00117 	ldw	ra,4(sp)
1000f824:	df000017 	ldw	fp,0(sp)
1000f828:	dec00204 	addi	sp,sp,8
1000f82c:	f800283a 	ret

1000f830 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f830:	defff904 	addi	sp,sp,-28
1000f834:	dfc00615 	stw	ra,24(sp)
1000f838:	df000515 	stw	fp,20(sp)
1000f83c:	df000504 	addi	fp,sp,20
1000f840:	e13ffd15 	stw	r4,-12(fp)
1000f844:	e17ffe15 	stw	r5,-8(fp)
1000f848:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f84c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f850:	e0bffd17 	ldw	r2,-12(fp)
1000f854:	10000816 	blt	r2,zero,1000f878 <lseek+0x48>
1000f858:	01400304 	movi	r5,12
1000f85c:	e13ffd17 	ldw	r4,-12(fp)
1000f860:	000cb200 	call	1000cb20 <__mulsi3>
1000f864:	1007883a 	mov	r3,r2
1000f868:	00840074 	movhi	r2,4097
1000f86c:	108bdd04 	addi	r2,r2,12148
1000f870:	1885883a 	add	r2,r3,r2
1000f874:	00000106 	br	1000f87c <lseek+0x4c>
1000f878:	0005883a 	mov	r2,zero
1000f87c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f880:	e0bffc17 	ldw	r2,-16(fp)
1000f884:	10001026 	beq	r2,zero,1000f8c8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f888:	e0bffc17 	ldw	r2,-16(fp)
1000f88c:	10800017 	ldw	r2,0(r2)
1000f890:	10800717 	ldw	r2,28(r2)
1000f894:	10000926 	beq	r2,zero,1000f8bc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f898:	e0bffc17 	ldw	r2,-16(fp)
1000f89c:	10800017 	ldw	r2,0(r2)
1000f8a0:	10800717 	ldw	r2,28(r2)
1000f8a4:	e1bfff17 	ldw	r6,-4(fp)
1000f8a8:	e17ffe17 	ldw	r5,-8(fp)
1000f8ac:	e13ffc17 	ldw	r4,-16(fp)
1000f8b0:	103ee83a 	callr	r2
1000f8b4:	e0bffb15 	stw	r2,-20(fp)
1000f8b8:	00000506 	br	1000f8d0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f8bc:	00bfde84 	movi	r2,-134
1000f8c0:	e0bffb15 	stw	r2,-20(fp)
1000f8c4:	00000206 	br	1000f8d0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f8c8:	00bfebc4 	movi	r2,-81
1000f8cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f8d0:	e0bffb17 	ldw	r2,-20(fp)
1000f8d4:	1000070e 	bge	r2,zero,1000f8f4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f8d8:	000f7f40 	call	1000f7f4 <alt_get_errno>
1000f8dc:	1007883a 	mov	r3,r2
1000f8e0:	e0bffb17 	ldw	r2,-20(fp)
1000f8e4:	0085c83a 	sub	r2,zero,r2
1000f8e8:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f8ec:	00bfffc4 	movi	r2,-1
1000f8f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f8f4:	e0bffb17 	ldw	r2,-20(fp)
}
1000f8f8:	e037883a 	mov	sp,fp
1000f8fc:	dfc00117 	ldw	ra,4(sp)
1000f900:	df000017 	ldw	fp,0(sp)
1000f904:	dec00204 	addi	sp,sp,8
1000f908:	f800283a 	ret

1000f90c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f90c:	defffd04 	addi	sp,sp,-12
1000f910:	dfc00215 	stw	ra,8(sp)
1000f914:	df000115 	stw	fp,4(sp)
1000f918:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f91c:	0009883a 	mov	r4,zero
1000f920:	000fde40 	call	1000fde4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f924:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f928:	000fe1c0 	call	1000fe1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f92c:	01840074 	movhi	r6,4097
1000f930:	3189a004 	addi	r6,r6,9856
1000f934:	01440074 	movhi	r5,4097
1000f938:	2949a004 	addi	r5,r5,9856
1000f93c:	01040074 	movhi	r4,4097
1000f940:	2109a004 	addi	r4,r4,9856
1000f944:	00110b80 	call	100110b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f948:	0010c540 	call	10010c54 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f94c:	01040074 	movhi	r4,4097
1000f950:	21032d04 	addi	r4,r4,3252
1000f954:	00118780 	call	10011878 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f958:	d0a6d517 	ldw	r2,-25772(gp)
1000f95c:	d0e6d617 	ldw	r3,-25768(gp)
1000f960:	d126d717 	ldw	r4,-25764(gp)
1000f964:	200d883a 	mov	r6,r4
1000f968:	180b883a 	mov	r5,r3
1000f96c:	1009883a 	mov	r4,r2
1000f970:	00004180 	call	10000418 <main>
1000f974:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f978:	01000044 	movi	r4,1
1000f97c:	000f4280 	call	1000f428 <close>
  exit (result);
1000f980:	e13fff17 	ldw	r4,-4(fp)
1000f984:	001188c0 	call	1001188c <exit>

1000f988 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f988:	defffe04 	addi	sp,sp,-8
1000f98c:	df000115 	stw	fp,4(sp)
1000f990:	df000104 	addi	fp,sp,4
1000f994:	e13fff15 	stw	r4,-4(fp)
}
1000f998:	0001883a 	nop
1000f99c:	e037883a 	mov	sp,fp
1000f9a0:	df000017 	ldw	fp,0(sp)
1000f9a4:	dec00104 	addi	sp,sp,4
1000f9a8:	f800283a 	ret

1000f9ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f9ac:	defffe04 	addi	sp,sp,-8
1000f9b0:	df000115 	stw	fp,4(sp)
1000f9b4:	df000104 	addi	fp,sp,4
1000f9b8:	e13fff15 	stw	r4,-4(fp)
}
1000f9bc:	0001883a 	nop
1000f9c0:	e037883a 	mov	sp,fp
1000f9c4:	df000017 	ldw	fp,0(sp)
1000f9c8:	dec00104 	addi	sp,sp,4
1000f9cc:	f800283a 	ret

1000f9d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f9d0:	defffe04 	addi	sp,sp,-8
1000f9d4:	dfc00115 	stw	ra,4(sp)
1000f9d8:	df000015 	stw	fp,0(sp)
1000f9dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f9e0:	d0a00c17 	ldw	r2,-32720(gp)
1000f9e4:	10000326 	beq	r2,zero,1000f9f4 <alt_get_errno+0x24>
1000f9e8:	d0a00c17 	ldw	r2,-32720(gp)
1000f9ec:	103ee83a 	callr	r2
1000f9f0:	00000106 	br	1000f9f8 <alt_get_errno+0x28>
1000f9f4:	d0a6d404 	addi	r2,gp,-25776
}
1000f9f8:	e037883a 	mov	sp,fp
1000f9fc:	dfc00117 	ldw	ra,4(sp)
1000fa00:	df000017 	ldw	fp,0(sp)
1000fa04:	dec00204 	addi	sp,sp,8
1000fa08:	f800283a 	ret

1000fa0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000fa0c:	defff904 	addi	sp,sp,-28
1000fa10:	dfc00615 	stw	ra,24(sp)
1000fa14:	df000515 	stw	fp,20(sp)
1000fa18:	df000504 	addi	fp,sp,20
1000fa1c:	e13ffd15 	stw	r4,-12(fp)
1000fa20:	e17ffe15 	stw	r5,-8(fp)
1000fa24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fa28:	e0bffd17 	ldw	r2,-12(fp)
1000fa2c:	10000816 	blt	r2,zero,1000fa50 <read+0x44>
1000fa30:	01400304 	movi	r5,12
1000fa34:	e13ffd17 	ldw	r4,-12(fp)
1000fa38:	000cb200 	call	1000cb20 <__mulsi3>
1000fa3c:	1007883a 	mov	r3,r2
1000fa40:	00840074 	movhi	r2,4097
1000fa44:	108bdd04 	addi	r2,r2,12148
1000fa48:	1885883a 	add	r2,r3,r2
1000fa4c:	00000106 	br	1000fa54 <read+0x48>
1000fa50:	0005883a 	mov	r2,zero
1000fa54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fa58:	e0bffb17 	ldw	r2,-20(fp)
1000fa5c:	10002226 	beq	r2,zero,1000fae8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fa60:	e0bffb17 	ldw	r2,-20(fp)
1000fa64:	10800217 	ldw	r2,8(r2)
1000fa68:	108000cc 	andi	r2,r2,3
1000fa6c:	10800060 	cmpeqi	r2,r2,1
1000fa70:	1000181e 	bne	r2,zero,1000fad4 <read+0xc8>
        (fd->dev->read))
1000fa74:	e0bffb17 	ldw	r2,-20(fp)
1000fa78:	10800017 	ldw	r2,0(r2)
1000fa7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fa80:	10001426 	beq	r2,zero,1000fad4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000fa84:	e0bffb17 	ldw	r2,-20(fp)
1000fa88:	10800017 	ldw	r2,0(r2)
1000fa8c:	10800517 	ldw	r2,20(r2)
1000fa90:	e0ffff17 	ldw	r3,-4(fp)
1000fa94:	180d883a 	mov	r6,r3
1000fa98:	e17ffe17 	ldw	r5,-8(fp)
1000fa9c:	e13ffb17 	ldw	r4,-20(fp)
1000faa0:	103ee83a 	callr	r2
1000faa4:	e0bffc15 	stw	r2,-16(fp)
1000faa8:	e0bffc17 	ldw	r2,-16(fp)
1000faac:	1000070e 	bge	r2,zero,1000facc <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000fab0:	000f9d00 	call	1000f9d0 <alt_get_errno>
1000fab4:	1007883a 	mov	r3,r2
1000fab8:	e0bffc17 	ldw	r2,-16(fp)
1000fabc:	0085c83a 	sub	r2,zero,r2
1000fac0:	18800015 	stw	r2,0(r3)
          return -1;
1000fac4:	00bfffc4 	movi	r2,-1
1000fac8:	00000c06 	br	1000fafc <read+0xf0>
        }
        return rval;
1000facc:	e0bffc17 	ldw	r2,-16(fp)
1000fad0:	00000a06 	br	1000fafc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000fad4:	000f9d00 	call	1000f9d0 <alt_get_errno>
1000fad8:	1007883a 	mov	r3,r2
1000fadc:	00800344 	movi	r2,13
1000fae0:	18800015 	stw	r2,0(r3)
1000fae4:	00000406 	br	1000faf8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000fae8:	000f9d00 	call	1000f9d0 <alt_get_errno>
1000faec:	1007883a 	mov	r3,r2
1000faf0:	00801444 	movi	r2,81
1000faf4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000faf8:	00bfffc4 	movi	r2,-1
}
1000fafc:	e037883a 	mov	sp,fp
1000fb00:	dfc00117 	ldw	ra,4(sp)
1000fb04:	df000017 	ldw	fp,0(sp)
1000fb08:	dec00204 	addi	sp,sp,8
1000fb0c:	f800283a 	ret

1000fb10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000fb10:	defffc04 	addi	sp,sp,-16
1000fb14:	dfc00315 	stw	ra,12(sp)
1000fb18:	df000215 	stw	fp,8(sp)
1000fb1c:	dc000115 	stw	r16,4(sp)
1000fb20:	df000204 	addi	fp,sp,8
1000fb24:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000fb28:	e0bffe17 	ldw	r2,-8(fp)
1000fb2c:	108000d0 	cmplti	r2,r2,3
1000fb30:	1000111e 	bne	r2,zero,1000fb78 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000fb34:	04040074 	movhi	r16,4097
1000fb38:	840bdd04 	addi	r16,r16,12148
1000fb3c:	e0bffe17 	ldw	r2,-8(fp)
1000fb40:	01400304 	movi	r5,12
1000fb44:	1009883a 	mov	r4,r2
1000fb48:	000cb200 	call	1000cb20 <__mulsi3>
1000fb4c:	8085883a 	add	r2,r16,r2
1000fb50:	10800204 	addi	r2,r2,8
1000fb54:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000fb58:	04040074 	movhi	r16,4097
1000fb5c:	840bdd04 	addi	r16,r16,12148
1000fb60:	e0bffe17 	ldw	r2,-8(fp)
1000fb64:	01400304 	movi	r5,12
1000fb68:	1009883a 	mov	r4,r2
1000fb6c:	000cb200 	call	1000cb20 <__mulsi3>
1000fb70:	8085883a 	add	r2,r16,r2
1000fb74:	10000015 	stw	zero,0(r2)
  }
}
1000fb78:	0001883a 	nop
1000fb7c:	e6ffff04 	addi	sp,fp,-4
1000fb80:	dfc00217 	ldw	ra,8(sp)
1000fb84:	df000117 	ldw	fp,4(sp)
1000fb88:	dc000017 	ldw	r16,0(sp)
1000fb8c:	dec00304 	addi	sp,sp,12
1000fb90:	f800283a 	ret

1000fb94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000fb94:	defff904 	addi	sp,sp,-28
1000fb98:	df000615 	stw	fp,24(sp)
1000fb9c:	df000604 	addi	fp,sp,24
1000fba0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fba4:	0005303a 	rdctl	r2,status
1000fba8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fbac:	e0fffe17 	ldw	r3,-8(fp)
1000fbb0:	00bfff84 	movi	r2,-2
1000fbb4:	1884703a 	and	r2,r3,r2
1000fbb8:	1001703a 	wrctl	status,r2
  
  return context;
1000fbbc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000fbc0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000fbc4:	d0a00d17 	ldw	r2,-32716(gp)
1000fbc8:	10c000c4 	addi	r3,r2,3
1000fbcc:	00bfff04 	movi	r2,-4
1000fbd0:	1884703a 	and	r2,r3,r2
1000fbd4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000fbd8:	d0e00d17 	ldw	r3,-32716(gp)
1000fbdc:	e0bfff17 	ldw	r2,-4(fp)
1000fbe0:	1887883a 	add	r3,r3,r2
1000fbe4:	00860034 	movhi	r2,6144
1000fbe8:	10800004 	addi	r2,r2,0
1000fbec:	10c0062e 	bgeu	r2,r3,1000fc08 <sbrk+0x74>
1000fbf0:	e0bffb17 	ldw	r2,-20(fp)
1000fbf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fbf8:	e0bffa17 	ldw	r2,-24(fp)
1000fbfc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000fc00:	00bfffc4 	movi	r2,-1
1000fc04:	00000b06 	br	1000fc34 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000fc08:	d0a00d17 	ldw	r2,-32716(gp)
1000fc0c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000fc10:	d0e00d17 	ldw	r3,-32716(gp)
1000fc14:	e0bfff17 	ldw	r2,-4(fp)
1000fc18:	1885883a 	add	r2,r3,r2
1000fc1c:	d0a00d15 	stw	r2,-32716(gp)
1000fc20:	e0bffb17 	ldw	r2,-20(fp)
1000fc24:	e0bffc15 	stw	r2,-16(fp)
1000fc28:	e0bffc17 	ldw	r2,-16(fp)
1000fc2c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000fc30:	e0bffd17 	ldw	r2,-12(fp)
} 
1000fc34:	e037883a 	mov	sp,fp
1000fc38:	df000017 	ldw	fp,0(sp)
1000fc3c:	dec00104 	addi	sp,sp,4
1000fc40:	f800283a 	ret

1000fc44 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000fc44:	defffd04 	addi	sp,sp,-12
1000fc48:	dfc00215 	stw	ra,8(sp)
1000fc4c:	df000115 	stw	fp,4(sp)
1000fc50:	df000104 	addi	fp,sp,4
1000fc54:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000fc58:	e13fff17 	ldw	r4,-4(fp)
1000fc5c:	00109fc0 	call	100109fc <alt_busy_sleep>
}
1000fc60:	e037883a 	mov	sp,fp
1000fc64:	dfc00117 	ldw	ra,4(sp)
1000fc68:	df000017 	ldw	fp,0(sp)
1000fc6c:	dec00204 	addi	sp,sp,8
1000fc70:	f800283a 	ret

1000fc74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fc74:	defffe04 	addi	sp,sp,-8
1000fc78:	dfc00115 	stw	ra,4(sp)
1000fc7c:	df000015 	stw	fp,0(sp)
1000fc80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fc84:	d0a00c17 	ldw	r2,-32720(gp)
1000fc88:	10000326 	beq	r2,zero,1000fc98 <alt_get_errno+0x24>
1000fc8c:	d0a00c17 	ldw	r2,-32720(gp)
1000fc90:	103ee83a 	callr	r2
1000fc94:	00000106 	br	1000fc9c <alt_get_errno+0x28>
1000fc98:	d0a6d404 	addi	r2,gp,-25776
}
1000fc9c:	e037883a 	mov	sp,fp
1000fca0:	dfc00117 	ldw	ra,4(sp)
1000fca4:	df000017 	ldw	fp,0(sp)
1000fca8:	dec00204 	addi	sp,sp,8
1000fcac:	f800283a 	ret

1000fcb0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000fcb0:	defff904 	addi	sp,sp,-28
1000fcb4:	dfc00615 	stw	ra,24(sp)
1000fcb8:	df000515 	stw	fp,20(sp)
1000fcbc:	df000504 	addi	fp,sp,20
1000fcc0:	e13ffd15 	stw	r4,-12(fp)
1000fcc4:	e17ffe15 	stw	r5,-8(fp)
1000fcc8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fccc:	e0bffd17 	ldw	r2,-12(fp)
1000fcd0:	10000816 	blt	r2,zero,1000fcf4 <write+0x44>
1000fcd4:	01400304 	movi	r5,12
1000fcd8:	e13ffd17 	ldw	r4,-12(fp)
1000fcdc:	000cb200 	call	1000cb20 <__mulsi3>
1000fce0:	1007883a 	mov	r3,r2
1000fce4:	00840074 	movhi	r2,4097
1000fce8:	108bdd04 	addi	r2,r2,12148
1000fcec:	1885883a 	add	r2,r3,r2
1000fcf0:	00000106 	br	1000fcf8 <write+0x48>
1000fcf4:	0005883a 	mov	r2,zero
1000fcf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fcfc:	e0bffb17 	ldw	r2,-20(fp)
1000fd00:	10002126 	beq	r2,zero,1000fd88 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000fd04:	e0bffb17 	ldw	r2,-20(fp)
1000fd08:	10800217 	ldw	r2,8(r2)
1000fd0c:	108000cc 	andi	r2,r2,3
1000fd10:	10001826 	beq	r2,zero,1000fd74 <write+0xc4>
1000fd14:	e0bffb17 	ldw	r2,-20(fp)
1000fd18:	10800017 	ldw	r2,0(r2)
1000fd1c:	10800617 	ldw	r2,24(r2)
1000fd20:	10001426 	beq	r2,zero,1000fd74 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000fd24:	e0bffb17 	ldw	r2,-20(fp)
1000fd28:	10800017 	ldw	r2,0(r2)
1000fd2c:	10800617 	ldw	r2,24(r2)
1000fd30:	e0ffff17 	ldw	r3,-4(fp)
1000fd34:	180d883a 	mov	r6,r3
1000fd38:	e17ffe17 	ldw	r5,-8(fp)
1000fd3c:	e13ffb17 	ldw	r4,-20(fp)
1000fd40:	103ee83a 	callr	r2
1000fd44:	e0bffc15 	stw	r2,-16(fp)
1000fd48:	e0bffc17 	ldw	r2,-16(fp)
1000fd4c:	1000070e 	bge	r2,zero,1000fd6c <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000fd50:	000fc740 	call	1000fc74 <alt_get_errno>
1000fd54:	1007883a 	mov	r3,r2
1000fd58:	e0bffc17 	ldw	r2,-16(fp)
1000fd5c:	0085c83a 	sub	r2,zero,r2
1000fd60:	18800015 	stw	r2,0(r3)
        return -1;
1000fd64:	00bfffc4 	movi	r2,-1
1000fd68:	00000c06 	br	1000fd9c <write+0xec>
      }
      return rval;
1000fd6c:	e0bffc17 	ldw	r2,-16(fp)
1000fd70:	00000a06 	br	1000fd9c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000fd74:	000fc740 	call	1000fc74 <alt_get_errno>
1000fd78:	1007883a 	mov	r3,r2
1000fd7c:	00800344 	movi	r2,13
1000fd80:	18800015 	stw	r2,0(r3)
1000fd84:	00000406 	br	1000fd98 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000fd88:	000fc740 	call	1000fc74 <alt_get_errno>
1000fd8c:	1007883a 	mov	r3,r2
1000fd90:	00801444 	movi	r2,81
1000fd94:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fd98:	00bfffc4 	movi	r2,-1
}
1000fd9c:	e037883a 	mov	sp,fp
1000fda0:	dfc00117 	ldw	ra,4(sp)
1000fda4:	df000017 	ldw	fp,0(sp)
1000fda8:	dec00204 	addi	sp,sp,8
1000fdac:	f800283a 	ret

1000fdb0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000fdb0:	defffd04 	addi	sp,sp,-12
1000fdb4:	dfc00215 	stw	ra,8(sp)
1000fdb8:	df000115 	stw	fp,4(sp)
1000fdbc:	df000104 	addi	fp,sp,4
1000fdc0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000fdc4:	d1600904 	addi	r5,gp,-32732
1000fdc8:	e13fff17 	ldw	r4,-4(fp)
1000fdcc:	0010bb00 	call	10010bb0 <alt_dev_llist_insert>
}
1000fdd0:	e037883a 	mov	sp,fp
1000fdd4:	dfc00117 	ldw	ra,4(sp)
1000fdd8:	df000017 	ldw	fp,0(sp)
1000fddc:	dec00204 	addi	sp,sp,8
1000fde0:	f800283a 	ret

1000fde4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fde4:	defffd04 	addi	sp,sp,-12
1000fde8:	dfc00215 	stw	ra,8(sp)
1000fdec:	df000115 	stw	fp,4(sp)
1000fdf0:	df000104 	addi	fp,sp,4
1000fdf4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000fdf8:	001155c0 	call	1001155c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000fdfc:	00800044 	movi	r2,1
1000fe00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000fe04:	0001883a 	nop
1000fe08:	e037883a 	mov	sp,fp
1000fe0c:	dfc00117 	ldw	ra,4(sp)
1000fe10:	df000017 	ldw	fp,0(sp)
1000fe14:	dec00204 	addi	sp,sp,8
1000fe18:	f800283a 	ret

1000fe1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000fe1c:	defffe04 	addi	sp,sp,-8
1000fe20:	dfc00115 	stw	ra,4(sp)
1000fe24:	df000015 	stw	fp,0(sp)
1000fe28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000fe2c:	01800144 	movi	r6,5
1000fe30:	000b883a 	mov	r5,zero
1000fe34:	01040074 	movhi	r4,4097
1000fe38:	210c4704 	addi	r4,r4,12572
1000fe3c:	000ffcc0 	call	1000ffcc <altera_avalon_jtag_uart_init>
1000fe40:	01040074 	movhi	r4,4097
1000fe44:	210c3d04 	addi	r4,r4,12532
1000fe48:	000fdb00 	call	1000fdb0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000fe4c:	0001883a 	nop
}
1000fe50:	0001883a 	nop
1000fe54:	e037883a 	mov	sp,fp
1000fe58:	dfc00117 	ldw	ra,4(sp)
1000fe5c:	df000017 	ldw	fp,0(sp)
1000fe60:	dec00204 	addi	sp,sp,8
1000fe64:	f800283a 	ret

1000fe68 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000fe68:	defffa04 	addi	sp,sp,-24
1000fe6c:	dfc00515 	stw	ra,20(sp)
1000fe70:	df000415 	stw	fp,16(sp)
1000fe74:	df000404 	addi	fp,sp,16
1000fe78:	e13ffd15 	stw	r4,-12(fp)
1000fe7c:	e17ffe15 	stw	r5,-8(fp)
1000fe80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fe84:	e0bffd17 	ldw	r2,-12(fp)
1000fe88:	10800017 	ldw	r2,0(r2)
1000fe8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000fe90:	e0bffc17 	ldw	r2,-16(fp)
1000fe94:	10c00a04 	addi	r3,r2,40
1000fe98:	e0bffd17 	ldw	r2,-12(fp)
1000fe9c:	10800217 	ldw	r2,8(r2)
1000fea0:	100f883a 	mov	r7,r2
1000fea4:	e1bfff17 	ldw	r6,-4(fp)
1000fea8:	e17ffe17 	ldw	r5,-8(fp)
1000feac:	1809883a 	mov	r4,r3
1000feb0:	00104900 	call	10010490 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000feb4:	e037883a 	mov	sp,fp
1000feb8:	dfc00117 	ldw	ra,4(sp)
1000febc:	df000017 	ldw	fp,0(sp)
1000fec0:	dec00204 	addi	sp,sp,8
1000fec4:	f800283a 	ret

1000fec8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000fec8:	defffa04 	addi	sp,sp,-24
1000fecc:	dfc00515 	stw	ra,20(sp)
1000fed0:	df000415 	stw	fp,16(sp)
1000fed4:	df000404 	addi	fp,sp,16
1000fed8:	e13ffd15 	stw	r4,-12(fp)
1000fedc:	e17ffe15 	stw	r5,-8(fp)
1000fee0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fee4:	e0bffd17 	ldw	r2,-12(fp)
1000fee8:	10800017 	ldw	r2,0(r2)
1000feec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000fef0:	e0bffc17 	ldw	r2,-16(fp)
1000fef4:	10c00a04 	addi	r3,r2,40
1000fef8:	e0bffd17 	ldw	r2,-12(fp)
1000fefc:	10800217 	ldw	r2,8(r2)
1000ff00:	100f883a 	mov	r7,r2
1000ff04:	e1bfff17 	ldw	r6,-4(fp)
1000ff08:	e17ffe17 	ldw	r5,-8(fp)
1000ff0c:	1809883a 	mov	r4,r3
1000ff10:	00106ac0 	call	100106ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000ff14:	e037883a 	mov	sp,fp
1000ff18:	dfc00117 	ldw	ra,4(sp)
1000ff1c:	df000017 	ldw	fp,0(sp)
1000ff20:	dec00204 	addi	sp,sp,8
1000ff24:	f800283a 	ret

1000ff28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000ff28:	defffc04 	addi	sp,sp,-16
1000ff2c:	dfc00315 	stw	ra,12(sp)
1000ff30:	df000215 	stw	fp,8(sp)
1000ff34:	df000204 	addi	fp,sp,8
1000ff38:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ff3c:	e0bfff17 	ldw	r2,-4(fp)
1000ff40:	10800017 	ldw	r2,0(r2)
1000ff44:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000ff48:	e0bffe17 	ldw	r2,-8(fp)
1000ff4c:	10c00a04 	addi	r3,r2,40
1000ff50:	e0bfff17 	ldw	r2,-4(fp)
1000ff54:	10800217 	ldw	r2,8(r2)
1000ff58:	100b883a 	mov	r5,r2
1000ff5c:	1809883a 	mov	r4,r3
1000ff60:	00103380 	call	10010338 <altera_avalon_jtag_uart_close>
}
1000ff64:	e037883a 	mov	sp,fp
1000ff68:	dfc00117 	ldw	ra,4(sp)
1000ff6c:	df000017 	ldw	fp,0(sp)
1000ff70:	dec00204 	addi	sp,sp,8
1000ff74:	f800283a 	ret

1000ff78 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000ff78:	defffa04 	addi	sp,sp,-24
1000ff7c:	dfc00515 	stw	ra,20(sp)
1000ff80:	df000415 	stw	fp,16(sp)
1000ff84:	df000404 	addi	fp,sp,16
1000ff88:	e13ffd15 	stw	r4,-12(fp)
1000ff8c:	e17ffe15 	stw	r5,-8(fp)
1000ff90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000ff94:	e0bffd17 	ldw	r2,-12(fp)
1000ff98:	10800017 	ldw	r2,0(r2)
1000ff9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000ffa0:	e0bffc17 	ldw	r2,-16(fp)
1000ffa4:	10800a04 	addi	r2,r2,40
1000ffa8:	e1bfff17 	ldw	r6,-4(fp)
1000ffac:	e17ffe17 	ldw	r5,-8(fp)
1000ffb0:	1009883a 	mov	r4,r2
1000ffb4:	00103a00 	call	100103a0 <altera_avalon_jtag_uart_ioctl>
}
1000ffb8:	e037883a 	mov	sp,fp
1000ffbc:	dfc00117 	ldw	ra,4(sp)
1000ffc0:	df000017 	ldw	fp,0(sp)
1000ffc4:	dec00204 	addi	sp,sp,8
1000ffc8:	f800283a 	ret

1000ffcc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000ffcc:	defffa04 	addi	sp,sp,-24
1000ffd0:	dfc00515 	stw	ra,20(sp)
1000ffd4:	df000415 	stw	fp,16(sp)
1000ffd8:	df000404 	addi	fp,sp,16
1000ffdc:	e13ffd15 	stw	r4,-12(fp)
1000ffe0:	e17ffe15 	stw	r5,-8(fp)
1000ffe4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ffe8:	e0bffd17 	ldw	r2,-12(fp)
1000ffec:	00c00044 	movi	r3,1
1000fff0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000fff4:	e0bffd17 	ldw	r2,-12(fp)
1000fff8:	10800017 	ldw	r2,0(r2)
1000fffc:	10800104 	addi	r2,r2,4
10010000:	1007883a 	mov	r3,r2
10010004:	e0bffd17 	ldw	r2,-12(fp)
10010008:	10800817 	ldw	r2,32(r2)
1001000c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010010:	e0bffe17 	ldw	r2,-8(fp)
10010014:	e0ffff17 	ldw	r3,-4(fp)
10010018:	d8000015 	stw	zero,0(sp)
1001001c:	e1fffd17 	ldw	r7,-12(fp)
10010020:	01840074 	movhi	r6,4097
10010024:	31802304 	addi	r6,r6,140
10010028:	180b883a 	mov	r5,r3
1001002c:	1009883a 	mov	r4,r2
10010030:	0010d340 	call	10010d34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010034:	e0bffd17 	ldw	r2,-12(fp)
10010038:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1001003c:	e0bffd17 	ldw	r2,-12(fp)
10010040:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010044:	d0e6d917 	ldw	r3,-25756(gp)
10010048:	e1fffd17 	ldw	r7,-12(fp)
1001004c:	01840074 	movhi	r6,4097
10010050:	3180a604 	addi	r6,r6,664
10010054:	180b883a 	mov	r5,r3
10010058:	1009883a 	mov	r4,r2
1001005c:	00108d00 	call	100108d0 <alt_alarm_start>
10010060:	1000040e 	bge	r2,zero,10010074 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010064:	e0fffd17 	ldw	r3,-12(fp)
10010068:	00a00034 	movhi	r2,32768
1001006c:	10bfffc4 	addi	r2,r2,-1
10010070:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010074:	0001883a 	nop
10010078:	e037883a 	mov	sp,fp
1001007c:	dfc00117 	ldw	ra,4(sp)
10010080:	df000017 	ldw	fp,0(sp)
10010084:	dec00204 	addi	sp,sp,8
10010088:	f800283a 	ret

1001008c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1001008c:	defff804 	addi	sp,sp,-32
10010090:	df000715 	stw	fp,28(sp)
10010094:	df000704 	addi	fp,sp,28
10010098:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1001009c:	e0bfff17 	ldw	r2,-4(fp)
100100a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100100a4:	e0bffb17 	ldw	r2,-20(fp)
100100a8:	10800017 	ldw	r2,0(r2)
100100ac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100100b0:	e0bffc17 	ldw	r2,-16(fp)
100100b4:	10800104 	addi	r2,r2,4
100100b8:	10800037 	ldwio	r2,0(r2)
100100bc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100100c0:	e0bffd17 	ldw	r2,-12(fp)
100100c4:	1080c00c 	andi	r2,r2,768
100100c8:	10006d26 	beq	r2,zero,10010280 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100100cc:	e0bffd17 	ldw	r2,-12(fp)
100100d0:	1080400c 	andi	r2,r2,256
100100d4:	10003526 	beq	r2,zero,100101ac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100100d8:	00800074 	movhi	r2,1
100100dc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100100e0:	e0bffb17 	ldw	r2,-20(fp)
100100e4:	10800a17 	ldw	r2,40(r2)
100100e8:	10800044 	addi	r2,r2,1
100100ec:	1081ffcc 	andi	r2,r2,2047
100100f0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100100f4:	e0bffb17 	ldw	r2,-20(fp)
100100f8:	10c00b17 	ldw	r3,44(r2)
100100fc:	e0bffe17 	ldw	r2,-8(fp)
10010100:	18801526 	beq	r3,r2,10010158 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010104:	e0bffc17 	ldw	r2,-16(fp)
10010108:	10800037 	ldwio	r2,0(r2)
1001010c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010110:	e0bff917 	ldw	r2,-28(fp)
10010114:	10a0000c 	andi	r2,r2,32768
10010118:	10001126 	beq	r2,zero,10010160 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1001011c:	e0bffb17 	ldw	r2,-20(fp)
10010120:	10800a17 	ldw	r2,40(r2)
10010124:	e0fff917 	ldw	r3,-28(fp)
10010128:	1809883a 	mov	r4,r3
1001012c:	e0fffb17 	ldw	r3,-20(fp)
10010130:	1885883a 	add	r2,r3,r2
10010134:	10800e04 	addi	r2,r2,56
10010138:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001013c:	e0bffb17 	ldw	r2,-20(fp)
10010140:	10800a17 	ldw	r2,40(r2)
10010144:	10800044 	addi	r2,r2,1
10010148:	10c1ffcc 	andi	r3,r2,2047
1001014c:	e0bffb17 	ldw	r2,-20(fp)
10010150:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010154:	003fe206 	br	100100e0 <__alt_data_end+0xf80100e0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010158:	0001883a 	nop
1001015c:	00000106 	br	10010164 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10010160:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10010164:	e0bff917 	ldw	r2,-28(fp)
10010168:	10bfffec 	andhi	r2,r2,65535
1001016c:	10000f26 	beq	r2,zero,100101ac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010170:	e0bffb17 	ldw	r2,-20(fp)
10010174:	10c00817 	ldw	r3,32(r2)
10010178:	00bfff84 	movi	r2,-2
1001017c:	1886703a 	and	r3,r3,r2
10010180:	e0bffb17 	ldw	r2,-20(fp)
10010184:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010188:	e0bffc17 	ldw	r2,-16(fp)
1001018c:	10800104 	addi	r2,r2,4
10010190:	1007883a 	mov	r3,r2
10010194:	e0bffb17 	ldw	r2,-20(fp)
10010198:	10800817 	ldw	r2,32(r2)
1001019c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100101a0:	e0bffc17 	ldw	r2,-16(fp)
100101a4:	10800104 	addi	r2,r2,4
100101a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100101ac:	e0bffd17 	ldw	r2,-12(fp)
100101b0:	1080800c 	andi	r2,r2,512
100101b4:	103fbe26 	beq	r2,zero,100100b0 <__alt_data_end+0xf80100b0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100101b8:	e0bffd17 	ldw	r2,-12(fp)
100101bc:	1004d43a 	srli	r2,r2,16
100101c0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100101c4:	00001406 	br	10010218 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100101c8:	e0bffc17 	ldw	r2,-16(fp)
100101cc:	e0fffb17 	ldw	r3,-20(fp)
100101d0:	18c00d17 	ldw	r3,52(r3)
100101d4:	e13ffb17 	ldw	r4,-20(fp)
100101d8:	20c7883a 	add	r3,r4,r3
100101dc:	18c20e04 	addi	r3,r3,2104
100101e0:	18c00003 	ldbu	r3,0(r3)
100101e4:	18c03fcc 	andi	r3,r3,255
100101e8:	18c0201c 	xori	r3,r3,128
100101ec:	18ffe004 	addi	r3,r3,-128
100101f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100101f4:	e0bffb17 	ldw	r2,-20(fp)
100101f8:	10800d17 	ldw	r2,52(r2)
100101fc:	10800044 	addi	r2,r2,1
10010200:	10c1ffcc 	andi	r3,r2,2047
10010204:	e0bffb17 	ldw	r2,-20(fp)
10010208:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1001020c:	e0bffa17 	ldw	r2,-24(fp)
10010210:	10bfffc4 	addi	r2,r2,-1
10010214:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010218:	e0bffa17 	ldw	r2,-24(fp)
1001021c:	10000526 	beq	r2,zero,10010234 <altera_avalon_jtag_uart_irq+0x1a8>
10010220:	e0bffb17 	ldw	r2,-20(fp)
10010224:	10c00d17 	ldw	r3,52(r2)
10010228:	e0bffb17 	ldw	r2,-20(fp)
1001022c:	10800c17 	ldw	r2,48(r2)
10010230:	18bfe51e 	bne	r3,r2,100101c8 <__alt_data_end+0xf80101c8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010234:	e0bffa17 	ldw	r2,-24(fp)
10010238:	103f9d26 	beq	r2,zero,100100b0 <__alt_data_end+0xf80100b0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001023c:	e0bffb17 	ldw	r2,-20(fp)
10010240:	10c00817 	ldw	r3,32(r2)
10010244:	00bfff44 	movi	r2,-3
10010248:	1886703a 	and	r3,r3,r2
1001024c:	e0bffb17 	ldw	r2,-20(fp)
10010250:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010254:	e0bffb17 	ldw	r2,-20(fp)
10010258:	10800017 	ldw	r2,0(r2)
1001025c:	10800104 	addi	r2,r2,4
10010260:	1007883a 	mov	r3,r2
10010264:	e0bffb17 	ldw	r2,-20(fp)
10010268:	10800817 	ldw	r2,32(r2)
1001026c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010270:	e0bffc17 	ldw	r2,-16(fp)
10010274:	10800104 	addi	r2,r2,4
10010278:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1001027c:	003f8c06 	br	100100b0 <__alt_data_end+0xf80100b0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10010280:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10010284:	0001883a 	nop
10010288:	e037883a 	mov	sp,fp
1001028c:	df000017 	ldw	fp,0(sp)
10010290:	dec00104 	addi	sp,sp,4
10010294:	f800283a 	ret

10010298 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010298:	defff804 	addi	sp,sp,-32
1001029c:	df000715 	stw	fp,28(sp)
100102a0:	df000704 	addi	fp,sp,28
100102a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100102a8:	e0bffb17 	ldw	r2,-20(fp)
100102ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100102b0:	e0bff917 	ldw	r2,-28(fp)
100102b4:	10800017 	ldw	r2,0(r2)
100102b8:	10800104 	addi	r2,r2,4
100102bc:	10800037 	ldwio	r2,0(r2)
100102c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100102c4:	e0bffa17 	ldw	r2,-24(fp)
100102c8:	1081000c 	andi	r2,r2,1024
100102cc:	10000b26 	beq	r2,zero,100102fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100102d0:	e0bff917 	ldw	r2,-28(fp)
100102d4:	10800017 	ldw	r2,0(r2)
100102d8:	10800104 	addi	r2,r2,4
100102dc:	1007883a 	mov	r3,r2
100102e0:	e0bff917 	ldw	r2,-28(fp)
100102e4:	10800817 	ldw	r2,32(r2)
100102e8:	10810014 	ori	r2,r2,1024
100102ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100102f0:	e0bff917 	ldw	r2,-28(fp)
100102f4:	10000915 	stw	zero,36(r2)
100102f8:	00000a06 	br	10010324 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100102fc:	e0bff917 	ldw	r2,-28(fp)
10010300:	10c00917 	ldw	r3,36(r2)
10010304:	00a00034 	movhi	r2,32768
10010308:	10bfff04 	addi	r2,r2,-4
1001030c:	10c00536 	bltu	r2,r3,10010324 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010310:	e0bff917 	ldw	r2,-28(fp)
10010314:	10800917 	ldw	r2,36(r2)
10010318:	10c00044 	addi	r3,r2,1
1001031c:	e0bff917 	ldw	r2,-28(fp)
10010320:	10c00915 	stw	r3,36(r2)
10010324:	d0a6d917 	ldw	r2,-25756(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010328:	e037883a 	mov	sp,fp
1001032c:	df000017 	ldw	fp,0(sp)
10010330:	dec00104 	addi	sp,sp,4
10010334:	f800283a 	ret

10010338 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010338:	defffd04 	addi	sp,sp,-12
1001033c:	df000215 	stw	fp,8(sp)
10010340:	df000204 	addi	fp,sp,8
10010344:	e13ffe15 	stw	r4,-8(fp)
10010348:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001034c:	00000506 	br	10010364 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010350:	e0bfff17 	ldw	r2,-4(fp)
10010354:	1090000c 	andi	r2,r2,16384
10010358:	10000226 	beq	r2,zero,10010364 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1001035c:	00bffd44 	movi	r2,-11
10010360:	00000b06 	br	10010390 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010364:	e0bffe17 	ldw	r2,-8(fp)
10010368:	10c00d17 	ldw	r3,52(r2)
1001036c:	e0bffe17 	ldw	r2,-8(fp)
10010370:	10800c17 	ldw	r2,48(r2)
10010374:	18800526 	beq	r3,r2,1001038c <altera_avalon_jtag_uart_close+0x54>
10010378:	e0bffe17 	ldw	r2,-8(fp)
1001037c:	10c00917 	ldw	r3,36(r2)
10010380:	e0bffe17 	ldw	r2,-8(fp)
10010384:	10800117 	ldw	r2,4(r2)
10010388:	18bff136 	bltu	r3,r2,10010350 <__alt_data_end+0xf8010350>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1001038c:	0005883a 	mov	r2,zero
}
10010390:	e037883a 	mov	sp,fp
10010394:	df000017 	ldw	fp,0(sp)
10010398:	dec00104 	addi	sp,sp,4
1001039c:	f800283a 	ret

100103a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100103a0:	defffa04 	addi	sp,sp,-24
100103a4:	df000515 	stw	fp,20(sp)
100103a8:	df000504 	addi	fp,sp,20
100103ac:	e13ffd15 	stw	r4,-12(fp)
100103b0:	e17ffe15 	stw	r5,-8(fp)
100103b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100103b8:	00bff9c4 	movi	r2,-25
100103bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100103c0:	e0bffe17 	ldw	r2,-8(fp)
100103c4:	10da8060 	cmpeqi	r3,r2,27137
100103c8:	1800031e 	bne	r3,zero,100103d8 <altera_avalon_jtag_uart_ioctl+0x38>
100103cc:	109a80a0 	cmpeqi	r2,r2,27138
100103d0:	1000181e 	bne	r2,zero,10010434 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
100103d4:	00002906 	br	1001047c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100103d8:	e0bffd17 	ldw	r2,-12(fp)
100103dc:	10c00117 	ldw	r3,4(r2)
100103e0:	00a00034 	movhi	r2,32768
100103e4:	10bfffc4 	addi	r2,r2,-1
100103e8:	18802126 	beq	r3,r2,10010470 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100103ec:	e0bfff17 	ldw	r2,-4(fp)
100103f0:	10800017 	ldw	r2,0(r2)
100103f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100103f8:	e0bffc17 	ldw	r2,-16(fp)
100103fc:	10800090 	cmplti	r2,r2,2
10010400:	1000061e 	bne	r2,zero,1001041c <altera_avalon_jtag_uart_ioctl+0x7c>
10010404:	e0fffc17 	ldw	r3,-16(fp)
10010408:	00a00034 	movhi	r2,32768
1001040c:	10bfffc4 	addi	r2,r2,-1
10010410:	18800226 	beq	r3,r2,1001041c <altera_avalon_jtag_uart_ioctl+0x7c>
10010414:	e0bffc17 	ldw	r2,-16(fp)
10010418:	00000206 	br	10010424 <altera_avalon_jtag_uart_ioctl+0x84>
1001041c:	00a00034 	movhi	r2,32768
10010420:	10bfff84 	addi	r2,r2,-2
10010424:	e0fffd17 	ldw	r3,-12(fp)
10010428:	18800115 	stw	r2,4(r3)
      rc = 0;
1001042c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010430:	00000f06 	br	10010470 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010434:	e0bffd17 	ldw	r2,-12(fp)
10010438:	10c00117 	ldw	r3,4(r2)
1001043c:	00a00034 	movhi	r2,32768
10010440:	10bfffc4 	addi	r2,r2,-1
10010444:	18800c26 	beq	r3,r2,10010478 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010448:	e0bffd17 	ldw	r2,-12(fp)
1001044c:	10c00917 	ldw	r3,36(r2)
10010450:	e0bffd17 	ldw	r2,-12(fp)
10010454:	10800117 	ldw	r2,4(r2)
10010458:	1885803a 	cmpltu	r2,r3,r2
1001045c:	10c03fcc 	andi	r3,r2,255
10010460:	e0bfff17 	ldw	r2,-4(fp)
10010464:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010468:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1001046c:	00000206 	br	10010478 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10010470:	0001883a 	nop
10010474:	00000106 	br	1001047c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10010478:	0001883a 	nop

  default:
    break;
  }

  return rc;
1001047c:	e0bffb17 	ldw	r2,-20(fp)
}
10010480:	e037883a 	mov	sp,fp
10010484:	df000017 	ldw	fp,0(sp)
10010488:	dec00104 	addi	sp,sp,4
1001048c:	f800283a 	ret

10010490 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010490:	defff304 	addi	sp,sp,-52
10010494:	dfc00c15 	stw	ra,48(sp)
10010498:	df000b15 	stw	fp,44(sp)
1001049c:	df000b04 	addi	fp,sp,44
100104a0:	e13ffc15 	stw	r4,-16(fp)
100104a4:	e17ffd15 	stw	r5,-12(fp)
100104a8:	e1bffe15 	stw	r6,-8(fp)
100104ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100104b0:	e0bffd17 	ldw	r2,-12(fp)
100104b4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100104b8:	00004706 	br	100105d8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100104bc:	e0bffc17 	ldw	r2,-16(fp)
100104c0:	10800a17 	ldw	r2,40(r2)
100104c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100104c8:	e0bffc17 	ldw	r2,-16(fp)
100104cc:	10800b17 	ldw	r2,44(r2)
100104d0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100104d4:	e0fff717 	ldw	r3,-36(fp)
100104d8:	e0bff817 	ldw	r2,-32(fp)
100104dc:	18800536 	bltu	r3,r2,100104f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100104e0:	e0fff717 	ldw	r3,-36(fp)
100104e4:	e0bff817 	ldw	r2,-32(fp)
100104e8:	1885c83a 	sub	r2,r3,r2
100104ec:	e0bff615 	stw	r2,-40(fp)
100104f0:	00000406 	br	10010504 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100104f4:	00c20004 	movi	r3,2048
100104f8:	e0bff817 	ldw	r2,-32(fp)
100104fc:	1885c83a 	sub	r2,r3,r2
10010500:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010504:	e0bff617 	ldw	r2,-40(fp)
10010508:	10001e26 	beq	r2,zero,10010584 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1001050c:	e0fffe17 	ldw	r3,-8(fp)
10010510:	e0bff617 	ldw	r2,-40(fp)
10010514:	1880022e 	bgeu	r3,r2,10010520 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010518:	e0bffe17 	ldw	r2,-8(fp)
1001051c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010520:	e0bffc17 	ldw	r2,-16(fp)
10010524:	10c00e04 	addi	r3,r2,56
10010528:	e0bff817 	ldw	r2,-32(fp)
1001052c:	1885883a 	add	r2,r3,r2
10010530:	e1bff617 	ldw	r6,-40(fp)
10010534:	100b883a 	mov	r5,r2
10010538:	e13ff517 	ldw	r4,-44(fp)
1001053c:	00080a00 	call	100080a0 <memcpy>
      ptr   += n;
10010540:	e0fff517 	ldw	r3,-44(fp)
10010544:	e0bff617 	ldw	r2,-40(fp)
10010548:	1885883a 	add	r2,r3,r2
1001054c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010550:	e0fffe17 	ldw	r3,-8(fp)
10010554:	e0bff617 	ldw	r2,-40(fp)
10010558:	1885c83a 	sub	r2,r3,r2
1001055c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010560:	e0fff817 	ldw	r3,-32(fp)
10010564:	e0bff617 	ldw	r2,-40(fp)
10010568:	1885883a 	add	r2,r3,r2
1001056c:	10c1ffcc 	andi	r3,r2,2047
10010570:	e0bffc17 	ldw	r2,-16(fp)
10010574:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010578:	e0bffe17 	ldw	r2,-8(fp)
1001057c:	00bfcf16 	blt	zero,r2,100104bc <__alt_data_end+0xf80104bc>
10010580:	00000106 	br	10010588 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10010584:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10010588:	e0fff517 	ldw	r3,-44(fp)
1001058c:	e0bffd17 	ldw	r2,-12(fp)
10010590:	1880141e 	bne	r3,r2,100105e4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010594:	e0bfff17 	ldw	r2,-4(fp)
10010598:	1090000c 	andi	r2,r2,16384
1001059c:	1000131e 	bne	r2,zero,100105ec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100105a0:	0001883a 	nop
100105a4:	e0bffc17 	ldw	r2,-16(fp)
100105a8:	10c00a17 	ldw	r3,40(r2)
100105ac:	e0bff717 	ldw	r2,-36(fp)
100105b0:	1880051e 	bne	r3,r2,100105c8 <altera_avalon_jtag_uart_read+0x138>
100105b4:	e0bffc17 	ldw	r2,-16(fp)
100105b8:	10c00917 	ldw	r3,36(r2)
100105bc:	e0bffc17 	ldw	r2,-16(fp)
100105c0:	10800117 	ldw	r2,4(r2)
100105c4:	18bff736 	bltu	r3,r2,100105a4 <__alt_data_end+0xf80105a4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100105c8:	e0bffc17 	ldw	r2,-16(fp)
100105cc:	10c00a17 	ldw	r3,40(r2)
100105d0:	e0bff717 	ldw	r2,-36(fp)
100105d4:	18800726 	beq	r3,r2,100105f4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100105d8:	e0bffe17 	ldw	r2,-8(fp)
100105dc:	00bfb716 	blt	zero,r2,100104bc <__alt_data_end+0xf80104bc>
100105e0:	00000506 	br	100105f8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100105e4:	0001883a 	nop
100105e8:	00000306 	br	100105f8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100105ec:	0001883a 	nop
100105f0:	00000106 	br	100105f8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100105f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100105f8:	e0fff517 	ldw	r3,-44(fp)
100105fc:	e0bffd17 	ldw	r2,-12(fp)
10010600:	18801826 	beq	r3,r2,10010664 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010604:	0005303a 	rdctl	r2,status
10010608:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001060c:	e0fffb17 	ldw	r3,-20(fp)
10010610:	00bfff84 	movi	r2,-2
10010614:	1884703a 	and	r2,r3,r2
10010618:	1001703a 	wrctl	status,r2
  
  return context;
1001061c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010620:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010624:	e0bffc17 	ldw	r2,-16(fp)
10010628:	10800817 	ldw	r2,32(r2)
1001062c:	10c00054 	ori	r3,r2,1
10010630:	e0bffc17 	ldw	r2,-16(fp)
10010634:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010638:	e0bffc17 	ldw	r2,-16(fp)
1001063c:	10800017 	ldw	r2,0(r2)
10010640:	10800104 	addi	r2,r2,4
10010644:	1007883a 	mov	r3,r2
10010648:	e0bffc17 	ldw	r2,-16(fp)
1001064c:	10800817 	ldw	r2,32(r2)
10010650:	18800035 	stwio	r2,0(r3)
10010654:	e0bffa17 	ldw	r2,-24(fp)
10010658:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001065c:	e0bff917 	ldw	r2,-28(fp)
10010660:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010664:	e0fff517 	ldw	r3,-44(fp)
10010668:	e0bffd17 	ldw	r2,-12(fp)
1001066c:	18800426 	beq	r3,r2,10010680 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10010670:	e0fff517 	ldw	r3,-44(fp)
10010674:	e0bffd17 	ldw	r2,-12(fp)
10010678:	1885c83a 	sub	r2,r3,r2
1001067c:	00000606 	br	10010698 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10010680:	e0bfff17 	ldw	r2,-4(fp)
10010684:	1090000c 	andi	r2,r2,16384
10010688:	10000226 	beq	r2,zero,10010694 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1001068c:	00bffd44 	movi	r2,-11
10010690:	00000106 	br	10010698 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10010694:	00bffec4 	movi	r2,-5
}
10010698:	e037883a 	mov	sp,fp
1001069c:	dfc00117 	ldw	ra,4(sp)
100106a0:	df000017 	ldw	fp,0(sp)
100106a4:	dec00204 	addi	sp,sp,8
100106a8:	f800283a 	ret

100106ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100106ac:	defff304 	addi	sp,sp,-52
100106b0:	dfc00c15 	stw	ra,48(sp)
100106b4:	df000b15 	stw	fp,44(sp)
100106b8:	df000b04 	addi	fp,sp,44
100106bc:	e13ffc15 	stw	r4,-16(fp)
100106c0:	e17ffd15 	stw	r5,-12(fp)
100106c4:	e1bffe15 	stw	r6,-8(fp)
100106c8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100106cc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100106d0:	e0bffd17 	ldw	r2,-12(fp)
100106d4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100106d8:	00003706 	br	100107b8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100106dc:	e0bffc17 	ldw	r2,-16(fp)
100106e0:	10800c17 	ldw	r2,48(r2)
100106e4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100106e8:	e0bffc17 	ldw	r2,-16(fp)
100106ec:	10800d17 	ldw	r2,52(r2)
100106f0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100106f4:	e0fff917 	ldw	r3,-28(fp)
100106f8:	e0bff517 	ldw	r2,-44(fp)
100106fc:	1880062e 	bgeu	r3,r2,10010718 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010700:	e0fff517 	ldw	r3,-44(fp)
10010704:	e0bff917 	ldw	r2,-28(fp)
10010708:	1885c83a 	sub	r2,r3,r2
1001070c:	10bfffc4 	addi	r2,r2,-1
10010710:	e0bff615 	stw	r2,-40(fp)
10010714:	00000b06 	br	10010744 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010718:	e0bff517 	ldw	r2,-44(fp)
1001071c:	10000526 	beq	r2,zero,10010734 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010720:	00c20004 	movi	r3,2048
10010724:	e0bff917 	ldw	r2,-28(fp)
10010728:	1885c83a 	sub	r2,r3,r2
1001072c:	e0bff615 	stw	r2,-40(fp)
10010730:	00000406 	br	10010744 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010734:	00c1ffc4 	movi	r3,2047
10010738:	e0bff917 	ldw	r2,-28(fp)
1001073c:	1885c83a 	sub	r2,r3,r2
10010740:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010744:	e0bff617 	ldw	r2,-40(fp)
10010748:	10001e26 	beq	r2,zero,100107c4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1001074c:	e0fffe17 	ldw	r3,-8(fp)
10010750:	e0bff617 	ldw	r2,-40(fp)
10010754:	1880022e 	bgeu	r3,r2,10010760 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10010758:	e0bffe17 	ldw	r2,-8(fp)
1001075c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010760:	e0bffc17 	ldw	r2,-16(fp)
10010764:	10c20e04 	addi	r3,r2,2104
10010768:	e0bff917 	ldw	r2,-28(fp)
1001076c:	1885883a 	add	r2,r3,r2
10010770:	e1bff617 	ldw	r6,-40(fp)
10010774:	e17ffd17 	ldw	r5,-12(fp)
10010778:	1009883a 	mov	r4,r2
1001077c:	00080a00 	call	100080a0 <memcpy>
      ptr   += n;
10010780:	e0fffd17 	ldw	r3,-12(fp)
10010784:	e0bff617 	ldw	r2,-40(fp)
10010788:	1885883a 	add	r2,r3,r2
1001078c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010790:	e0fffe17 	ldw	r3,-8(fp)
10010794:	e0bff617 	ldw	r2,-40(fp)
10010798:	1885c83a 	sub	r2,r3,r2
1001079c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100107a0:	e0fff917 	ldw	r3,-28(fp)
100107a4:	e0bff617 	ldw	r2,-40(fp)
100107a8:	1885883a 	add	r2,r3,r2
100107ac:	10c1ffcc 	andi	r3,r2,2047
100107b0:	e0bffc17 	ldw	r2,-16(fp)
100107b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100107b8:	e0bffe17 	ldw	r2,-8(fp)
100107bc:	00bfc716 	blt	zero,r2,100106dc <__alt_data_end+0xf80106dc>
100107c0:	00000106 	br	100107c8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100107c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100107c8:	0005303a 	rdctl	r2,status
100107cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100107d0:	e0fffb17 	ldw	r3,-20(fp)
100107d4:	00bfff84 	movi	r2,-2
100107d8:	1884703a 	and	r2,r3,r2
100107dc:	1001703a 	wrctl	status,r2
  
  return context;
100107e0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100107e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100107e8:	e0bffc17 	ldw	r2,-16(fp)
100107ec:	10800817 	ldw	r2,32(r2)
100107f0:	10c00094 	ori	r3,r2,2
100107f4:	e0bffc17 	ldw	r2,-16(fp)
100107f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100107fc:	e0bffc17 	ldw	r2,-16(fp)
10010800:	10800017 	ldw	r2,0(r2)
10010804:	10800104 	addi	r2,r2,4
10010808:	1007883a 	mov	r3,r2
1001080c:	e0bffc17 	ldw	r2,-16(fp)
10010810:	10800817 	ldw	r2,32(r2)
10010814:	18800035 	stwio	r2,0(r3)
10010818:	e0bffa17 	ldw	r2,-24(fp)
1001081c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010820:	e0bff817 	ldw	r2,-32(fp)
10010824:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010828:	e0bffe17 	ldw	r2,-8(fp)
1001082c:	0080100e 	bge	zero,r2,10010870 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010830:	e0bfff17 	ldw	r2,-4(fp)
10010834:	1090000c 	andi	r2,r2,16384
10010838:	1000101e 	bne	r2,zero,1001087c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1001083c:	0001883a 	nop
10010840:	e0bffc17 	ldw	r2,-16(fp)
10010844:	10c00d17 	ldw	r3,52(r2)
10010848:	e0bff517 	ldw	r2,-44(fp)
1001084c:	1880051e 	bne	r3,r2,10010864 <altera_avalon_jtag_uart_write+0x1b8>
10010850:	e0bffc17 	ldw	r2,-16(fp)
10010854:	10c00917 	ldw	r3,36(r2)
10010858:	e0bffc17 	ldw	r2,-16(fp)
1001085c:	10800117 	ldw	r2,4(r2)
10010860:	18bff736 	bltu	r3,r2,10010840 <__alt_data_end+0xf8010840>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010864:	e0bffc17 	ldw	r2,-16(fp)
10010868:	10800917 	ldw	r2,36(r2)
1001086c:	1000051e 	bne	r2,zero,10010884 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10010870:	e0bffe17 	ldw	r2,-8(fp)
10010874:	00bfd016 	blt	zero,r2,100107b8 <__alt_data_end+0xf80107b8>
10010878:	00000306 	br	10010888 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1001087c:	0001883a 	nop
10010880:	00000106 	br	10010888 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10010884:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010888:	e0fffd17 	ldw	r3,-12(fp)
1001088c:	e0bff717 	ldw	r2,-36(fp)
10010890:	18800426 	beq	r3,r2,100108a4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10010894:	e0fffd17 	ldw	r3,-12(fp)
10010898:	e0bff717 	ldw	r2,-36(fp)
1001089c:	1885c83a 	sub	r2,r3,r2
100108a0:	00000606 	br	100108bc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100108a4:	e0bfff17 	ldw	r2,-4(fp)
100108a8:	1090000c 	andi	r2,r2,16384
100108ac:	10000226 	beq	r2,zero,100108b8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100108b0:	00bffd44 	movi	r2,-11
100108b4:	00000106 	br	100108bc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100108b8:	00bffec4 	movi	r2,-5
}
100108bc:	e037883a 	mov	sp,fp
100108c0:	dfc00117 	ldw	ra,4(sp)
100108c4:	df000017 	ldw	fp,0(sp)
100108c8:	dec00204 	addi	sp,sp,8
100108cc:	f800283a 	ret

100108d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100108d0:	defff504 	addi	sp,sp,-44
100108d4:	df000a15 	stw	fp,40(sp)
100108d8:	df000a04 	addi	fp,sp,40
100108dc:	e13ffc15 	stw	r4,-16(fp)
100108e0:	e17ffd15 	stw	r5,-12(fp)
100108e4:	e1bffe15 	stw	r6,-8(fp)
100108e8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100108ec:	e03ff615 	stw	zero,-40(fp)
100108f0:	d0a6d917 	ldw	r2,-25756(gp)
  
  if (alt_ticks_per_second ())
100108f4:	10003c26 	beq	r2,zero,100109e8 <alt_alarm_start+0x118>
  {
    if (alarm)
100108f8:	e0bffc17 	ldw	r2,-16(fp)
100108fc:	10003826 	beq	r2,zero,100109e0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010900:	e0bffc17 	ldw	r2,-16(fp)
10010904:	e0fffe17 	ldw	r3,-8(fp)
10010908:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001090c:	e0bffc17 	ldw	r2,-16(fp)
10010910:	e0ffff17 	ldw	r3,-4(fp)
10010914:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010918:	0005303a 	rdctl	r2,status
1001091c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010920:	e0fff917 	ldw	r3,-28(fp)
10010924:	00bfff84 	movi	r2,-2
10010928:	1884703a 	and	r2,r3,r2
1001092c:	1001703a 	wrctl	status,r2
  
  return context;
10010930:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10010934:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010938:	d0a6da17 	ldw	r2,-25752(gp)
      
      current_nticks = alt_nticks();
1001093c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010940:	e0fffd17 	ldw	r3,-12(fp)
10010944:	e0bff617 	ldw	r2,-40(fp)
10010948:	1885883a 	add	r2,r3,r2
1001094c:	10c00044 	addi	r3,r2,1
10010950:	e0bffc17 	ldw	r2,-16(fp)
10010954:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010958:	e0bffc17 	ldw	r2,-16(fp)
1001095c:	10c00217 	ldw	r3,8(r2)
10010960:	e0bff617 	ldw	r2,-40(fp)
10010964:	1880042e 	bgeu	r3,r2,10010978 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010968:	e0bffc17 	ldw	r2,-16(fp)
1001096c:	00c00044 	movi	r3,1
10010970:	10c00405 	stb	r3,16(r2)
10010974:	00000206 	br	10010980 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010978:	e0bffc17 	ldw	r2,-16(fp)
1001097c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010980:	e0bffc17 	ldw	r2,-16(fp)
10010984:	d0e00f04 	addi	r3,gp,-32708
10010988:	e0fffa15 	stw	r3,-24(fp)
1001098c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010990:	e0bffb17 	ldw	r2,-20(fp)
10010994:	e0fffa17 	ldw	r3,-24(fp)
10010998:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001099c:	e0bffa17 	ldw	r2,-24(fp)
100109a0:	10c00017 	ldw	r3,0(r2)
100109a4:	e0bffb17 	ldw	r2,-20(fp)
100109a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100109ac:	e0bffa17 	ldw	r2,-24(fp)
100109b0:	10800017 	ldw	r2,0(r2)
100109b4:	e0fffb17 	ldw	r3,-20(fp)
100109b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100109bc:	e0bffa17 	ldw	r2,-24(fp)
100109c0:	e0fffb17 	ldw	r3,-20(fp)
100109c4:	10c00015 	stw	r3,0(r2)
100109c8:	e0bff817 	ldw	r2,-32(fp)
100109cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100109d0:	e0bff717 	ldw	r2,-36(fp)
100109d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100109d8:	0005883a 	mov	r2,zero
100109dc:	00000306 	br	100109ec <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100109e0:	00bffa84 	movi	r2,-22
100109e4:	00000106 	br	100109ec <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100109e8:	00bfde84 	movi	r2,-134
  }
}
100109ec:	e037883a 	mov	sp,fp
100109f0:	df000017 	ldw	fp,0(sp)
100109f4:	dec00104 	addi	sp,sp,4
100109f8:	f800283a 	ret

100109fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100109fc:	defffa04 	addi	sp,sp,-24
10010a00:	dfc00515 	stw	ra,20(sp)
10010a04:	df000415 	stw	fp,16(sp)
10010a08:	df000404 	addi	fp,sp,16
10010a0c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10010a10:	00800244 	movi	r2,9
10010a14:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10010a18:	014003f4 	movhi	r5,15
10010a1c:	29509004 	addi	r5,r5,16960
10010a20:	e13ffd17 	ldw	r4,-12(fp)
10010a24:	000cb200 	call	1000cb20 <__mulsi3>
10010a28:	100b883a 	mov	r5,r2
10010a2c:	0100bef4 	movhi	r4,763
10010a30:	213c2004 	addi	r4,r4,-3968
10010a34:	000ca640 	call	1000ca64 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10010a38:	100b883a 	mov	r5,r2
10010a3c:	01200034 	movhi	r4,32768
10010a40:	213fffc4 	addi	r4,r4,-1
10010a44:	000ca640 	call	1000ca64 <__udivsi3>
10010a48:	100b883a 	mov	r5,r2
10010a4c:	e13fff17 	ldw	r4,-4(fp)
10010a50:	000ca640 	call	1000ca64 <__udivsi3>
10010a54:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10010a58:	e0bffe17 	ldw	r2,-8(fp)
10010a5c:	10002a26 	beq	r2,zero,10010b08 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010a60:	e03ffc15 	stw	zero,-16(fp)
10010a64:	00001706 	br	10010ac4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010a68:	00a00034 	movhi	r2,32768
10010a6c:	10bfffc4 	addi	r2,r2,-1
10010a70:	10bfffc4 	addi	r2,r2,-1
10010a74:	103ffe1e 	bne	r2,zero,10010a70 <__alt_data_end+0xf8010a70>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010a78:	014003f4 	movhi	r5,15
10010a7c:	29509004 	addi	r5,r5,16960
10010a80:	e13ffd17 	ldw	r4,-12(fp)
10010a84:	000cb200 	call	1000cb20 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010a88:	100b883a 	mov	r5,r2
10010a8c:	0100bef4 	movhi	r4,763
10010a90:	213c2004 	addi	r4,r4,-3968
10010a94:	000ca640 	call	1000ca64 <__udivsi3>
10010a98:	100b883a 	mov	r5,r2
10010a9c:	01200034 	movhi	r4,32768
10010aa0:	213fffc4 	addi	r4,r4,-1
10010aa4:	000ca640 	call	1000ca64 <__udivsi3>
10010aa8:	1007883a 	mov	r3,r2
10010aac:	e0bfff17 	ldw	r2,-4(fp)
10010ab0:	10c5c83a 	sub	r2,r2,r3
10010ab4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010ab8:	e0bffc17 	ldw	r2,-16(fp)
10010abc:	10800044 	addi	r2,r2,1
10010ac0:	e0bffc15 	stw	r2,-16(fp)
10010ac4:	e0fffc17 	ldw	r3,-16(fp)
10010ac8:	e0bffe17 	ldw	r2,-8(fp)
10010acc:	18bfe616 	blt	r3,r2,10010a68 <__alt_data_end+0xf8010a68>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010ad0:	014003f4 	movhi	r5,15
10010ad4:	29509004 	addi	r5,r5,16960
10010ad8:	e13ffd17 	ldw	r4,-12(fp)
10010adc:	000cb200 	call	1000cb20 <__mulsi3>
10010ae0:	100b883a 	mov	r5,r2
10010ae4:	0100bef4 	movhi	r4,763
10010ae8:	213c2004 	addi	r4,r4,-3968
10010aec:	000ca640 	call	1000ca64 <__udivsi3>
10010af0:	e17fff17 	ldw	r5,-4(fp)
10010af4:	1009883a 	mov	r4,r2
10010af8:	000cb200 	call	1000cb20 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010afc:	10bfffc4 	addi	r2,r2,-1
10010b00:	103ffe1e 	bne	r2,zero,10010afc <__alt_data_end+0xf8010afc>
10010b04:	00000d06 	br	10010b3c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010b08:	014003f4 	movhi	r5,15
10010b0c:	29509004 	addi	r5,r5,16960
10010b10:	e13ffd17 	ldw	r4,-12(fp)
10010b14:	000cb200 	call	1000cb20 <__mulsi3>
10010b18:	100b883a 	mov	r5,r2
10010b1c:	0100bef4 	movhi	r4,763
10010b20:	213c2004 	addi	r4,r4,-3968
10010b24:	000ca640 	call	1000ca64 <__udivsi3>
10010b28:	e17fff17 	ldw	r5,-4(fp)
10010b2c:	1009883a 	mov	r4,r2
10010b30:	000cb200 	call	1000cb20 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010b34:	10bfffc4 	addi	r2,r2,-1
10010b38:	00bffe16 	blt	zero,r2,10010b34 <__alt_data_end+0xf8010b34>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010b3c:	0005883a 	mov	r2,zero
}
10010b40:	e037883a 	mov	sp,fp
10010b44:	dfc00117 	ldw	ra,4(sp)
10010b48:	df000017 	ldw	fp,0(sp)
10010b4c:	dec00204 	addi	sp,sp,8
10010b50:	f800283a 	ret

10010b54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010b54:	deffff04 	addi	sp,sp,-4
10010b58:	df000015 	stw	fp,0(sp)
10010b5c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010b60:	0001883a 	nop
10010b64:	e037883a 	mov	sp,fp
10010b68:	df000017 	ldw	fp,0(sp)
10010b6c:	dec00104 	addi	sp,sp,4
10010b70:	f800283a 	ret

10010b74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010b74:	defffe04 	addi	sp,sp,-8
10010b78:	dfc00115 	stw	ra,4(sp)
10010b7c:	df000015 	stw	fp,0(sp)
10010b80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010b84:	d0a00c17 	ldw	r2,-32720(gp)
10010b88:	10000326 	beq	r2,zero,10010b98 <alt_get_errno+0x24>
10010b8c:	d0a00c17 	ldw	r2,-32720(gp)
10010b90:	103ee83a 	callr	r2
10010b94:	00000106 	br	10010b9c <alt_get_errno+0x28>
10010b98:	d0a6d404 	addi	r2,gp,-25776
}
10010b9c:	e037883a 	mov	sp,fp
10010ba0:	dfc00117 	ldw	ra,4(sp)
10010ba4:	df000017 	ldw	fp,0(sp)
10010ba8:	dec00204 	addi	sp,sp,8
10010bac:	f800283a 	ret

10010bb0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010bb0:	defffa04 	addi	sp,sp,-24
10010bb4:	dfc00515 	stw	ra,20(sp)
10010bb8:	df000415 	stw	fp,16(sp)
10010bbc:	df000404 	addi	fp,sp,16
10010bc0:	e13ffe15 	stw	r4,-8(fp)
10010bc4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010bc8:	e0bffe17 	ldw	r2,-8(fp)
10010bcc:	10000326 	beq	r2,zero,10010bdc <alt_dev_llist_insert+0x2c>
10010bd0:	e0bffe17 	ldw	r2,-8(fp)
10010bd4:	10800217 	ldw	r2,8(r2)
10010bd8:	1000061e 	bne	r2,zero,10010bf4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010bdc:	0010b740 	call	10010b74 <alt_get_errno>
10010be0:	1007883a 	mov	r3,r2
10010be4:	00800584 	movi	r2,22
10010be8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010bec:	00bffa84 	movi	r2,-22
10010bf0:	00001306 	br	10010c40 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010bf4:	e0bffe17 	ldw	r2,-8(fp)
10010bf8:	e0ffff17 	ldw	r3,-4(fp)
10010bfc:	e0fffc15 	stw	r3,-16(fp)
10010c00:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010c04:	e0bffd17 	ldw	r2,-12(fp)
10010c08:	e0fffc17 	ldw	r3,-16(fp)
10010c0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010c10:	e0bffc17 	ldw	r2,-16(fp)
10010c14:	10c00017 	ldw	r3,0(r2)
10010c18:	e0bffd17 	ldw	r2,-12(fp)
10010c1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010c20:	e0bffc17 	ldw	r2,-16(fp)
10010c24:	10800017 	ldw	r2,0(r2)
10010c28:	e0fffd17 	ldw	r3,-12(fp)
10010c2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010c30:	e0bffc17 	ldw	r2,-16(fp)
10010c34:	e0fffd17 	ldw	r3,-12(fp)
10010c38:	10c00015 	stw	r3,0(r2)

  return 0;  
10010c3c:	0005883a 	mov	r2,zero
}
10010c40:	e037883a 	mov	sp,fp
10010c44:	dfc00117 	ldw	ra,4(sp)
10010c48:	df000017 	ldw	fp,0(sp)
10010c4c:	dec00204 	addi	sp,sp,8
10010c50:	f800283a 	ret

10010c54 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010c54:	defffd04 	addi	sp,sp,-12
10010c58:	dfc00215 	stw	ra,8(sp)
10010c5c:	df000115 	stw	fp,4(sp)
10010c60:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010c64:	00840074 	movhi	r2,4097
10010c68:	10870204 	addi	r2,r2,7176
10010c6c:	e0bfff15 	stw	r2,-4(fp)
10010c70:	00000606 	br	10010c8c <_do_ctors+0x38>
        (*ctor) (); 
10010c74:	e0bfff17 	ldw	r2,-4(fp)
10010c78:	10800017 	ldw	r2,0(r2)
10010c7c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010c80:	e0bfff17 	ldw	r2,-4(fp)
10010c84:	10bfff04 	addi	r2,r2,-4
10010c88:	e0bfff15 	stw	r2,-4(fp)
10010c8c:	e0ffff17 	ldw	r3,-4(fp)
10010c90:	00840074 	movhi	r2,4097
10010c94:	10870304 	addi	r2,r2,7180
10010c98:	18bff62e 	bgeu	r3,r2,10010c74 <__alt_data_end+0xf8010c74>
        (*ctor) (); 
}
10010c9c:	0001883a 	nop
10010ca0:	e037883a 	mov	sp,fp
10010ca4:	dfc00117 	ldw	ra,4(sp)
10010ca8:	df000017 	ldw	fp,0(sp)
10010cac:	dec00204 	addi	sp,sp,8
10010cb0:	f800283a 	ret

10010cb4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010cb4:	defffd04 	addi	sp,sp,-12
10010cb8:	dfc00215 	stw	ra,8(sp)
10010cbc:	df000115 	stw	fp,4(sp)
10010cc0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010cc4:	00840074 	movhi	r2,4097
10010cc8:	10870204 	addi	r2,r2,7176
10010ccc:	e0bfff15 	stw	r2,-4(fp)
10010cd0:	00000606 	br	10010cec <_do_dtors+0x38>
        (*dtor) (); 
10010cd4:	e0bfff17 	ldw	r2,-4(fp)
10010cd8:	10800017 	ldw	r2,0(r2)
10010cdc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010ce0:	e0bfff17 	ldw	r2,-4(fp)
10010ce4:	10bfff04 	addi	r2,r2,-4
10010ce8:	e0bfff15 	stw	r2,-4(fp)
10010cec:	e0ffff17 	ldw	r3,-4(fp)
10010cf0:	00840074 	movhi	r2,4097
10010cf4:	10870304 	addi	r2,r2,7180
10010cf8:	18bff62e 	bgeu	r3,r2,10010cd4 <__alt_data_end+0xf8010cd4>
        (*dtor) (); 
}
10010cfc:	0001883a 	nop
10010d00:	e037883a 	mov	sp,fp
10010d04:	dfc00117 	ldw	ra,4(sp)
10010d08:	df000017 	ldw	fp,0(sp)
10010d0c:	dec00204 	addi	sp,sp,8
10010d10:	f800283a 	ret

10010d14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010d14:	deffff04 	addi	sp,sp,-4
10010d18:	df000015 	stw	fp,0(sp)
10010d1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010d20:	0001883a 	nop
10010d24:	e037883a 	mov	sp,fp
10010d28:	df000017 	ldw	fp,0(sp)
10010d2c:	dec00104 	addi	sp,sp,4
10010d30:	f800283a 	ret

10010d34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010d34:	defff904 	addi	sp,sp,-28
10010d38:	dfc00615 	stw	ra,24(sp)
10010d3c:	df000515 	stw	fp,20(sp)
10010d40:	df000504 	addi	fp,sp,20
10010d44:	e13ffc15 	stw	r4,-16(fp)
10010d48:	e17ffd15 	stw	r5,-12(fp)
10010d4c:	e1bffe15 	stw	r6,-8(fp)
10010d50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010d54:	e0800217 	ldw	r2,8(fp)
10010d58:	d8800015 	stw	r2,0(sp)
10010d5c:	e1ffff17 	ldw	r7,-4(fp)
10010d60:	e1bffe17 	ldw	r6,-8(fp)
10010d64:	e17ffd17 	ldw	r5,-12(fp)
10010d68:	e13ffc17 	ldw	r4,-16(fp)
10010d6c:	0010ee40 	call	10010ee4 <alt_iic_isr_register>
}  
10010d70:	e037883a 	mov	sp,fp
10010d74:	dfc00117 	ldw	ra,4(sp)
10010d78:	df000017 	ldw	fp,0(sp)
10010d7c:	dec00204 	addi	sp,sp,8
10010d80:	f800283a 	ret

10010d84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010d84:	defff904 	addi	sp,sp,-28
10010d88:	df000615 	stw	fp,24(sp)
10010d8c:	df000604 	addi	fp,sp,24
10010d90:	e13ffe15 	stw	r4,-8(fp)
10010d94:	e17fff15 	stw	r5,-4(fp)
10010d98:	e0bfff17 	ldw	r2,-4(fp)
10010d9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010da0:	0005303a 	rdctl	r2,status
10010da4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010da8:	e0fffb17 	ldw	r3,-20(fp)
10010dac:	00bfff84 	movi	r2,-2
10010db0:	1884703a 	and	r2,r3,r2
10010db4:	1001703a 	wrctl	status,r2
  
  return context;
10010db8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010dbc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010dc0:	00c00044 	movi	r3,1
10010dc4:	e0bffa17 	ldw	r2,-24(fp)
10010dc8:	1884983a 	sll	r2,r3,r2
10010dcc:	1007883a 	mov	r3,r2
10010dd0:	d0a6d817 	ldw	r2,-25760(gp)
10010dd4:	1884b03a 	or	r2,r3,r2
10010dd8:	d0a6d815 	stw	r2,-25760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010ddc:	d0a6d817 	ldw	r2,-25760(gp)
10010de0:	100170fa 	wrctl	ienable,r2
10010de4:	e0bffc17 	ldw	r2,-16(fp)
10010de8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010dec:	e0bffd17 	ldw	r2,-12(fp)
10010df0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010df4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010df8:	0001883a 	nop
}
10010dfc:	e037883a 	mov	sp,fp
10010e00:	df000017 	ldw	fp,0(sp)
10010e04:	dec00104 	addi	sp,sp,4
10010e08:	f800283a 	ret

10010e0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010e0c:	defff904 	addi	sp,sp,-28
10010e10:	df000615 	stw	fp,24(sp)
10010e14:	df000604 	addi	fp,sp,24
10010e18:	e13ffe15 	stw	r4,-8(fp)
10010e1c:	e17fff15 	stw	r5,-4(fp)
10010e20:	e0bfff17 	ldw	r2,-4(fp)
10010e24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010e28:	0005303a 	rdctl	r2,status
10010e2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e30:	e0fffb17 	ldw	r3,-20(fp)
10010e34:	00bfff84 	movi	r2,-2
10010e38:	1884703a 	and	r2,r3,r2
10010e3c:	1001703a 	wrctl	status,r2
  
  return context;
10010e40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010e44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010e48:	00c00044 	movi	r3,1
10010e4c:	e0bffa17 	ldw	r2,-24(fp)
10010e50:	1884983a 	sll	r2,r3,r2
10010e54:	0084303a 	nor	r2,zero,r2
10010e58:	1007883a 	mov	r3,r2
10010e5c:	d0a6d817 	ldw	r2,-25760(gp)
10010e60:	1884703a 	and	r2,r3,r2
10010e64:	d0a6d815 	stw	r2,-25760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010e68:	d0a6d817 	ldw	r2,-25760(gp)
10010e6c:	100170fa 	wrctl	ienable,r2
10010e70:	e0bffc17 	ldw	r2,-16(fp)
10010e74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010e78:	e0bffd17 	ldw	r2,-12(fp)
10010e7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010e80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010e84:	0001883a 	nop
}
10010e88:	e037883a 	mov	sp,fp
10010e8c:	df000017 	ldw	fp,0(sp)
10010e90:	dec00104 	addi	sp,sp,4
10010e94:	f800283a 	ret

10010e98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010e98:	defffc04 	addi	sp,sp,-16
10010e9c:	df000315 	stw	fp,12(sp)
10010ea0:	df000304 	addi	fp,sp,12
10010ea4:	e13ffe15 	stw	r4,-8(fp)
10010ea8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010eac:	000530fa 	rdctl	r2,ienable
10010eb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010eb4:	00c00044 	movi	r3,1
10010eb8:	e0bfff17 	ldw	r2,-4(fp)
10010ebc:	1884983a 	sll	r2,r3,r2
10010ec0:	1007883a 	mov	r3,r2
10010ec4:	e0bffd17 	ldw	r2,-12(fp)
10010ec8:	1884703a 	and	r2,r3,r2
10010ecc:	1004c03a 	cmpne	r2,r2,zero
10010ed0:	10803fcc 	andi	r2,r2,255
}
10010ed4:	e037883a 	mov	sp,fp
10010ed8:	df000017 	ldw	fp,0(sp)
10010edc:	dec00104 	addi	sp,sp,4
10010ee0:	f800283a 	ret

10010ee4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010ee4:	defff504 	addi	sp,sp,-44
10010ee8:	dfc00a15 	stw	ra,40(sp)
10010eec:	df000915 	stw	fp,36(sp)
10010ef0:	df000904 	addi	fp,sp,36
10010ef4:	e13ffc15 	stw	r4,-16(fp)
10010ef8:	e17ffd15 	stw	r5,-12(fp)
10010efc:	e1bffe15 	stw	r6,-8(fp)
10010f00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010f04:	00bffa84 	movi	r2,-22
10010f08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010f0c:	e0bffd17 	ldw	r2,-12(fp)
10010f10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010f14:	e0bff817 	ldw	r2,-32(fp)
10010f18:	10800808 	cmpgei	r2,r2,32
10010f1c:	1000271e 	bne	r2,zero,10010fbc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010f20:	0005303a 	rdctl	r2,status
10010f24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010f28:	e0fffb17 	ldw	r3,-20(fp)
10010f2c:	00bfff84 	movi	r2,-2
10010f30:	1884703a 	and	r2,r3,r2
10010f34:	1001703a 	wrctl	status,r2
  
  return context;
10010f38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010f3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10010f40:	00840074 	movhi	r2,4097
10010f44:	10973b04 	addi	r2,r2,23788
10010f48:	e0fff817 	ldw	r3,-32(fp)
10010f4c:	180690fa 	slli	r3,r3,3
10010f50:	10c5883a 	add	r2,r2,r3
10010f54:	e0fffe17 	ldw	r3,-8(fp)
10010f58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010f5c:	00840074 	movhi	r2,4097
10010f60:	10973b04 	addi	r2,r2,23788
10010f64:	e0fff817 	ldw	r3,-32(fp)
10010f68:	180690fa 	slli	r3,r3,3
10010f6c:	10c5883a 	add	r2,r2,r3
10010f70:	10800104 	addi	r2,r2,4
10010f74:	e0ffff17 	ldw	r3,-4(fp)
10010f78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010f7c:	e0bffe17 	ldw	r2,-8(fp)
10010f80:	10000526 	beq	r2,zero,10010f98 <alt_iic_isr_register+0xb4>
10010f84:	e0bff817 	ldw	r2,-32(fp)
10010f88:	100b883a 	mov	r5,r2
10010f8c:	e13ffc17 	ldw	r4,-16(fp)
10010f90:	0010d840 	call	10010d84 <alt_ic_irq_enable>
10010f94:	00000406 	br	10010fa8 <alt_iic_isr_register+0xc4>
10010f98:	e0bff817 	ldw	r2,-32(fp)
10010f9c:	100b883a 	mov	r5,r2
10010fa0:	e13ffc17 	ldw	r4,-16(fp)
10010fa4:	0010e0c0 	call	10010e0c <alt_ic_irq_disable>
10010fa8:	e0bff715 	stw	r2,-36(fp)
10010fac:	e0bffa17 	ldw	r2,-24(fp)
10010fb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010fb4:	e0bff917 	ldw	r2,-28(fp)
10010fb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010fbc:	e0bff717 	ldw	r2,-36(fp)
}
10010fc0:	e037883a 	mov	sp,fp
10010fc4:	dfc00117 	ldw	ra,4(sp)
10010fc8:	df000017 	ldw	fp,0(sp)
10010fcc:	dec00204 	addi	sp,sp,8
10010fd0:	f800283a 	ret

10010fd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010fd4:	defff804 	addi	sp,sp,-32
10010fd8:	dfc00715 	stw	ra,28(sp)
10010fdc:	df000615 	stw	fp,24(sp)
10010fe0:	dc000515 	stw	r16,20(sp)
10010fe4:	df000604 	addi	fp,sp,24
10010fe8:	e13ffb15 	stw	r4,-20(fp)
10010fec:	e17ffc15 	stw	r5,-16(fp)
10010ff0:	e1bffd15 	stw	r6,-12(fp)
10010ff4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010ff8:	e1bffe17 	ldw	r6,-8(fp)
10010ffc:	e17ffd17 	ldw	r5,-12(fp)
10011000:	e13ffc17 	ldw	r4,-16(fp)
10011004:	001125c0 	call	1001125c <open>
10011008:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1001100c:	e0bffa17 	ldw	r2,-24(fp)
10011010:	10002216 	blt	r2,zero,1001109c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011014:	04040074 	movhi	r16,4097
10011018:	840bdd04 	addi	r16,r16,12148
1001101c:	e0bffa17 	ldw	r2,-24(fp)
10011020:	01400304 	movi	r5,12
10011024:	1009883a 	mov	r4,r2
10011028:	000cb200 	call	1000cb20 <__mulsi3>
1001102c:	8085883a 	add	r2,r16,r2
10011030:	10c00017 	ldw	r3,0(r2)
10011034:	e0bffb17 	ldw	r2,-20(fp)
10011038:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1001103c:	04040074 	movhi	r16,4097
10011040:	840bdd04 	addi	r16,r16,12148
10011044:	e0bffa17 	ldw	r2,-24(fp)
10011048:	01400304 	movi	r5,12
1001104c:	1009883a 	mov	r4,r2
10011050:	000cb200 	call	1000cb20 <__mulsi3>
10011054:	8085883a 	add	r2,r16,r2
10011058:	10800104 	addi	r2,r2,4
1001105c:	10c00017 	ldw	r3,0(r2)
10011060:	e0bffb17 	ldw	r2,-20(fp)
10011064:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011068:	04040074 	movhi	r16,4097
1001106c:	840bdd04 	addi	r16,r16,12148
10011070:	e0bffa17 	ldw	r2,-24(fp)
10011074:	01400304 	movi	r5,12
10011078:	1009883a 	mov	r4,r2
1001107c:	000cb200 	call	1000cb20 <__mulsi3>
10011080:	8085883a 	add	r2,r16,r2
10011084:	10800204 	addi	r2,r2,8
10011088:	10c00017 	ldw	r3,0(r2)
1001108c:	e0bffb17 	ldw	r2,-20(fp)
10011090:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011094:	e13ffa17 	ldw	r4,-24(fp)
10011098:	000fb100 	call	1000fb10 <alt_release_fd>
  }
} 
1001109c:	0001883a 	nop
100110a0:	e6ffff04 	addi	sp,fp,-4
100110a4:	dfc00217 	ldw	ra,8(sp)
100110a8:	df000117 	ldw	fp,4(sp)
100110ac:	dc000017 	ldw	r16,0(sp)
100110b0:	dec00304 	addi	sp,sp,12
100110b4:	f800283a 	ret

100110b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100110b8:	defffb04 	addi	sp,sp,-20
100110bc:	dfc00415 	stw	ra,16(sp)
100110c0:	df000315 	stw	fp,12(sp)
100110c4:	df000304 	addi	fp,sp,12
100110c8:	e13ffd15 	stw	r4,-12(fp)
100110cc:	e17ffe15 	stw	r5,-8(fp)
100110d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100110d4:	01c07fc4 	movi	r7,511
100110d8:	01800044 	movi	r6,1
100110dc:	e17ffd17 	ldw	r5,-12(fp)
100110e0:	01040074 	movhi	r4,4097
100110e4:	210be004 	addi	r4,r4,12160
100110e8:	0010fd40 	call	10010fd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100110ec:	01c07fc4 	movi	r7,511
100110f0:	000d883a 	mov	r6,zero
100110f4:	e17ffe17 	ldw	r5,-8(fp)
100110f8:	01040074 	movhi	r4,4097
100110fc:	210bdd04 	addi	r4,r4,12148
10011100:	0010fd40 	call	10010fd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011104:	01c07fc4 	movi	r7,511
10011108:	01800044 	movi	r6,1
1001110c:	e17fff17 	ldw	r5,-4(fp)
10011110:	01040074 	movhi	r4,4097
10011114:	210be304 	addi	r4,r4,12172
10011118:	0010fd40 	call	10010fd4 <alt_open_fd>
}  
1001111c:	0001883a 	nop
10011120:	e037883a 	mov	sp,fp
10011124:	dfc00117 	ldw	ra,4(sp)
10011128:	df000017 	ldw	fp,0(sp)
1001112c:	dec00204 	addi	sp,sp,8
10011130:	f800283a 	ret

10011134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011134:	defffe04 	addi	sp,sp,-8
10011138:	dfc00115 	stw	ra,4(sp)
1001113c:	df000015 	stw	fp,0(sp)
10011140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011144:	d0a00c17 	ldw	r2,-32720(gp)
10011148:	10000326 	beq	r2,zero,10011158 <alt_get_errno+0x24>
1001114c:	d0a00c17 	ldw	r2,-32720(gp)
10011150:	103ee83a 	callr	r2
10011154:	00000106 	br	1001115c <alt_get_errno+0x28>
10011158:	d0a6d404 	addi	r2,gp,-25776
}
1001115c:	e037883a 	mov	sp,fp
10011160:	dfc00117 	ldw	ra,4(sp)
10011164:	df000017 	ldw	fp,0(sp)
10011168:	dec00204 	addi	sp,sp,8
1001116c:	f800283a 	ret

10011170 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10011170:	defffb04 	addi	sp,sp,-20
10011174:	dfc00415 	stw	ra,16(sp)
10011178:	df000315 	stw	fp,12(sp)
1001117c:	dc000215 	stw	r16,8(sp)
10011180:	df000304 	addi	fp,sp,12
10011184:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011188:	e0bffe17 	ldw	r2,-8(fp)
1001118c:	10800217 	ldw	r2,8(r2)
10011190:	10d00034 	orhi	r3,r2,16384
10011194:	e0bffe17 	ldw	r2,-8(fp)
10011198:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1001119c:	e03ffd15 	stw	zero,-12(fp)
100111a0:	00002306 	br	10011230 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100111a4:	04040074 	movhi	r16,4097
100111a8:	840bdd04 	addi	r16,r16,12148
100111ac:	e0bffd17 	ldw	r2,-12(fp)
100111b0:	01400304 	movi	r5,12
100111b4:	1009883a 	mov	r4,r2
100111b8:	000cb200 	call	1000cb20 <__mulsi3>
100111bc:	8085883a 	add	r2,r16,r2
100111c0:	10c00017 	ldw	r3,0(r2)
100111c4:	e0bffe17 	ldw	r2,-8(fp)
100111c8:	10800017 	ldw	r2,0(r2)
100111cc:	1880151e 	bne	r3,r2,10011224 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100111d0:	04040074 	movhi	r16,4097
100111d4:	840bdd04 	addi	r16,r16,12148
100111d8:	e0bffd17 	ldw	r2,-12(fp)
100111dc:	01400304 	movi	r5,12
100111e0:	1009883a 	mov	r4,r2
100111e4:	000cb200 	call	1000cb20 <__mulsi3>
100111e8:	8085883a 	add	r2,r16,r2
100111ec:	10800204 	addi	r2,r2,8
100111f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100111f4:	10000b0e 	bge	r2,zero,10011224 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100111f8:	01400304 	movi	r5,12
100111fc:	e13ffd17 	ldw	r4,-12(fp)
10011200:	000cb200 	call	1000cb20 <__mulsi3>
10011204:	1007883a 	mov	r3,r2
10011208:	00840074 	movhi	r2,4097
1001120c:	108bdd04 	addi	r2,r2,12148
10011210:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011214:	e0bffe17 	ldw	r2,-8(fp)
10011218:	18800226 	beq	r3,r2,10011224 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1001121c:	00bffcc4 	movi	r2,-13
10011220:	00000806 	br	10011244 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011224:	e0bffd17 	ldw	r2,-12(fp)
10011228:	10800044 	addi	r2,r2,1
1001122c:	e0bffd15 	stw	r2,-12(fp)
10011230:	d0a00b17 	ldw	r2,-32724(gp)
10011234:	1007883a 	mov	r3,r2
10011238:	e0bffd17 	ldw	r2,-12(fp)
1001123c:	18bfd92e 	bgeu	r3,r2,100111a4 <__alt_data_end+0xf80111a4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011240:	0005883a 	mov	r2,zero
}
10011244:	e6ffff04 	addi	sp,fp,-4
10011248:	dfc00217 	ldw	ra,8(sp)
1001124c:	df000117 	ldw	fp,4(sp)
10011250:	dc000017 	ldw	r16,0(sp)
10011254:	dec00304 	addi	sp,sp,12
10011258:	f800283a 	ret

1001125c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1001125c:	defff604 	addi	sp,sp,-40
10011260:	dfc00915 	stw	ra,36(sp)
10011264:	df000815 	stw	fp,32(sp)
10011268:	df000804 	addi	fp,sp,32
1001126c:	e13ffd15 	stw	r4,-12(fp)
10011270:	e17ffe15 	stw	r5,-8(fp)
10011274:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10011278:	00bfffc4 	movi	r2,-1
1001127c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10011280:	00bffb44 	movi	r2,-19
10011284:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10011288:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1001128c:	d1600904 	addi	r5,gp,-32732
10011290:	e13ffd17 	ldw	r4,-12(fp)
10011294:	00115800 	call	10011580 <alt_find_dev>
10011298:	e0bff815 	stw	r2,-32(fp)
1001129c:	e0bff817 	ldw	r2,-32(fp)
100112a0:	1000051e 	bne	r2,zero,100112b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100112a4:	e13ffd17 	ldw	r4,-12(fp)
100112a8:	00116100 	call	10011610 <alt_find_file>
100112ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100112b0:	00800044 	movi	r2,1
100112b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100112b8:	e0bff817 	ldw	r2,-32(fp)
100112bc:	10002b26 	beq	r2,zero,1001136c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
100112c0:	e13ff817 	ldw	r4,-32(fp)
100112c4:	00117180 	call	10011718 <alt_get_fd>
100112c8:	e0bff915 	stw	r2,-28(fp)
100112cc:	e0bff917 	ldw	r2,-28(fp)
100112d0:	1000030e 	bge	r2,zero,100112e0 <open+0x84>
    {
      status = index;
100112d4:	e0bff917 	ldw	r2,-28(fp)
100112d8:	e0bffa15 	stw	r2,-24(fp)
100112dc:	00002506 	br	10011374 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
100112e0:	01400304 	movi	r5,12
100112e4:	e13ff917 	ldw	r4,-28(fp)
100112e8:	000cb200 	call	1000cb20 <__mulsi3>
100112ec:	1007883a 	mov	r3,r2
100112f0:	00840074 	movhi	r2,4097
100112f4:	108bdd04 	addi	r2,r2,12148
100112f8:	1885883a 	add	r2,r3,r2
100112fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011300:	e0fffe17 	ldw	r3,-8(fp)
10011304:	00900034 	movhi	r2,16384
10011308:	10bfffc4 	addi	r2,r2,-1
1001130c:	1886703a 	and	r3,r3,r2
10011310:	e0bffc17 	ldw	r2,-16(fp)
10011314:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011318:	e0bffb17 	ldw	r2,-20(fp)
1001131c:	1000051e 	bne	r2,zero,10011334 <open+0xd8>
10011320:	e13ffc17 	ldw	r4,-16(fp)
10011324:	00111700 	call	10011170 <alt_file_locked>
10011328:	e0bffa15 	stw	r2,-24(fp)
1001132c:	e0bffa17 	ldw	r2,-24(fp)
10011330:	10001016 	blt	r2,zero,10011374 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011334:	e0bff817 	ldw	r2,-32(fp)
10011338:	10800317 	ldw	r2,12(r2)
1001133c:	10000826 	beq	r2,zero,10011360 <open+0x104>
10011340:	e0bff817 	ldw	r2,-32(fp)
10011344:	10800317 	ldw	r2,12(r2)
10011348:	e1ffff17 	ldw	r7,-4(fp)
1001134c:	e1bffe17 	ldw	r6,-8(fp)
10011350:	e17ffd17 	ldw	r5,-12(fp)
10011354:	e13ffc17 	ldw	r4,-16(fp)
10011358:	103ee83a 	callr	r2
1001135c:	00000106 	br	10011364 <open+0x108>
10011360:	0005883a 	mov	r2,zero
10011364:	e0bffa15 	stw	r2,-24(fp)
10011368:	00000206 	br	10011374 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
1001136c:	00bffb44 	movi	r2,-19
10011370:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011374:	e0bffa17 	ldw	r2,-24(fp)
10011378:	1000090e 	bge	r2,zero,100113a0 <open+0x144>
  {
    alt_release_fd (index);  
1001137c:	e13ff917 	ldw	r4,-28(fp)
10011380:	000fb100 	call	1000fb10 <alt_release_fd>
    ALT_ERRNO = -status;
10011384:	00111340 	call	10011134 <alt_get_errno>
10011388:	1007883a 	mov	r3,r2
1001138c:	e0bffa17 	ldw	r2,-24(fp)
10011390:	0085c83a 	sub	r2,zero,r2
10011394:	18800015 	stw	r2,0(r3)
    return -1;
10011398:	00bfffc4 	movi	r2,-1
1001139c:	00000106 	br	100113a4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100113a0:	e0bff917 	ldw	r2,-28(fp)
}
100113a4:	e037883a 	mov	sp,fp
100113a8:	dfc00117 	ldw	ra,4(sp)
100113ac:	df000017 	ldw	fp,0(sp)
100113b0:	dec00204 	addi	sp,sp,8
100113b4:	f800283a 	ret

100113b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100113b8:	defffa04 	addi	sp,sp,-24
100113bc:	df000515 	stw	fp,20(sp)
100113c0:	df000504 	addi	fp,sp,20
100113c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100113c8:	0005303a 	rdctl	r2,status
100113cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100113d0:	e0fffc17 	ldw	r3,-16(fp)
100113d4:	00bfff84 	movi	r2,-2
100113d8:	1884703a 	and	r2,r3,r2
100113dc:	1001703a 	wrctl	status,r2
  
  return context;
100113e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100113e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100113e8:	e0bfff17 	ldw	r2,-4(fp)
100113ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100113f0:	e0bffd17 	ldw	r2,-12(fp)
100113f4:	10800017 	ldw	r2,0(r2)
100113f8:	e0fffd17 	ldw	r3,-12(fp)
100113fc:	18c00117 	ldw	r3,4(r3)
10011400:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011404:	e0bffd17 	ldw	r2,-12(fp)
10011408:	10800117 	ldw	r2,4(r2)
1001140c:	e0fffd17 	ldw	r3,-12(fp)
10011410:	18c00017 	ldw	r3,0(r3)
10011414:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011418:	e0bffd17 	ldw	r2,-12(fp)
1001141c:	e0fffd17 	ldw	r3,-12(fp)
10011420:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011424:	e0bffd17 	ldw	r2,-12(fp)
10011428:	e0fffd17 	ldw	r3,-12(fp)
1001142c:	10c00015 	stw	r3,0(r2)
10011430:	e0bffb17 	ldw	r2,-20(fp)
10011434:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011438:	e0bffe17 	ldw	r2,-8(fp)
1001143c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011440:	0001883a 	nop
10011444:	e037883a 	mov	sp,fp
10011448:	df000017 	ldw	fp,0(sp)
1001144c:	dec00104 	addi	sp,sp,4
10011450:	f800283a 	ret

10011454 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011454:	defffb04 	addi	sp,sp,-20
10011458:	dfc00415 	stw	ra,16(sp)
1001145c:	df000315 	stw	fp,12(sp)
10011460:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011464:	d0a00f17 	ldw	r2,-32708(gp)
10011468:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1001146c:	d0a6da17 	ldw	r2,-25752(gp)
10011470:	10800044 	addi	r2,r2,1
10011474:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011478:	00002e06 	br	10011534 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1001147c:	e0bffd17 	ldw	r2,-12(fp)
10011480:	10800017 	ldw	r2,0(r2)
10011484:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011488:	e0bffd17 	ldw	r2,-12(fp)
1001148c:	10800403 	ldbu	r2,16(r2)
10011490:	10803fcc 	andi	r2,r2,255
10011494:	10000426 	beq	r2,zero,100114a8 <alt_tick+0x54>
10011498:	d0a6da17 	ldw	r2,-25752(gp)
1001149c:	1000021e 	bne	r2,zero,100114a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100114a0:	e0bffd17 	ldw	r2,-12(fp)
100114a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100114a8:	e0bffd17 	ldw	r2,-12(fp)
100114ac:	10800217 	ldw	r2,8(r2)
100114b0:	d0e6da17 	ldw	r3,-25752(gp)
100114b4:	18801d36 	bltu	r3,r2,1001152c <alt_tick+0xd8>
100114b8:	e0bffd17 	ldw	r2,-12(fp)
100114bc:	10800403 	ldbu	r2,16(r2)
100114c0:	10803fcc 	andi	r2,r2,255
100114c4:	1000191e 	bne	r2,zero,1001152c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100114c8:	e0bffd17 	ldw	r2,-12(fp)
100114cc:	10800317 	ldw	r2,12(r2)
100114d0:	e0fffd17 	ldw	r3,-12(fp)
100114d4:	18c00517 	ldw	r3,20(r3)
100114d8:	1809883a 	mov	r4,r3
100114dc:	103ee83a 	callr	r2
100114e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100114e4:	e0bfff17 	ldw	r2,-4(fp)
100114e8:	1000031e 	bne	r2,zero,100114f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100114ec:	e13ffd17 	ldw	r4,-12(fp)
100114f0:	00113b80 	call	100113b8 <alt_alarm_stop>
100114f4:	00000d06 	br	1001152c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100114f8:	e0bffd17 	ldw	r2,-12(fp)
100114fc:	10c00217 	ldw	r3,8(r2)
10011500:	e0bfff17 	ldw	r2,-4(fp)
10011504:	1887883a 	add	r3,r3,r2
10011508:	e0bffd17 	ldw	r2,-12(fp)
1001150c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011510:	e0bffd17 	ldw	r2,-12(fp)
10011514:	10c00217 	ldw	r3,8(r2)
10011518:	d0a6da17 	ldw	r2,-25752(gp)
1001151c:	1880032e 	bgeu	r3,r2,1001152c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011520:	e0bffd17 	ldw	r2,-12(fp)
10011524:	00c00044 	movi	r3,1
10011528:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1001152c:	e0bffe17 	ldw	r2,-8(fp)
10011530:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011534:	e0fffd17 	ldw	r3,-12(fp)
10011538:	d0a00f04 	addi	r2,gp,-32708
1001153c:	18bfcf1e 	bne	r3,r2,1001147c <__alt_data_end+0xf801147c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011540:	0001883a 	nop
}
10011544:	0001883a 	nop
10011548:	e037883a 	mov	sp,fp
1001154c:	dfc00117 	ldw	ra,4(sp)
10011550:	df000017 	ldw	fp,0(sp)
10011554:	dec00204 	addi	sp,sp,8
10011558:	f800283a 	ret

1001155c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1001155c:	deffff04 	addi	sp,sp,-4
10011560:	df000015 	stw	fp,0(sp)
10011564:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011568:	000170fa 	wrctl	ienable,zero
}
1001156c:	0001883a 	nop
10011570:	e037883a 	mov	sp,fp
10011574:	df000017 	ldw	fp,0(sp)
10011578:	dec00104 	addi	sp,sp,4
1001157c:	f800283a 	ret

10011580 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011580:	defffa04 	addi	sp,sp,-24
10011584:	dfc00515 	stw	ra,20(sp)
10011588:	df000415 	stw	fp,16(sp)
1001158c:	df000404 	addi	fp,sp,16
10011590:	e13ffe15 	stw	r4,-8(fp)
10011594:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011598:	e0bfff17 	ldw	r2,-4(fp)
1001159c:	10800017 	ldw	r2,0(r2)
100115a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100115a4:	e13ffe17 	ldw	r4,-8(fp)
100115a8:	00025ec0 	call	100025ec <strlen>
100115ac:	10800044 	addi	r2,r2,1
100115b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100115b4:	00000d06 	br	100115ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100115b8:	e0bffc17 	ldw	r2,-16(fp)
100115bc:	10800217 	ldw	r2,8(r2)
100115c0:	e0fffd17 	ldw	r3,-12(fp)
100115c4:	180d883a 	mov	r6,r3
100115c8:	e17ffe17 	ldw	r5,-8(fp)
100115cc:	1009883a 	mov	r4,r2
100115d0:	00118c40 	call	100118c4 <memcmp>
100115d4:	1000021e 	bne	r2,zero,100115e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100115d8:	e0bffc17 	ldw	r2,-16(fp)
100115dc:	00000706 	br	100115fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100115e0:	e0bffc17 	ldw	r2,-16(fp)
100115e4:	10800017 	ldw	r2,0(r2)
100115e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100115ec:	e0fffc17 	ldw	r3,-16(fp)
100115f0:	e0bfff17 	ldw	r2,-4(fp)
100115f4:	18bff01e 	bne	r3,r2,100115b8 <__alt_data_end+0xf80115b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100115f8:	0005883a 	mov	r2,zero
}
100115fc:	e037883a 	mov	sp,fp
10011600:	dfc00117 	ldw	ra,4(sp)
10011604:	df000017 	ldw	fp,0(sp)
10011608:	dec00204 	addi	sp,sp,8
1001160c:	f800283a 	ret

10011610 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011610:	defffb04 	addi	sp,sp,-20
10011614:	dfc00415 	stw	ra,16(sp)
10011618:	df000315 	stw	fp,12(sp)
1001161c:	df000304 	addi	fp,sp,12
10011620:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011624:	d0a00717 	ldw	r2,-32740(gp)
10011628:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001162c:	00003106 	br	100116f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10011630:	e0bffd17 	ldw	r2,-12(fp)
10011634:	10800217 	ldw	r2,8(r2)
10011638:	1009883a 	mov	r4,r2
1001163c:	00025ec0 	call	100025ec <strlen>
10011640:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011644:	e0bffd17 	ldw	r2,-12(fp)
10011648:	10c00217 	ldw	r3,8(r2)
1001164c:	e0bffe17 	ldw	r2,-8(fp)
10011650:	10bfffc4 	addi	r2,r2,-1
10011654:	1885883a 	add	r2,r3,r2
10011658:	10800003 	ldbu	r2,0(r2)
1001165c:	10803fcc 	andi	r2,r2,255
10011660:	1080201c 	xori	r2,r2,128
10011664:	10bfe004 	addi	r2,r2,-128
10011668:	10800bd8 	cmpnei	r2,r2,47
1001166c:	1000031e 	bne	r2,zero,1001167c <alt_find_file+0x6c>
    {
      len -= 1;
10011670:	e0bffe17 	ldw	r2,-8(fp)
10011674:	10bfffc4 	addi	r2,r2,-1
10011678:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001167c:	e0bffe17 	ldw	r2,-8(fp)
10011680:	e0ffff17 	ldw	r3,-4(fp)
10011684:	1885883a 	add	r2,r3,r2
10011688:	10800003 	ldbu	r2,0(r2)
1001168c:	10803fcc 	andi	r2,r2,255
10011690:	1080201c 	xori	r2,r2,128
10011694:	10bfe004 	addi	r2,r2,-128
10011698:	10800be0 	cmpeqi	r2,r2,47
1001169c:	1000081e 	bne	r2,zero,100116c0 <alt_find_file+0xb0>
100116a0:	e0bffe17 	ldw	r2,-8(fp)
100116a4:	e0ffff17 	ldw	r3,-4(fp)
100116a8:	1885883a 	add	r2,r3,r2
100116ac:	10800003 	ldbu	r2,0(r2)
100116b0:	10803fcc 	andi	r2,r2,255
100116b4:	1080201c 	xori	r2,r2,128
100116b8:	10bfe004 	addi	r2,r2,-128
100116bc:	10000a1e 	bne	r2,zero,100116e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100116c0:	e0bffd17 	ldw	r2,-12(fp)
100116c4:	10800217 	ldw	r2,8(r2)
100116c8:	e0fffe17 	ldw	r3,-8(fp)
100116cc:	180d883a 	mov	r6,r3
100116d0:	e17fff17 	ldw	r5,-4(fp)
100116d4:	1009883a 	mov	r4,r2
100116d8:	00118c40 	call	100118c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100116dc:	1000021e 	bne	r2,zero,100116e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100116e0:	e0bffd17 	ldw	r2,-12(fp)
100116e4:	00000706 	br	10011704 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100116e8:	e0bffd17 	ldw	r2,-12(fp)
100116ec:	10800017 	ldw	r2,0(r2)
100116f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100116f4:	e0fffd17 	ldw	r3,-12(fp)
100116f8:	d0a00704 	addi	r2,gp,-32740
100116fc:	18bfcc1e 	bne	r3,r2,10011630 <__alt_data_end+0xf8011630>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011700:	0005883a 	mov	r2,zero
}
10011704:	e037883a 	mov	sp,fp
10011708:	dfc00117 	ldw	ra,4(sp)
1001170c:	df000017 	ldw	fp,0(sp)
10011710:	dec00204 	addi	sp,sp,8
10011714:	f800283a 	ret

10011718 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011718:	defffa04 	addi	sp,sp,-24
1001171c:	dfc00515 	stw	ra,20(sp)
10011720:	df000415 	stw	fp,16(sp)
10011724:	dc000315 	stw	r16,12(sp)
10011728:	df000404 	addi	fp,sp,16
1001172c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011730:	00bffa04 	movi	r2,-24
10011734:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011738:	e03ffc15 	stw	zero,-16(fp)
1001173c:	00001d06 	br	100117b4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10011740:	04040074 	movhi	r16,4097
10011744:	840bdd04 	addi	r16,r16,12148
10011748:	e0bffc17 	ldw	r2,-16(fp)
1001174c:	01400304 	movi	r5,12
10011750:	1009883a 	mov	r4,r2
10011754:	000cb200 	call	1000cb20 <__mulsi3>
10011758:	8085883a 	add	r2,r16,r2
1001175c:	10800017 	ldw	r2,0(r2)
10011760:	1000111e 	bne	r2,zero,100117a8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10011764:	04040074 	movhi	r16,4097
10011768:	840bdd04 	addi	r16,r16,12148
1001176c:	e0bffc17 	ldw	r2,-16(fp)
10011770:	01400304 	movi	r5,12
10011774:	1009883a 	mov	r4,r2
10011778:	000cb200 	call	1000cb20 <__mulsi3>
1001177c:	8085883a 	add	r2,r16,r2
10011780:	e0fffe17 	ldw	r3,-8(fp)
10011784:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011788:	d0e00b17 	ldw	r3,-32724(gp)
1001178c:	e0bffc17 	ldw	r2,-16(fp)
10011790:	1880020e 	bge	r3,r2,1001179c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10011794:	e0bffc17 	ldw	r2,-16(fp)
10011798:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
1001179c:	e0bffc17 	ldw	r2,-16(fp)
100117a0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100117a4:	00000606 	br	100117c0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100117a8:	e0bffc17 	ldw	r2,-16(fp)
100117ac:	10800044 	addi	r2,r2,1
100117b0:	e0bffc15 	stw	r2,-16(fp)
100117b4:	e0bffc17 	ldw	r2,-16(fp)
100117b8:	10800810 	cmplti	r2,r2,32
100117bc:	103fe01e 	bne	r2,zero,10011740 <__alt_data_end+0xf8011740>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100117c0:	e0bffd17 	ldw	r2,-12(fp)
}
100117c4:	e6ffff04 	addi	sp,fp,-4
100117c8:	dfc00217 	ldw	ra,8(sp)
100117cc:	df000117 	ldw	fp,4(sp)
100117d0:	dc000017 	ldw	r16,0(sp)
100117d4:	dec00304 	addi	sp,sp,12
100117d8:	f800283a 	ret

100117dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100117dc:	defffe04 	addi	sp,sp,-8
100117e0:	df000115 	stw	fp,4(sp)
100117e4:	df000104 	addi	fp,sp,4
100117e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100117ec:	e0bfff17 	ldw	r2,-4(fp)
100117f0:	10bffe84 	addi	r2,r2,-6
100117f4:	10c00428 	cmpgeui	r3,r2,16
100117f8:	18001a1e 	bne	r3,zero,10011864 <alt_exception_cause_generated_bad_addr+0x88>
100117fc:	100690ba 	slli	r3,r2,2
10011800:	00840074 	movhi	r2,4097
10011804:	10860504 	addi	r2,r2,6164
10011808:	1885883a 	add	r2,r3,r2
1001180c:	10800017 	ldw	r2,0(r2)
10011810:	1000683a 	jmp	r2
10011814:	10011854 	ori	zero,r2,1121
10011818:	10011854 	ori	zero,r2,1121
1001181c:	10011864 	muli	zero,r2,1121
10011820:	10011864 	muli	zero,r2,1121
10011824:	10011864 	muli	zero,r2,1121
10011828:	10011854 	ori	zero,r2,1121
1001182c:	1001185c 	xori	zero,r2,1121
10011830:	10011864 	muli	zero,r2,1121
10011834:	10011854 	ori	zero,r2,1121
10011838:	10011854 	ori	zero,r2,1121
1001183c:	10011864 	muli	zero,r2,1121
10011840:	10011854 	ori	zero,r2,1121
10011844:	1001185c 	xori	zero,r2,1121
10011848:	10011864 	muli	zero,r2,1121
1001184c:	10011864 	muli	zero,r2,1121
10011850:	10011854 	ori	zero,r2,1121
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011854:	00800044 	movi	r2,1
10011858:	00000306 	br	10011868 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1001185c:	0005883a 	mov	r2,zero
10011860:	00000106 	br	10011868 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10011864:	0005883a 	mov	r2,zero
  }
}
10011868:	e037883a 	mov	sp,fp
1001186c:	df000017 	ldw	fp,0(sp)
10011870:	dec00104 	addi	sp,sp,4
10011874:	f800283a 	ret

10011878 <atexit>:
10011878:	200b883a 	mov	r5,r4
1001187c:	000f883a 	mov	r7,zero
10011880:	000d883a 	mov	r6,zero
10011884:	0009883a 	mov	r4,zero
10011888:	00119401 	jmpi	10011940 <__register_exitproc>

1001188c <exit>:
1001188c:	defffe04 	addi	sp,sp,-8
10011890:	000b883a 	mov	r5,zero
10011894:	dc000015 	stw	r16,0(sp)
10011898:	dfc00115 	stw	ra,4(sp)
1001189c:	2021883a 	mov	r16,r4
100118a0:	0011a580 	call	10011a58 <__call_exitprocs>
100118a4:	00840074 	movhi	r2,4097
100118a8:	10905604 	addi	r2,r2,16728
100118ac:	11000017 	ldw	r4,0(r2)
100118b0:	20800f17 	ldw	r2,60(r4)
100118b4:	10000126 	beq	r2,zero,100118bc <exit+0x30>
100118b8:	103ee83a 	callr	r2
100118bc:	8009883a 	mov	r4,r16
100118c0:	0011bd80 	call	10011bd8 <_exit>

100118c4 <memcmp>:
100118c4:	01c000c4 	movi	r7,3
100118c8:	3980192e 	bgeu	r7,r6,10011930 <memcmp+0x6c>
100118cc:	2144b03a 	or	r2,r4,r5
100118d0:	11c4703a 	and	r2,r2,r7
100118d4:	10000f26 	beq	r2,zero,10011914 <memcmp+0x50>
100118d8:	20800003 	ldbu	r2,0(r4)
100118dc:	28c00003 	ldbu	r3,0(r5)
100118e0:	10c0151e 	bne	r2,r3,10011938 <memcmp+0x74>
100118e4:	31bfff84 	addi	r6,r6,-2
100118e8:	01ffffc4 	movi	r7,-1
100118ec:	00000406 	br	10011900 <memcmp+0x3c>
100118f0:	20800003 	ldbu	r2,0(r4)
100118f4:	28c00003 	ldbu	r3,0(r5)
100118f8:	31bfffc4 	addi	r6,r6,-1
100118fc:	10c00e1e 	bne	r2,r3,10011938 <memcmp+0x74>
10011900:	21000044 	addi	r4,r4,1
10011904:	29400044 	addi	r5,r5,1
10011908:	31fff91e 	bne	r6,r7,100118f0 <__alt_data_end+0xf80118f0>
1001190c:	0005883a 	mov	r2,zero
10011910:	f800283a 	ret
10011914:	20c00017 	ldw	r3,0(r4)
10011918:	28800017 	ldw	r2,0(r5)
1001191c:	18bfee1e 	bne	r3,r2,100118d8 <__alt_data_end+0xf80118d8>
10011920:	31bfff04 	addi	r6,r6,-4
10011924:	21000104 	addi	r4,r4,4
10011928:	29400104 	addi	r5,r5,4
1001192c:	39bff936 	bltu	r7,r6,10011914 <__alt_data_end+0xf8011914>
10011930:	303fe91e 	bne	r6,zero,100118d8 <__alt_data_end+0xf80118d8>
10011934:	003ff506 	br	1001190c <__alt_data_end+0xf801190c>
10011938:	10c5c83a 	sub	r2,r2,r3
1001193c:	f800283a 	ret

10011940 <__register_exitproc>:
10011940:	defffa04 	addi	sp,sp,-24
10011944:	dc000315 	stw	r16,12(sp)
10011948:	04040074 	movhi	r16,4097
1001194c:	84105604 	addi	r16,r16,16728
10011950:	80c00017 	ldw	r3,0(r16)
10011954:	dc400415 	stw	r17,16(sp)
10011958:	dfc00515 	stw	ra,20(sp)
1001195c:	18805217 	ldw	r2,328(r3)
10011960:	2023883a 	mov	r17,r4
10011964:	10003726 	beq	r2,zero,10011a44 <__register_exitproc+0x104>
10011968:	10c00117 	ldw	r3,4(r2)
1001196c:	010007c4 	movi	r4,31
10011970:	20c00e16 	blt	r4,r3,100119ac <__register_exitproc+0x6c>
10011974:	1a000044 	addi	r8,r3,1
10011978:	8800221e 	bne	r17,zero,10011a04 <__register_exitproc+0xc4>
1001197c:	18c00084 	addi	r3,r3,2
10011980:	18c7883a 	add	r3,r3,r3
10011984:	18c7883a 	add	r3,r3,r3
10011988:	12000115 	stw	r8,4(r2)
1001198c:	10c7883a 	add	r3,r2,r3
10011990:	19400015 	stw	r5,0(r3)
10011994:	0005883a 	mov	r2,zero
10011998:	dfc00517 	ldw	ra,20(sp)
1001199c:	dc400417 	ldw	r17,16(sp)
100119a0:	dc000317 	ldw	r16,12(sp)
100119a4:	dec00604 	addi	sp,sp,24
100119a8:	f800283a 	ret
100119ac:	00800034 	movhi	r2,0
100119b0:	10800004 	addi	r2,r2,0
100119b4:	10002626 	beq	r2,zero,10011a50 <__register_exitproc+0x110>
100119b8:	01006404 	movi	r4,400
100119bc:	d9400015 	stw	r5,0(sp)
100119c0:	d9800115 	stw	r6,4(sp)
100119c4:	d9c00215 	stw	r7,8(sp)
100119c8:	00000000 	call	10000000 <__alt_mem_sdram>
100119cc:	d9400017 	ldw	r5,0(sp)
100119d0:	d9800117 	ldw	r6,4(sp)
100119d4:	d9c00217 	ldw	r7,8(sp)
100119d8:	10001d26 	beq	r2,zero,10011a50 <__register_exitproc+0x110>
100119dc:	81000017 	ldw	r4,0(r16)
100119e0:	10000115 	stw	zero,4(r2)
100119e4:	02000044 	movi	r8,1
100119e8:	22405217 	ldw	r9,328(r4)
100119ec:	0007883a 	mov	r3,zero
100119f0:	12400015 	stw	r9,0(r2)
100119f4:	20805215 	stw	r2,328(r4)
100119f8:	10006215 	stw	zero,392(r2)
100119fc:	10006315 	stw	zero,396(r2)
10011a00:	883fde26 	beq	r17,zero,1001197c <__alt_data_end+0xf801197c>
10011a04:	18c9883a 	add	r4,r3,r3
10011a08:	2109883a 	add	r4,r4,r4
10011a0c:	1109883a 	add	r4,r2,r4
10011a10:	21802215 	stw	r6,136(r4)
10011a14:	01800044 	movi	r6,1
10011a18:	12406217 	ldw	r9,392(r2)
10011a1c:	30cc983a 	sll	r6,r6,r3
10011a20:	4992b03a 	or	r9,r9,r6
10011a24:	12406215 	stw	r9,392(r2)
10011a28:	21c04215 	stw	r7,264(r4)
10011a2c:	01000084 	movi	r4,2
10011a30:	893fd21e 	bne	r17,r4,1001197c <__alt_data_end+0xf801197c>
10011a34:	11006317 	ldw	r4,396(r2)
10011a38:	218cb03a 	or	r6,r4,r6
10011a3c:	11806315 	stw	r6,396(r2)
10011a40:	003fce06 	br	1001197c <__alt_data_end+0xf801197c>
10011a44:	18805304 	addi	r2,r3,332
10011a48:	18805215 	stw	r2,328(r3)
10011a4c:	003fc606 	br	10011968 <__alt_data_end+0xf8011968>
10011a50:	00bfffc4 	movi	r2,-1
10011a54:	003fd006 	br	10011998 <__alt_data_end+0xf8011998>

10011a58 <__call_exitprocs>:
10011a58:	defff504 	addi	sp,sp,-44
10011a5c:	df000915 	stw	fp,36(sp)
10011a60:	dd400615 	stw	r21,24(sp)
10011a64:	dc800315 	stw	r18,12(sp)
10011a68:	dfc00a15 	stw	ra,40(sp)
10011a6c:	ddc00815 	stw	r23,32(sp)
10011a70:	dd800715 	stw	r22,28(sp)
10011a74:	dd000515 	stw	r20,20(sp)
10011a78:	dcc00415 	stw	r19,16(sp)
10011a7c:	dc400215 	stw	r17,8(sp)
10011a80:	dc000115 	stw	r16,4(sp)
10011a84:	d9000015 	stw	r4,0(sp)
10011a88:	2839883a 	mov	fp,r5
10011a8c:	04800044 	movi	r18,1
10011a90:	057fffc4 	movi	r21,-1
10011a94:	00840074 	movhi	r2,4097
10011a98:	10905604 	addi	r2,r2,16728
10011a9c:	12000017 	ldw	r8,0(r2)
10011aa0:	45005217 	ldw	r20,328(r8)
10011aa4:	44c05204 	addi	r19,r8,328
10011aa8:	a0001c26 	beq	r20,zero,10011b1c <__call_exitprocs+0xc4>
10011aac:	a0800117 	ldw	r2,4(r20)
10011ab0:	15ffffc4 	addi	r23,r2,-1
10011ab4:	b8000d16 	blt	r23,zero,10011aec <__call_exitprocs+0x94>
10011ab8:	14000044 	addi	r16,r2,1
10011abc:	8421883a 	add	r16,r16,r16
10011ac0:	8421883a 	add	r16,r16,r16
10011ac4:	84402004 	addi	r17,r16,128
10011ac8:	a463883a 	add	r17,r20,r17
10011acc:	a421883a 	add	r16,r20,r16
10011ad0:	e0001e26 	beq	fp,zero,10011b4c <__call_exitprocs+0xf4>
10011ad4:	80804017 	ldw	r2,256(r16)
10011ad8:	e0801c26 	beq	fp,r2,10011b4c <__call_exitprocs+0xf4>
10011adc:	bdffffc4 	addi	r23,r23,-1
10011ae0:	843fff04 	addi	r16,r16,-4
10011ae4:	8c7fff04 	addi	r17,r17,-4
10011ae8:	bd7ff91e 	bne	r23,r21,10011ad0 <__alt_data_end+0xf8011ad0>
10011aec:	00800034 	movhi	r2,0
10011af0:	10800004 	addi	r2,r2,0
10011af4:	10000926 	beq	r2,zero,10011b1c <__call_exitprocs+0xc4>
10011af8:	a0800117 	ldw	r2,4(r20)
10011afc:	1000301e 	bne	r2,zero,10011bc0 <__call_exitprocs+0x168>
10011b00:	a0800017 	ldw	r2,0(r20)
10011b04:	10003226 	beq	r2,zero,10011bd0 <__call_exitprocs+0x178>
10011b08:	a009883a 	mov	r4,r20
10011b0c:	98800015 	stw	r2,0(r19)
10011b10:	00000000 	call	10000000 <__alt_mem_sdram>
10011b14:	9d000017 	ldw	r20,0(r19)
10011b18:	a03fe41e 	bne	r20,zero,10011aac <__alt_data_end+0xf8011aac>
10011b1c:	dfc00a17 	ldw	ra,40(sp)
10011b20:	df000917 	ldw	fp,36(sp)
10011b24:	ddc00817 	ldw	r23,32(sp)
10011b28:	dd800717 	ldw	r22,28(sp)
10011b2c:	dd400617 	ldw	r21,24(sp)
10011b30:	dd000517 	ldw	r20,20(sp)
10011b34:	dcc00417 	ldw	r19,16(sp)
10011b38:	dc800317 	ldw	r18,12(sp)
10011b3c:	dc400217 	ldw	r17,8(sp)
10011b40:	dc000117 	ldw	r16,4(sp)
10011b44:	dec00b04 	addi	sp,sp,44
10011b48:	f800283a 	ret
10011b4c:	a0800117 	ldw	r2,4(r20)
10011b50:	80c00017 	ldw	r3,0(r16)
10011b54:	10bfffc4 	addi	r2,r2,-1
10011b58:	15c01426 	beq	r2,r23,10011bac <__call_exitprocs+0x154>
10011b5c:	80000015 	stw	zero,0(r16)
10011b60:	183fde26 	beq	r3,zero,10011adc <__alt_data_end+0xf8011adc>
10011b64:	95c8983a 	sll	r4,r18,r23
10011b68:	a0806217 	ldw	r2,392(r20)
10011b6c:	a5800117 	ldw	r22,4(r20)
10011b70:	2084703a 	and	r2,r4,r2
10011b74:	10000b26 	beq	r2,zero,10011ba4 <__call_exitprocs+0x14c>
10011b78:	a0806317 	ldw	r2,396(r20)
10011b7c:	2088703a 	and	r4,r4,r2
10011b80:	20000c1e 	bne	r4,zero,10011bb4 <__call_exitprocs+0x15c>
10011b84:	89400017 	ldw	r5,0(r17)
10011b88:	d9000017 	ldw	r4,0(sp)
10011b8c:	183ee83a 	callr	r3
10011b90:	a0800117 	ldw	r2,4(r20)
10011b94:	15bfbf1e 	bne	r2,r22,10011a94 <__alt_data_end+0xf8011a94>
10011b98:	98800017 	ldw	r2,0(r19)
10011b9c:	153fcf26 	beq	r2,r20,10011adc <__alt_data_end+0xf8011adc>
10011ba0:	003fbc06 	br	10011a94 <__alt_data_end+0xf8011a94>
10011ba4:	183ee83a 	callr	r3
10011ba8:	003ff906 	br	10011b90 <__alt_data_end+0xf8011b90>
10011bac:	a5c00115 	stw	r23,4(r20)
10011bb0:	003feb06 	br	10011b60 <__alt_data_end+0xf8011b60>
10011bb4:	89000017 	ldw	r4,0(r17)
10011bb8:	183ee83a 	callr	r3
10011bbc:	003ff406 	br	10011b90 <__alt_data_end+0xf8011b90>
10011bc0:	a0800017 	ldw	r2,0(r20)
10011bc4:	a027883a 	mov	r19,r20
10011bc8:	1029883a 	mov	r20,r2
10011bcc:	003fb606 	br	10011aa8 <__alt_data_end+0xf8011aa8>
10011bd0:	0005883a 	mov	r2,zero
10011bd4:	003ffb06 	br	10011bc4 <__alt_data_end+0xf8011bc4>

10011bd8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011bd8:	defffd04 	addi	sp,sp,-12
10011bdc:	df000215 	stw	fp,8(sp)
10011be0:	df000204 	addi	fp,sp,8
10011be4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011be8:	0001883a 	nop
10011bec:	e0bfff17 	ldw	r2,-4(fp)
10011bf0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011bf4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011bf8:	10000226 	beq	r2,zero,10011c04 <_exit+0x2c>
    ALT_SIM_FAIL();
10011bfc:	002af070 	cmpltui	zero,zero,43969
10011c00:	00000106 	br	10011c08 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011c04:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011c08:	003fff06 	br	10011c08 <__alt_data_end+0xf8011c08>
